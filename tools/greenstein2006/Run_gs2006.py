#!/usr/bin/env python
"""
Runs coupled model (Greenstein, 2006).
"""

import os
import sys
import subprocess
import argparse
from copy import deepcopy

#Parse arguments
parser = argparse.ArgumentParser(description='Run Greenstein 2006 model.')
parser.add_argument('--root_dir')
parser.add_argument('--states_file')
parser.add_argument('--fluxes_file')
parser.add_argument('--params_file')
parser.add_argument('--log_file')
parser.add_argument('--protocol')

parser.add_argument('--STATE_1')
parser.add_argument('--STATE_2')
parser.add_argument('--STATE_3')
parser.add_argument('--STATE_4')
parser.add_argument('--STATE_5')
parser.add_argument('--STATE_6')
parser.add_argument('--STATE_7')
parser.add_argument('--STATE_8')
parser.add_argument('--STATE_9')
parser.add_argument('--STATE_10')
parser.add_argument('--STATE_11')
parser.add_argument('--STATE_12')
parser.add_argument('--STATE_13')
parser.add_argument('--STATE_14')
parser.add_argument('--STATE_15')
parser.add_argument('--STATE_16')
parser.add_argument('--STATE_17')
parser.add_argument('--STATE_18')
parser.add_argument('--STATE_19')
parser.add_argument('--STATE_20')
parser.add_argument('--STATE_21')
parser.add_argument('--STATE_22')
parser.add_argument('--STATE_23')
parser.add_argument('--STATE_24')
parser.add_argument('--STATE_25')
parser.add_argument('--STATE_26')
parser.add_argument('--STATE_27')
parser.add_argument('--STATE_28')
parser.add_argument('--STATE_29')
parser.add_argument('--STATE_30')
parser.add_argument('--STATE_31')
parser.add_argument('--STATE_32')
parser.add_argument('--STATE_33')
parser.add_argument('--STATE_34')
parser.add_argument('--STATE_35')
parser.add_argument('--STATE_36')
parser.add_argument('--STATE_37')
parser.add_argument('--STATE_38')
parser.add_argument('--STATE_39')
parser.add_argument('--STATE_40')
parser.add_argument('--V')
parser.add_argument('--mNa')
parser.add_argument('--hNa')
parser.add_argument('--jNa')
parser.add_argument('--Nai')
parser.add_argument('--Ki')
parser.add_argument('--Cai')
parser.add_argument('--CaSR')
parser.add_argument('--LTRPNCa')
parser.add_argument('--HTRPNCa')
parser.add_argument('--xKs')
parser.add_argument('--C0Kv43')
parser.add_argument('--C1Kv43')
parser.add_argument('--C2Kv43')
parser.add_argument('--C3Kv43')
parser.add_argument('--OKv43')
parser.add_argument('--CI0Kv43')
parser.add_argument('--CI1Kv43')
parser.add_argument('--CI2Kv43')
parser.add_argument('--CI3Kv43')
parser.add_argument('--OIKv43')
parser.add_argument('--C0Kv14')
parser.add_argument('--C1Kv14')
parser.add_argument('--C2Kv14')
parser.add_argument('--C3Kv14')
parser.add_argument('--OKv14')
parser.add_argument('--CI0Kv14')
parser.add_argument('--CI1Kv14')
parser.add_argument('--CI2Kv14')
parser.add_argument('--CI3Kv14')
parser.add_argument('--OIKv14')
parser.add_argument('--C1Herg')
parser.add_argument('--C2Herg')
parser.add_argument('--C3Herg')
parser.add_argument('--OHerg')
parser.add_argument('--IHerg')

parser.add_argument('--Num_beats')
parser.add_argument('--Period')
parser.add_argument('--Shift')
parser.add_argument('--Pulse_duration')
parser.add_argument('--Pulse_amplitude')
parser.add_argument('--t_clamp_start')
parser.add_argument('--t_clamp_end')
parser.add_argument('--t_sim_end')
parser.add_argument('--V_clamp')
parser.add_argument('--V_hold')
parser.add_argument('--DTOUT')
parser.add_argument('--t_output_start')

parser.add_argument('--NCaRU')
parser.add_argument('--Faraday')
parser.add_argument('--Temp')
parser.add_argument('--Rgas')
parser.add_argument('--Csa')
parser.add_argument('--VSS')
parser.add_argument('--VSR')
parser.add_argument('--Vmyo')
parser.add_argument('--PCa')
parser.add_argument('--JRyRmax')
parser.add_argument('--r_xfer')
parser.add_argument('--Cao')
parser.add_argument('--Ko')
parser.add_argument('--Nao')
parser.add_argument('--Clo')
parser.add_argument('--Cli')
parser.add_argument('--KdIto2')
parser.add_argument('--PCl')
parser.add_argument('--GKr')
parser.add_argument('--GKs')
parser.add_argument('--GK1')
parser.add_argument('--GKp')
parser.add_argument('--GNa')
parser.add_argument('--kNaCa')
parser.add_argument('--KmNa')
parser.add_argument('--KmCa')
parser.add_argument('--KmK1')
parser.add_argument('--ksat')
parser.add_argument('--eta')
parser.add_argument('--INaKmax')
parser.add_argument('--KmNai')
parser.add_argument('--KmKo')
parser.add_argument('--IpCamax')
parser.add_argument('--KmpCa')
parser.add_argument('--GCab')
parser.add_argument('--GNab')
parser.add_argument('--Kfb')
parser.add_argument('--Krb')
parser.add_argument('--KSR')
parser.add_argument('--Nfb')
parser.add_argument('--Nrb')
parser.add_argument('--vmaxf')
parser.add_argument('--vmaxr')
parser.add_argument('--KvScale')
parser.add_argument('--Kv43Frac')
parser.add_argument('--alphaa0Kv43')
parser.add_argument('--aaKv43')
parser.add_argument('--betaa0Kv43')
parser.add_argument('--baKv43')
parser.add_argument('--alphai0Kv43')
parser.add_argument('--aiKv43')
parser.add_argument('--betai0Kv43')
parser.add_argument('--biKv43')
parser.add_argument('--alphaa0Kv14')
parser.add_argument('--aaKv14')
parser.add_argument('--betaa0Kv14')
parser.add_argument('--baKv14')
parser.add_argument('--alphai0Kv14')
parser.add_argument('--betai0Kv14')
parser.add_argument('--f1Kv43')
parser.add_argument('--f2Kv43')
parser.add_argument('--f3Kv43')
parser.add_argument('--f4Kv43')
parser.add_argument('--b1Kv43')
parser.add_argument('--b2Kv43')
parser.add_argument('--b3Kv43')
parser.add_argument('--b4Kv43')
parser.add_argument('--f1Kv14')
parser.add_argument('--f2Kv14')
parser.add_argument('--f3Kv14')
parser.add_argument('--f4Kv14')
parser.add_argument('--b1Kv14')
parser.add_argument('--b2Kv14')
parser.add_argument('--b3Kv14')
parser.add_argument('--b4Kv14')
parser.add_argument('--A0_HERG')
parser.add_argument('--B0_HERG')
parser.add_argument('--A1_HERG')
parser.add_argument('--B1_HERG')
parser.add_argument('--A2_HERG')
parser.add_argument('--B2_HERG')
parser.add_argument('--A3_HERG')
parser.add_argument('--B3_HERG')
parser.add_argument('--A4_HERG')
parser.add_argument('--B4_HERG')
parser.add_argument('--A5_HERG')
parser.add_argument('--B5_HERG')
parser.add_argument('--A6_HERG')
parser.add_argument('--B6_HERG')
parser.add_argument('--T_Const_HERG')
parser.add_argument('--CSQNtot')
parser.add_argument('--KmCSQN')
parser.add_argument('--LTRPNtot')
parser.add_argument('--HTRPNtot')
parser.add_argument('--khtrpn_plus')
parser.add_argument('--khtrpn_minus')
parser.add_argument('--kltrpn_plus')
parser.add_argument('--kltrpn_minus')
parser.add_argument('--CMDNtot')
parser.add_argument('--EGTAtot')
parser.add_argument('--KmCMDN')
parser.add_argument('--KmEGTA')
parser.add_argument('--fL')
parser.add_argument('--gL')
parser.add_argument('--bL')
parser.add_argument('--aL')
parser.add_argument('--omega')
parser.add_argument('--gammacf')
parser.add_argument('--k12')
parser.add_argument('--k21')
parser.add_argument('--k23')
parser.add_argument('--k32')
parser.add_argument('--k34')
parser.add_argument('--k43')
parser.add_argument('--k45')
parser.add_argument('--k54')
parser.add_argument('--k56')
parser.add_argument('--k65')
parser.add_argument('--k25')
parser.add_argument('--k52')

args = parser.parse_args()

#Create content for the parameters file
param_content = ""
if args.protocol=="pacing":
	param_content += "Vclamp_flag=0\n"
else:
	param_content += "Vclamp_flag=1\n"
argvars = deepcopy(vars(args))
del argvars['root_dir']
del argvars['params_file']
del argvars['states_file']
del argvars['log_file']
del argvars['protocol']
del argvars['fluxes_file']
for arg,val in argvars.iteritems():
	param_content += arg+"="+val+"\n"

#Write file. This will be read in by the model program
param_path = args.params_file
f = open(param_path,'w')
f.write(param_content)
f.close()

#Run model program
base_dir = args.root_dir+'/tools/greenstein2006';
proc = subprocess.Popen(['CoupledLCC-RyR40-Galaxy',args.states_file,args.fluxes_file,param_path], cwd=base_dir,stdout=subprocess.PIPE,stderr=subprocess.PIPE)

#If an error occurred in the model, forward to stderr so that Galaxy will catch the error
e = proc.stderr.read()
if e:
  sys.stderr.write('Error occurred while running model:\n'+e)

#Send output to file
output = proc.stdout.read()
f = open(args.log_file,'w')
f.write(output)
f.close()
