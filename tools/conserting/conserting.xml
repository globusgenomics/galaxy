<tool id="conserting" name="CONSERTING" version="1.0">
 <description>Clipping reveals structural variations</description>
 <requirements>
  <requirement type="package">perlmodules</requirement>
  <requirement type="package">ucsc_tools</requirement>
  <requirement type="package">cap3</requirement>
  <requirement type="package">crest</requirement>
  <requirement type="package" version="3.2.2">R</requirement>
  <requirement type="package">java</requirement>
  <requirement type="package">gnu-parallel</requirement>
 </requirements>
 <command> mkdir $conserting_log.extra_files_path; cat $shscript > $conserting_log.extra_files_path/conserting.sh; /bin/bash $shscript > $conserting_log; cp -r Result $conserting_log.extra_files_path</command>
 <!--<stdio>
   <exit_code range="1:" level="fatal" description="Error" />
 </stdio>-->
 <inputs>
  <param name="tumor_bam" type="data" format="bam" label="Tumor Sample" 
         help="BAM files must contain soft-clipping signatures at the breakpoints.  If they do not, you will not get any results."/>
  <param name="germline_bam" type="data" format="bam" optional="true" label="Germline Sample" help=""/>
  <conditional name="refGenomeSource">
      <param name="genomeSource" type="select" label="&lt;HR&gt;Will you select a reference genome from your history or use a built-in index" help="">
        <option value="indexed">Use a built-in index</option>
        <option value="history">Use one from the history</option>
      </param>
      <when value="indexed">
        <param name="genome_fasta" type="select" label="Select a Reference Dataset" help="if your genome of interest is not listed - contact Galaxy team">
          <options from_file="crest.loc">
            <column name="dbkey" index="0"/>
            <column name="name" index="1"/>
            <column name="value" index="2"/>
          </options>
        </param>
        <param name="genome_2bit" type="select" optional="true" label="The 2bit index" help="">
          <options from_file="crest.loc">
            <column name="dbkey" index="0"/>
            <column name="name" index="1"/>
            <column name="value" index="3"/>
          </options>
        </param>
      </when>
      <when value="history">
        <param name="genome_fasta" type="data" format="fasta" label="Genome Reference Sequence" help="Should match your input Tumor Sample BAM fie database">
          <validator type="unspecified_build" message="Must assign a build"/>
        </param>
        <param name="genome_2bit" type="data" format="twobit" label="Genome Reference 2bit index (Choose same as Genome Reference Sequence)" help="">
          <validator type="unspecified_build" message="Must assign a build"/>
        </param>
      </when>  <!-- history -->
  </conditional>  <!-- refGenomeSource -->
  <!-- Input Datasets -->
  <param name="gc_prefix" type="select" optional="true" label="The GC prefix" help="">
    <options from_file="conserting.loc">
      <column name="dbkey" index="0"/>
      <column name="window" index="1"/>
      <column name="name" index="2"/>
      <column name="value" index="3"/>
    </options>
  </param>
  <param name="map_prefix" type="select" optional="true" label="Mappability Track files" help="">
    <options from_file="conserting.loc">
      <column name="dbkey" index="0"/>
      <column name="window" index="1"/>
      <column name="name" index="2"/>
      <column name="value" index="4"/>
    </options>
  </param>
  <param name="tumor_read_depth_input" type="data" format="txt,tabular" optional="false" label="Tumor sample read depth coverage" help=""/>
  <param name="germline_read_depth_input" type="data" format="txt,tabular" optional="true" label="Germline sample read depth coverage" help=""/>
  <param name="tumor_bam_cover_input" type="data" format="tabular" optional="false" label="Tumor bam cover file" help=""/>
  <param name="germline_bam_cover_input" type="data" format="tabular" optional="true" label="Germline bam cover file" help=""/>

  <param name="loh_input" type="data" format="tabular" optional="true" label="LOH input" help="Allelic imbalance file"/>
  <param name="sv_input" type="data" format="tabular" optional="true" label="SV input" help="Crest generated SV file"/>
  <param name="target_chr" value="None" type="text" label="Target chromosomes" help="Comma separated list of chromosomes to include in analysis"/>

 </inputs>
 <outputs>
  <data format="txt" name="conserting_log" label="${tool.name} on ${on_string}: conserting.log" />
  <data format="tabular" name="rlog" label="${tool.name} on ${on_string}: Rlog" from_work_dir="sample_name.log"/>
  <data format="tabular" name="mapability" label="${tool.name} on ${on_string}: Mapability" from_work_dir="Result/sample_name_CONSERTING_Mapability_100.txt"/>
  <data format="tabular" name="mapability_conflicts" label="${tool.name} on ${on_string}: Mapability potential conflicts" from_work_dir="Result/sample_name_CONSERTING_Mapability_100_potential_conflict_segment.txt"/>
  <data format="png" name="mapability_image" label="${tool.name} on ${on_string}: Mapability image" from_work_dir="Result/sample_name_CONSERTING_Mapability_100.png"/>
  <data format="tabular" name="mapability_qualitymerge" label="${tool.name} on ${on_string}: Mapability QualityMerge" from_work_dir="Result/sample_name_CONSERTING_Mapability_100.txt.QualityMerge"/>
  <data format="tabular" name="mapability_CNAcalls" label="${tool.name} on ${on_string}: Mapability CNAcalls" from_work_dir="Result/sample_name_CONSERTING_Mapability_100.txt.CNAcalls"/>
  <data format="tabular" name="crest_final" label="${tool.name} on ${on_string}: Crest Map final report" from_work_dir="Result/sample_name_CREST-map_final_report.txt"/>
  <data format="tabular" name="crest_qualitymerge" label="${tool.name} on ${on_string}: Crest QualityMerge" from_work_dir="Result/sample_name_CREST-map_final_report.txt.QualityMerge"/>
  <data format="tabular" name="loh_regtree" label="${tool.name} on ${on_string}: LOH RegTree" from_work_dir="Result/sample_name_LOH_RegTree.txt"/>
 </outputs>
 <configfiles>
  <configfile name="shscript"> #slurp
#!/bin/bash
## define some things for cheetah proccessing and to avoid problems with xml parsing of this tool_config
#set $amp = chr(38)
#set $ds = chr(36)
#set $gt = chr(62)
#set $lt = chr(60)
#set $echo_cmd = 'echo'
## Find the CREST.pl in the galaxy tool path
#import Cheetah.FileUtils
#set $toolpath = '/'.join(['/mnt','galaxyTools','tools','crest','default'])
#set $conserting_toolpath = '/'.join(['/mnt','galaxyTools','tools','conserting','default','code'])
#set $crest = $Cheetah.FileUtils.findFiles($toolpath,['CREST.pl'],[],['example','Tree'])[0]
#set $conserting_r = $Cheetah.FileUtils.findFiles($conserting_toolpath,['CONSERTING.R'])[0]
## 
## Need ptrfinder on path
export PATH=${ds}PATH:$toolpath
echo ${ds}PATH
#raw
## Set temp directory
export TMPDIR=`pwd`/tmp
mkdir -p $TMPDIR
#end raw
## check for the genome reference 2bit 
if  [ ! -f $refGenomeSource.genome_2bit ]; then exit 1; fi
## get the dbkey and use that in link name
#set $dbkey = $tumor_bam.metadata.dbkey
#set $ref_fa = '.'.join([$dbkey,'fa'])
#set $ref_2bit = '.'.join([$dbkey,'2bit'])
ref_fa=$ref_fa
ref_2bit=$ref_2bit
ln -s $refGenomeSource.genome_fasta $ref_fa
ln -s $refGenomeSource.genome_2bit $ref_2bit
#set $target_genome = str($refGenomeSource.genome_2bit)
target_genome=`pwd`/$ref_2bit
ln -s $tumor_read_depth_input.extra_files_path/* ./
#if $germline_read_depth_input.__str__ != "None":
ln -s $germline_read_depth_input.extra_files_path/* ./
#end if
ln -s $tumor_bam_cover_input tumor.bam.cover
#if $germline_bam_cover_input.__str__ != "None":
ln -s $germline_bam_cover_input germline.bam.cover
#end if
#if $loh_input.__str__ != "None":
ln -s $loh_input ./sample_name.ai
#end if
#if $sv_input.__str__ != "None":
ln -s $sv_input ./sample_name.SV.lst
#end if
## symbolic link the tumor input bam annd bai files in our working directory
ln -s $tumor_bam tumor.bam
ln -s $tumor_bam.metadata.bam_index tumor.bam.bai
## String value of an Optional DataToolParameter input is 'None' when not set
#if $germline_bam.__str__ != 'None':
ln -s $germline_bam germline.bam
ln -s $germline_bam.metadata.bam_index germline.bam.bai
#end if
##set $blatport = 56005
blatport=56005
## Problem - gfServer doesn't reserve the port until it's done reading genome, so another might try to open the same port
#raw
## start a local gfServer with the selected genome reference
## find an open port on which to start a blat server via gfServer
##for (( bp = 50000 + $$ % 1000; bp &lt; 60000; bp += 7 ))
##do
##   if ! netstat -an | grep $bp > /dev/null; then blatport=$bp; break; fi
##done
## exit if can't open a port
echo "Starting gfServer on port " $blatport
#end raw
( gfServer -canStop -log=gfServer.log start localhost 56005 ${ds}target_genome 2${gt} /dev/null ) ${amp}
## Running the SV detection script.
## Determine the CREST options
#set $crest_args = ["-f tumor.bam.cover -d tumor.bam"]
#set $optional_chrs = ""
#if $target_chr.__str__ != "None" and $target_chr.__str__ != "":
  #set $optional_chrs = ["target.chr=", "\"", $target_chr.__str__, "\""]
#end if
#if $loh_input.__str__ != "None":
  #set $ai_option = ["ai.file=", "\"", $loh_input.__str__, "\""]
#end if
##
#if $germline_bam.__str__ != 'None':
#set $crest_args = $crest_args + ["-g germline.bam"]
#end if
#set $crest_args = $crest_args + ["--ref_genome",$ref_fa]
#set $crest_args = $crest_args + ["--target_genome",$target_genome]
##
#raw
## check if gfServer is ready
echo "Waiting for gfServer"
for (( tries = 0; tries &lt; 30; tries += 1 ))
do
  if ! netstat -an | grep $blatport > /dev/null &#38;&#38; ps -f | grep gfServer | grep $blatport > /dev/null; then sleep 60; else break; fi
done
#end raw
#raw
## Run CONSERTING 
#end raw
(
 #echo ''.join('R CMD BATCH --no-save --no-restore')# '--args wd="`PWD`/inputs/" sample="sample_name" gc.prefix="$gc_prefix/" map.prefix="$map_prefix/" crest.cmd="$crest #echo ' '.join($crest_args)#  --blatserver localhost --blatport 56005" #echo ''.join($optional_chrs)# #echo ''.join($ai_option)# CREST.parallel=TRUE code.dir="$conserting_toolpath"' $conserting_r sample_name.log 
)
#raw
## shut down the blat server
echo "shutting down gfServer on port " $blatport
gfServer stop localhost $blatport
#end raw
  </configfile>
 </configfiles>
 <tests>
 </tests>
 <help>
**CREST**

CREST_ is an algorithm for detecting genomic structural variations at base-pair resolution using next-generation sequencing data.  '

CREST uses pieces of DNA called soft clips to find structural variations.  Soft clips are the DNA segments produced during sequencing that fail to properly align to the reference genome as the sample genome is reassembled.  CREST uses the soft clips to precisely identify sites of chromosomal rearrangement or where pieces of DNA are inserted or deleted.

Please cite the following article:

Wang J, Mullighan CG, Easton J, Roberts S, Heatley SL, Ma J, Rusch MC, Chen K, Harris CC, Ding L, Holmfeldt L, Payne-Turner D, Fan X, Wei L, Zhao D, Obenauer JC, Naeve C, Mardis ER, Wilson RK, Downing JR and Zhang J. CREST maps somatic structural variation in cancer genomes with base-pair resolution (2011). Nature_Methods_.

.. _Nature_Methods: http://www.nature.com/nmeth/journal/v8/n8/pdf/nmeth.1628.pdf
.. _CREST: http://www.stjuderesearch.org/site/lab/zhang


----

**Input formats**

BAM files that must contain soft-clipping signatures at the breakpoints.  If
they do not, you will not get any results.  

CREST uses soft-clipping signatures to identify breakpoints.  Soft-clipping is
indicated by "S" elements in the CIGAR for SAM/BAM records.  Soft-clipping may
not occur, depending on the mapping algorithm and parameters and sometimes even
the library preparation.

With bwa sampe:

One mapping method that will soft-clip reads is bwa sampe (BWA for paired-end
reads).  When BWA successfully maps one read in a pair but is not able to map
the other, it will attempt a more permissive Smith-Waterman alignment of the
unmapped read in the neighborhood of the mapped mate.  If it is only able to
align part of the read, then it will soft-clip the portion on the end that it
could not align.  Often this occurs at the breakpoints of structural
variations.

In some cases when the insert sizes approach the read length, BWA will not
perform Smith-Waterman alignment.  Reads from inserts smaller than the read
length will contain primer and/or adapter and will often not map.  When the
insert size is close to the read length, this creates a skewed distribution
of inferred insert sizes which may cause BWA to not attempt Smith-Waterman
realignment.  This is indicated by the error message "weird pairing".  Often
in these cases there are also unusually low mapping rates.

One way to fix this problem is to remap unmapped reads bwasw.  To do this,
extract the unmapped reads as FASTQ files (this may be done with a combination
of samtools view -f 4 and Picard's SamToFastq).  Realign using bwa bwasw and
build a BAM file.  Then, re-run CREST on this new BAM file, and you may pick
up events that would have been missed otherwise.




------

**Outputs**

The outputfile \*.predSV.txt has the following tab-delimited columns: left_chr, left_pos,
left_strand, # of left soft-clipped reads, right_chr, right_pos, right_strand,
# right soft-clipped reads, SV type, coverage at left_pos, coverage at
right_pos, assembled length at left_pos, assembled length at right_pos,
average percent identity at left_pos, percent of non-unique mapping reads at
left_pos, average percent identity at right_pos, percent of non-unique mapping
reads at right_pos, start position of consensus mapping to genome,
starting chromosome of consensus mapping, position of the genomic mapping of
consensus starting position, end position of consensus mapping to genome,
ending chromsome of consnesus mapping, position of genomic mapping of
consensus ending posiiton, and consensus sequences.  For inversion(INV), the
last 7 fields will be repeated to reflect the fact two different breakpoints
are needed to identify an INV event.

Example of the tumor.predSV.txt file

4       125893227       +       5       10      66301858        -       4       CTX     29      14      83      71      0.895173453996983       0.230769230769231       0.735384615384615       0.5     1       4       125893135       176     10      66301773        TTATGAATTTTGAAATATATATCATATTTTGAAATATATATCATATTCTAAATTATGAAAAGAGAATATGATTCTCTTTTCAGTAGCTGTCACCTCCTGGGTTCAAGTGATTCTCCTGCCTCTACCTCCCGAGTAGCTGGGATTACAGGTGCCCACCACCATGCCTGGCTAATTTT
5       7052198 -       0       10      66301865        +       8       CTX     0       22      0       81      0.761379310344828       0.482758620689655       0       0       1       5       7052278 164     10      66301947        AGCCATGGACCTTGTGGTGGGTTCTTAACAATGGTGAGTCCGGAGTTCTTAACGATGGTGAGTCCGTAGTTTGTTCCTTCAGGAGTGAGCCAAGATCATGCCACTGCACTCTAGCCTGGGCAACAGAGGAAGACTCCACCTCAAAAAAAAAAAGTGGGAAGAGG
10      66301858        +       4       4       125893225       -       1       CTX     15      28      71      81      0.735384615384615       0.5     0.889507154213037       0.243243243243243       1       10      66301777        153     4       125893154       TTAGCCAGGCATGGTGGTGGGCACCTGTAATCCCAGCTACTCGGGAGGTAGAGGCAGGAGAATCACTTGAACCCAGGAGGTGACAGCTACTGAAAAGAGAATCATATTCTCTTTTCATAATTTAGAATATGATATATATTTCAAAATATGATA

If there are no or very few results, there may be a lack of soft-clipping. 



 </help>
</tool>
