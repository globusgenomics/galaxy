<tool id="htseq_count" name="htseq-count" version="HTSEQ: default; SAMTOOLS: 1.2; PICARD: 1.134">
    <description> - Count aligned reads in a BAM file that overlap features in a GFF file</description>
    <version_command>htseq-count -h | grep version | sed 's/^\(.*\)*\(version .*\)\./\2/'</version_command>
    <requirements>
        <requirement type="package">pymodules</requirement>
        <requirement type="package">htseq</requirement>
        <requirement type="package">samtools</requirement>
        <requirement type="package">picard</requirement> 
    </requirements>
    <command>
    ##set up input files
    #set $reference_fasta_filename = &quot;localref.fa&quot;
    #if $samout_conditional.samout:
        #if str( $samout_conditional.reference_source.reference_source_selector ) == &quot;history&quot;:
            ln -s &quot;${samout_conditional.reference_source.ref_file}&quot; &quot;${reference_fasta_filename}&quot; &amp;&amp;
            samtools faidx &quot;${reference_fasta_filename}&quot; 2&gt;&amp;1 || echo &quot;Error running samtools faidx for htseq-count&quot; &gt;&amp;2 &amp;&amp;
        #else:
            #set $reference_fasta_filename = str( $samout_conditional.reference_source.ref_file.fields.path )
        #end if
    #end if
    #if str($singlepaired) == &quot;paired&quot;:
        ln -s $samfile local_input.sam &amp;&amp;
        java -Xmx2G -jar \$JAVA_JAR_PATH/picard.jar SortSam VALIDATION_STRINGENCY=LENIENT SORT_ORDER=queryname O=prepared_input.sam I=local_input.sam TMP_DIR=&quot;${__new_file_path__}&quot; 
        || echo &quot;Error running Picard MergeSamFiles&quot; &gt;&amp;2 &amp;&amp;
    #else:
        #if $samfile.extension == &quot;bam&quot;:
            samtools view $samfile | 
        #else
            ln -s $samfile prepared_input.sam &amp;&amp;
        #end if
    #end if
    htseq-count 
    -q
    --mode=$mode 
    --stranded=$stranded 
    --minaqual=$minaqual 
    --type=$featuretype 
    --idattr=$idattr 
    #if $samout_conditional.samout:
        --samout=$__new_file_path__/${samoutfile.id}_tmp
    #end if
    #if str($singlepaired) == &quot;paired&quot;:
        prepared_input.sam
    #else:
        #if $samfile.extension == &quot;bam&quot;:
            - 
        #else:
            prepared_input.sam
        #end if
    #end if
   #if $genomeSource.refGenomeSource == "history":
       ${genomeSource.ownFile}
   #else:
       ${genomeSource.annotation.fields.path}
   #end if        
    | awk '{if ($1 ~ &quot;no_feature|ambiguous|too_low_aQual|not_aligned|alignment_not_unique&quot;) print $0 | &quot;cat 1&gt;&amp;2&quot;; else print $0}' &gt; temp.out.txt 2&gt;$othercounts
    #if str($header_cond.header) == &quot;no_header&quot;:
        &amp;&amp; mv temp.out.txt $counts
    #else:
        &amp;&amp; echo &quot;#ID	$header_cond.column_name&quot; &gt; $counts &amp;&amp; cat temp.out.txt &gt;&gt; $counts
    #end if
    #if $samout_conditional.samout:
        &amp;&amp; samtools view -Su -t ${reference_fasta_filename}.fai $__new_file_path__/${samoutfile.id}_tmp | samtools sort -o - sorted &gt; $samoutfile
    #end if</command>
    <inputs>
        <param format="sam,bam" label="Aligned SAM/BAM File" name="samfile" type="data"/>
        <param label="Is this library mate-paired?" name="singlepaired" type="select">
            <help>Paired libraries will be sorted by read name prior to counting.</help>
            <option selected="true" value="single">single-end</option>
            <option value="paired">paired-end</option>
        </param>
      <conditional name="genomeSource">
        <param label="Will you select an annotation file from your history or use a built-in gff3 file?" name="refGenomeSource" type="select">
          <option value="indexed">Use a built-in annotation</option>
          <option value="history">Use one from the history</option>
        </param>
        <when value="indexed">
          <param label="Select a genome annotation" name="annotation" type="select">
            <options from_data_table="all_gff"></options>
            <filter type="sort_by" column="3" />
          </param>
        </when>
        <when value="history">
          <param format="gff" label="Select a annotation file from history" name="ownFile" type="data"/>
        </when>
      </conditional>
        <!--param format="gff" label="GFF File" name="gfffile" type="data"/-->
        <param label="Mode" name="mode" type="select">
            <help>Mode to handle reads overlapping more than one feature.</help>
            <option selected="true" value="union">Union</option>
            <option value="intersection-strict">Intersection (strict)</option>
            <option value="intersection-nonempty">Intersection (nonempty)</option>
        </param>
        <param label="Stranded" name="stranded" type="select">
            <help>Specify whether the data is from a strand-specific assay. 'Reverse' means yes with reversed strand interpretation.</help>
            <option selected="true" value="yes">Yes</option>
            <option value="no">No</option>
            <option value="reverse">Reverse</option>
        </param>
        <param label="Minimum alignment quality" name="minaqual" type="integer" value="10">
            <help>Skip all reads with alignment quality lower than the given minimum value</help>
        </param>
        <param label="Feature type" name="featuretype" type="text" value="exon">
            <help>Feature type (3rd column in GFF file) to be used. All features of other types are ignored. The default, suitable for RNA-Seq and Ensembl GTF files, is exon.</help>
        </param>
        <param label="ID Attribute" name="idattr" type="text" value="gene_id">
            <help>GFF attribute to be used as feature ID. Several GFF lines with the same feature ID will be considered as parts of the same feature. The feature ID is used to identity the counts in the output table. All features of the specified type MUST have a value for this attribute. The default, suitable for RNA-SEq and Ensembl GTF files, is gene_id.</help>
        </param>
        <conditional name="samout_conditional">
            <param falsevalue="False" label="Additional BAM Output" name="samout" truevalue="True" type="boolean" value="False">
                <help>Write out all SAM alignment records into an output BAM file, annotating each line with its assignment to a feature or a special counter (as an optional field with tag ‘XF’).</help>
            </param>
            <when value="True">       
                <conditional name="reference_source">
                    <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
                        <option value="cached">Locally cached</option>
                        <option value="history">History</option>
                    </param>
                    <when value="cached">
                        <param label="Using reference genome" name="ref_file" type="select">
                            <options from_data_table="sam_fa_indexes">
                                <filter column="1" key="dbkey" ref="samfile" type="data_meta"/>
                            </options>
                            <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
                        </param>
                    </when>
                    <when value="history"> <!-- FIX ME!!!! -->
                        <param format="fasta" label="Using reference file" name="ref_file" type="data"/>
                    </when>
                </conditional>
            </when>
        </conditional>
        <conditional name="header_cond">
            <param label="Add header to output" name="header" type="select">
                <option selected="True" value="no_header">No header</option>
                <option value="header">Add header</option>
            </param>
            <when value="no_header"/>
            <when value="header">
                <param help="Label for column" label="Column Header" name="column_name" type="text" value="ColumnName"/>
            </when>
        </conditional>
    </inputs>

    <outputs>
        <data format="tabular" label="${tool.name} on ${on_string}" metadata_source="samfile" name="counts"/>
        <data format="tabular" label="${tool.name} on ${on_string} (no feature)" metadata_source="samfile" name="othercounts"/>
        <data format="bam" label="${tool.name} on ${on_string} (BAM)" metadata_source="samfile" name="samoutfile">
            <filter>samout_conditional['samout']</filter>
        </data>
    </outputs>

    <stdio>
        <exit_code description="Unknown error occurred" level="fatal" range="1:"/>
        <regex description="The HTSeq python package is not properly installed, contact Galaxy administrators" level="fatal" match="htseq-count: command not found" source="stderr"/>
        <regex description="The samtools package is not properly installed, contact Galaxy administrators" level="fatal" match="samtools: command not found" source="stderr"/>
        <regex description="Error parsing the GFF file, at least one feature of the specified 'Feature type' does not have a value for the specified 'ID Attribute'" level="fatal" match="Error: Feature (.+) does not contain a '(.+)' attribute" source="both"/>
        <regex description="Unknown error parsing the GFF file" level="fatal" match="Error occured in line (\d+) of file" source="stderr"/>
        <regex description="Unknown error occured" level="fatal" match="Error" source="stderr"/>
        <regex description="PAIRED DATA MISSING OR NOT PROPERLY SORTED. Try reruning and selecting the paired-end option. See stderr output of this dataset for more information." level="warning" match="Warning: Read (.+) claims to have an aligned mate which could not be found. \(Is the SAM file properly sorted\?\)" source="stderr"/>
    </stdio>

    <tests>
        <test>
            <param name="samfile" value="htseq-test.sam"/>
            <param name="gfffile" value="htseq-test.gff"/>
            <param name="samout" value="False"/>
            <output file="htseq-test_counts.tsv" name="counts"/>
            <output file="htseq-test_othercounts.tsv" name="othercounts"/>
        </test>
        <test>
            <param name="samfile" value="htseq-test.bam"/>
            <param name="gfffile" value="htseq-test.gff"/>
            <param name="samout" value="False"/>
            <output file="htseq-test_counts.tsv" name="counts"/>
            <output file="htseq-test_othercounts.tsv" name="othercounts"/>
        </test>
        <test>
            <param name="samfile" value="htseq-test-paired.bam"/>
            <param name="singlepaired" value="paired"/>
            <param name="gfffile" value="htseq-test.gff"/>
            <param name="samout" value="False"/>
            <output file="htseq-test-paired_counts.tsv" name="counts"/>
            <output file="htseq-test-paired_othercounts.tsv" name="othercounts"/>
        </test>
        <!-- Seems to be an issue setting the $reference_fasta_filename variable during test
        <test>
            <param name="samfile" value="htseq-test.sam" />
            <param name="gfffile" value="htseq-test.gff" />
            <param name="samout" value="True" />
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" value="htseq-test_reference.fasta" />
            <output name="counts" file="htseq-test_counts.tsv" />
            <output name="othercounts" file="htseq-test_othercounts.tsv" />
            <output name="samoutfile" file="htseq-test_samout.bam" />
        </test>
        -->
    </tests>

    <help>
Overview
--------

This tool takes an alignment file in SAM or BAM format and feature file in GFF format
and calculates the number of reads mapping to each feature. It uses the *htseq-count* 
script that is part of the HTSeq python module. See
http://www-huber.embl.de/users/anders/HTSeq/doc/count.html for details.

A feature is an interval (i.e., a range of positions) on a chromosome or a union of
such intervals.  In the case of RNA-Seq, the features are typically genes, where 
each gene is considered here as the union of all its exons. One may also consider 
each exon as a feature, e.g., in order to check for alternative splicing. For 
comparative ChIP-Seq, the features might be binding regions from a pre-determined 
list.


Overlap Modes
-------------

Special care must be taken to decide how to deal with reads that overlap more than one feature. 

The htseq-count script allows to choose between three modes: *union*, *intersection-strict*, and *intersection-nonempty*.

The following figure illustrates the effect of these three modes:

.. image:: /static/images/count_modes.png
    :width: 500


Strandedness
------------

**Important**: The default for strandedness is yes. If your RNA-Seq data has not been made with a strand-specific protocol, this causes half of the reads to be lost. Hence, make sure to set the option Stranded to 'No' unless you have strand-specific data!


Output
------

The script outputs a table with counts for each feature, followed by the special counters, which count reads that were not counted for any feature for various reasons, namely

- *no_feature*: reads which could not be assigned to any feature (set S as described above was empty).

- *ambiguous*: reads which could have been assigned to more than one feature and hence were not counted for any of these (set S had mroe than one element).

- *too_low_aQual*: reads which were not counted due to the -a option, see below

- *not_aligned*: reads in the SAM file without alignment

- *alignment_not_unique*: reads with more than one reported alignment. These reads are recognized from the NH optional SAM field tag. (If the aligner does not set this field, multiply aligned reads will be counted multiple times.)


Options Summary
---------------

Usage: htseq-count [options] sam_file gff_file

This script takes an alignment file in SAM format and a feature file in GFF
format and calculates for each feature the number of reads mapping to it. See
http://www-huber.embl.de/users/anders/HTSeq/doc/count.html for details.

Options:
  -h, --help            show this help message and exit
  -m MODE, --mode=MODE  mode to handle reads overlapping more than one
                        feature(choices: union, intersection-strict,
                        intersection-nonempty; default: union)
  -s STRANDED, --stranded=STRANDED
                        whether the data is from a strand-specific assay.
                        Specify 'yes', 'no', or 'reverse' (default: yes).
                        'reverse' means 'yes' with reversed strand
                        interpretation
  -a MINAQUAL, --minaqual=MINAQUAL
                        skip all reads with alignment quality lower than the
                        given minimum value (default: 0)
  -t FEATURETYPE, --type=FEATURETYPE
                        feature type (3rd column in GFF file) to be used, all
                        features of other type are ignored (default, suitable
                        for Ensembl GTF files: exon)
  -i IDATTR, --idattr=IDATTR
                        GFF attribute to be used as feature ID (default,
                        suitable for Ensembl GTF files: gene_id)
  -o SAMOUT, --samout=SAMOUT
                        write out all SAM alignment records into an output SAM
                        file called SAMOUT, annotating each line with its
                        feature assignment (as an optional field with tag
                        'XF')
  -q, --quiet           suppress progress report and warnings

Written by Simon Anders (sanders@fs.tum.de), European Molecular Biology
Laboratory (EMBL). (c) 2010. Released under the terms of the GNU General
Public License v3. Part of the 'HTSeq' framework.
    </help>
</tool>
