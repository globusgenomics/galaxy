<tool id="peakcalling_sicer" name="SICER" version="SICER: 1.1">
  <description>Statistical approach for the Identification of ChIP-Enriched Regions</description>
  <requirements>
    <requirement type="package">pymodules</requirement>
  </requirements>
  <command interpreter="python">sicer_wrapper.py 
  --bed_file '${input_bed_file}' 
  #if str( $input_control_file ) != 'None':
      --control_file '${input_control_file}'
      --significant_islands_output_file &quot;${significant_islands_output_file}&quot;
      --islands_summary_output_file &quot;${islands_summary_output_file}&quot;
      --significant_islands_summary_output_file &quot;${significant_islands_summary_output_file}&quot;
  #end if
  ${fix_off_by_one_errors}
  --dbkey '${input_bed_file.dbkey}'
  --redundancy_threshold '${redundancy_threshold}'
  --window_size '${window_size}'
  --fragment_size '${fragment_size}'
  --effective_genome_fraction '${effective_genome_fraction}'
  --gap_size '${gap_size}'
  --error_cut_off '${error_cut_off}'
  ##output files
  --stdout &quot;${output_log_file}&quot;
  --redundancy_removed_test_bed_output_file &quot;${redundancy_removed_test_bed_output_file}&quot;
  --redundancy_removed_control_bed_output_file &quot;${redundancy_removed_control_bed_output_file}&quot;
  --score_island_output_file &quot;${score_island_output_file}&quot;
  --summary_graph_output_file &quot;${summary_graph_output_file}&quot;
  --test_normalized_wig_output_file &quot;${test_normalized_wig_output_file}&quot;
  --island_filtered_output_file &quot;${island_filtered_output_file}&quot;
  --island_filtered_normalized_wig_output_file &quot;${island_filtered_normalized_wig_output_file}&quot;
  </command>
  <inputs>
    <param format="bed" label="ChIP-Seq Tag File" name="input_bed_file" type="data">
      <validator message="SICER is not available for the genome." type="expression">value is not None and value.dbkey in [ 'mm8', 'mm9', 'hg18', 'hg19', 'dm2', 'dm3', 'sacCer1', 'pombe', 'rn4', 'tair8' ]</validator>
    </param>
    <param format="bed" label="ChIP-Seq Control File" name="input_control_file" optional="True" type="data"> <!-- fix me, add filter to match dbkeys -->
      <options>
        <filter key="dbkey" ref="input_bed_file" type="data_meta"/>
      </options>
    </param>
    <param checked="True" falsevalue="" help="SICER creates non-standard output files, this option will fix these coordinates" label="Fix off-by-one errors in output files" name="fix_off_by_one_errors" truevalue="--fix_off_by_one_errors" type="boolean"/> 
    <param help="The number of copies of identical reads allowed in a library" label="Redundancy Threshold" name="redundancy_threshold" type="integer" value="1"/>
    <param help="Resolution of SICER algorithm. For histone modifications, one can use 200 bp" label="Window size" name="window_size" type="integer" value="200"/>
    <param help="for determination of the amount of shift from the beginning of a read to the center of the DNA fragment represented by the read. FRAGMENT_SIZE=150 means the shift is 75." label="Fragment size" name="fragment_size" type="integer" value="150"/>
    <param help="Effective Genome as fraction of the genome size. It depends on read length." label="Effective genome fraction" name="effective_genome_fraction" type="float" value="0.74"/>
    <param help="Needs to be multiples of window size. Namely if the window size is 200, the gap size should be 0, 200, 400, 600, ..." label="Gap size" name="gap_size" type="integer" value="600"/>
    <param help="FDR (with control) or E-value (without control)" label="Statistic threshold value" name="error_cut_off" type="float" value="0.01"/>
  </inputs>
  <outputs>
    <data format="bed" label="${tool.name} on ${on_string} (test-${redundancy_threshold}-removed.bed)" name="redundancy_removed_test_bed_output_file"/>
    <data format="bed" label="${tool.name} on ${on_string} (control-${redundancy_threshold}-removed.bed)" name="redundancy_removed_control_bed_output_file">
      <filter>input_control_file is not None</filter>
    </data>
    <data format="bedgraph" label="${tool.name} on ${on_string} (test-W${window_size}.graph)" name="summary_graph_output_file"/>
    <data format="wig" label="${tool.name} on ${on_string} (test-W${window_size}-normalized.wig)" name="test_normalized_wig_output_file"/>
    <data format="interval" label="${tool.name} on ${on_string} (test-W${window_size}-G${gap_size}-FDR${error_cut_off}-island.bed)" name="significant_islands_output_file">
      <filter>input_control_file is not None</filter>
    </data>
    <data format="bed" label="${tool.name} on ${on_string} (#if str( $input_control_file ) != 'None' then ''.join( map( str, [ 'test-W', $window_size, '-G',$gap_size, '-FDR', $error_cut_off, '-islandfiltered.bed' ] ) ) else ''.join( map( str, [ 'test-W', $window_size, '-G', $gap_size, '-E', $error_cut_off, '-islandfiltered.bed' ] ) ) #)" name="island_filtered_output_file"/>
    <data format="wig" label="${tool.name} on ${on_string} (#if str( $input_control_file ) != 'None' then ''.join( map( str, [ 'test-W', $window_size, '-G',$gap_size, '-FDR', $error_cut_off, '-islandfiltered-normalized.wig' ] ) ) else ''.join( map( str, [ 'test-W', $window_size, '-G', $gap_size, '-E', $error_cut_off, '-islandfiltered-normalized.wig' ] ) ) #)" name="island_filtered_normalized_wig_output_file"/>
    <data format="interval" label="${tool.name} on ${on_string} (#if str( $input_control_file ) != 'None' then ''.join( map( str, [ 'test-W', $window_size, '-G',$gap_size, '.scoreisland' ] ) ) else ''.join( map( str, [ 'test-W', $window_size, '-G', $gap_size, '-E', $error_cut_off, '.scoreisland' ] ) ) #)" name="score_island_output_file"/>
    <data format="interval" label="${tool.name} on ${on_string} (test-W${window_size}-G${gap_size}-islands-summary)" name="islands_summary_output_file">
      <filter>input_control_file is not None</filter>
    </data>
    <data format="interval" label="${tool.name} on ${on_string} (test-W${window_size}-G${gap_size}-islands-summary-FDR${error_cut_off})" name="significant_islands_summary_output_file">
      <filter>input_control_file is not None</filter>
    </data>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log_file"/>
  </outputs>
  <tests>
    <test>
      <param dbkey="mm8" ftype="bed" name="input_bed_file" value="chipseq_enriched.bed.gz"/>
      <param name="input_control_file"/>
      <param name="fix_off_by_one_errors"/>
      <param name="redundancy_threshold" value="1"/>
      <param name="window_size" value="200"/>
      <param name="fragment_size" value="150"/>
      <param name="effective_genome_fraction" value="0.74"/>
      <param name="gap_size" value="600"/>
      <param name="error_cut_off" value="0.01"/>
      <output file="peakcalling_sicer/test_1/test-1-removed.bed" name="redundancy_removed_test_bed_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200.graph" name="summary_graph_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200-normalized.wig" name="test_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200-G600-E0.01-islandfiltered.bed" name="island_filtered_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200-G600-E0.01-islandfiltered-normalized.wig" name="island_filtered_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200-G600-E0.01.scoreisland" name="score_island_output_file"/>
      <output compare="contains" file="peakcalling_sicer/test_1/output_log_file.contains" name="output_log_file"/>
    </test>
    <test>
      <param dbkey="mm8" ftype="bed" name="input_bed_file" value="chipseq_enriched.bed.gz"/>
      <param dbkey="mm8" ftype="bed" name="input_control_file" value="chipseq_input.bed.gz"/>
      <param name="fix_off_by_one_errors"/>
      <param name="redundancy_threshold" value="1"/>
      <param name="window_size" value="200"/>
      <param name="fragment_size" value="150"/>
      <param name="effective_genome_fraction" value="0.74"/>
      <param name="gap_size" value="600"/>
      <param name="error_cut_off" value="0.01"/>
      <output file="peakcalling_sicer/test_2/test-1-removed.bed" name="redundancy_removed_test_bed_output_file"/>
      <output file="peakcalling_sicer/test_2/control-1-removed.bed" name="redundancy_removed_control_bed_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200.graph" name="summary_graph_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-normalized.wig" name="test_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600-FDR0.01-island.bed" name="significant_islands_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600-FDR0.01-islandfiltered.bed" name="island_filtered_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600-FDR0.01-islandfiltered-normalized.wig" name="island_filtered_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600.scoreisland" name="score_island_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600-islands-summary" name="islands_summary_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600-islands-summary-FDR0.01" name="significant_islands_summary_output_file"/>
      <output compare="contains" file="peakcalling_sicer/test_2/output_log_file.contains" name="output_log_file"/>
    </test>
    <test>
      <param dbkey="mm8" ftype="bed" name="input_bed_file" value="chipseq_enriched.bed.gz"/>
      <param dbkey="mm8" ftype="bed" name="input_control_file" value="chipseq_input.bed.gz"/>
      <param name="fix_off_by_one_errors" value="True"/>
      <param name="redundancy_threshold" value="1"/>
      <param name="window_size" value="200"/>
      <param name="fragment_size" value="150"/>
      <param name="effective_genome_fraction" value="0.74"/>
      <param name="gap_size" value="600"/>
      <param name="error_cut_off" value="0.01"/>
      <output file="peakcalling_sicer/test_2/test-1-removed.bed" name="redundancy_removed_test_bed_output_file"/>
      <output file="peakcalling_sicer/test_2/control-1-removed.bed" name="redundancy_removed_control_bed_output_file"/>
      <output file="peakcalling_sicer/test_3/test-W200.graph" name="summary_graph_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-normalized.wig" name="test_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_3/test-W200-G600-FDR0.01-island.bed" name="significant_islands_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600-FDR0.01-islandfiltered.bed" name="island_filtered_output_file"/>
      <output file="peakcalling_sicer/test_2/test-W200-G600-FDR0.01-islandfiltered-normalized.wig" name="island_filtered_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_3/test-W200-G600.scoreisland" name="score_island_output_file"/>
      <output file="peakcalling_sicer/test_3/test-W200-G600-islands-summary" name="islands_summary_output_file"/>
      <output file="peakcalling_sicer/test_3/test-W200-G600-islands-summary-FDR0.01" name="significant_islands_summary_output_file"/>
      <output compare="contains" file="peakcalling_sicer/test_2/output_log_file.contains" name="output_log_file"/>
    </test>
    <test>
      <param dbkey="mm8" ftype="bed" name="input_bed_file" value="chipseq_enriched.bed.gz"/>
      <param name="input_control_file"/>
      <param name="fix_off_by_one_errors" value="True"/>
      <param name="redundancy_threshold" value="1"/>
      <param name="window_size" value="200"/>
      <param name="fragment_size" value="150"/>
      <param name="effective_genome_fraction" value="0.74"/>
      <param name="gap_size" value="600"/>
      <param name="error_cut_off" value="0.01"/>
      <output file="peakcalling_sicer/test_1/test-1-removed.bed" name="redundancy_removed_test_bed_output_file"/>
      <output file="peakcalling_sicer/test_4/test-W200.graph" name="summary_graph_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200-normalized.wig" name="test_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200-G600-E0.01-islandfiltered.bed" name="island_filtered_output_file"/>
      <output file="peakcalling_sicer/test_1/test-W200-G600-E0.01-islandfiltered-normalized.wig" name="island_filtered_normalized_wig_output_file"/>
      <output file="peakcalling_sicer/test_4/test-W200-G600-E0.01.scoreisland" name="score_island_output_file"/>
      <output compare="contains" file="peakcalling_sicer/test_1/output_log_file.contains" name="output_log_file"/>
    </test>
  </tests>
  <help>
**What it does**

SICER first and foremost is a filtering tool. Its main functions are::
  
  1. Delineation of the significantly ChIP-enriched regions, which can be used to associate with other genomic landmarks. 
  2. Identification of reads on the ChIP-enriched regions, which can be used for profiling and other quantitative analysis.

View the original SICER documentation: http://home.gwu.edu/~wpeng/Software.htm.

------

.. class:: warningmark

  By default, SICER creates files that do not conform to standards (e.g. BED files are closed, not half-open). This could have implications for downstream analysis.
  To force the output of SICER to be formatted properly to standard file formats, check the **&quot;Fix off-by-one errors in output files&quot;** option.

------

**Citation**

For the underlying tool, please cite `Zang C, Schones DE, Zeng C, Cui K, Zhao K, Peng W. A clustering approach for identification of enriched domains from histone modification ChIP-Seq data. Bioinformatics. 2009 Aug 1;25(15):1952-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/19505939&gt;`_

If you use this tool in Galaxy, please cite Blankenberg D, et al. *In preparation.*

  </help>
</tool>
