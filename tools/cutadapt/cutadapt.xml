<tool id="cutadapt" name="Cutadapt" version="CUTADAPT: 1.2">
	<description>Remove adapter sequences from Fastq/Fasta</description>
	<requirements>
        <requirement type="package">cutadapt</requirement>
	</requirements>
    <version_command>cutadapt --version</version_command>

	<command>cutadapt
		#if $input.extension.startswith( &quot;fastq&quot;):
		    --format=fastq
            #if $input.extension == &quot;fastqillumina&quot;:
                --quality-base=64
            #end if	
            #if $input.extension == &quot;fastqsolexa&quot;:
                --quality-base=64
            #end if	
		#else
		--format=$input.extension
		#end if 
		#for $a in $adapters
		--adapter='${a.adapter_source.adapter}'
		#end for
		#for $aa in $anywhere_adapters
		--anywhere='${aa.anywhere_adapter_source.anywhere_adapter}'
		#end for
		#for $fa in $front_adapters
		--front='${fa.front_adapter_source.front_adapter}'
		#end for
		--error-rate=$error_rate
		--times=$count
		--overlap=$overlap
        $match_read_wildcards
        $no_match_adapters_wildcards

        #if str( $output_filtering_options.output_filtering) == &quot;filter&quot;:
		    $output_filtering_options.discard
		    #if str($output_filtering_options.min) != '0':
		        --minimum-length=$output_filtering_options.min
		    #end if
		    #if str($output_filtering_options.max) != '0':
		        --maximum-length=$output_filtering_options.max
		    #end if
        #end if

		--output='$output' 
		#if str( $output_params.output_type ) == &quot;additional&quot;:
			#if $output_params.rest_file:
			    --rest-file=$rest_output
			#end if
			#if $output_params.wildcard_file:
			    --wildcard-file=$wild_output
			#end if
			#if $output_params.too_short_file:
			    --too-short-output=$too_short_output
			#end if
			#if $output_params.untrimmed_file:
			    --untrimmed-output=$untrimmed_output
			#end if
		#end if

		#if str( $read_modification_params.read_modification) == &quot;modify&quot;:
 		    #if str($read_modification_params.quality_cutoff) != '0':
		       --quality-cutoff=$read_modification_params.quality_cutoff
		    #end if
            #if $read_modification_params.prefix != '':
                --prefix=&quot;$read_modification_params.prefix&quot;
            #end if
            #if $read_modification_params.suffix != '':
                --suffix=&quot;$read_modification_params.suffix&quot;
            #end if
            #if $read_modification_params.length_tag != '':
                --length-tag=&quot;$read_modification_params.length_tag&quot;
            #end if
            $read_modification_params.zero_cap
        #end if

		'$input'
		&gt; $report
	</command>
	<inputs>
		<param format="fastqsanger, fastqillumina, fastqsolexa, fasta" label="Fastq file to trim" length="100" name="input" optional="false" type="data"/>

		<repeat help="Sequence of an adapter that was ligated to the 3' end.  The adapter itself and anything that follows is trimmed." name="adapters" title="3' Adapters">
			<conditional name="adapter_source">
				<param label="Source" name="adapter_source_list" type="select">
					<option selected="true" value="prebuilt">Standard (select from the list below)</option>
					<option value="user">Enter custom sequence</option>
				</param>

				<when value="user">
					<param label="Enter custom 3' adapter sequence" name="adapter" size="30" type="text" value="AATTGGCC"/>
				</when>

				<when value="prebuilt">
					<param label="Choose 3' adapter" name="adapter" type="select">
						<options from_file="fastx_clipper_sequences.txt">
							<column index="1" name="name"/>
							<column index="0" name="value"/>
						</options>
					</param> 
				</when>
			</conditional>
		</repeat>

		<repeat help="Sequence of an adapter that was ligated to the 5' or 3' end.  If the adapter is found within the read or overlapping the 3' end of the read, the behavior is the same as for the -a option. If the adapter overlaps the 5' end (beginning of the read), the initial portion of the read matching the adapter is trimmed, but anything that follows is kept. If multiple -a or -b options are given, only the best matching adapter is trimmed." name="anywhere_adapters" title="5' or 3' (Anywhere) Adapters">
			<conditional name="anywhere_adapter_source">
				<param label="Source" name="anywhere_adapter_source_list" type="select">
					<option selected="true" value="prebuilt">Standard (select from the list below)</option>
					<option value="user">Enter custom sequence</option>
				</param>

				<when value="user">
					<param label="Enter custom 5' or 3' adapter sequence" name="anywhere_adapter" size="30" type="text" value="AATTGGCC"/>
				</when>
				<when value="prebuilt">
					<param label="Choose 5' or 3' adapter" name="anywhere_adapter" type="select">
						<options from_file="fastx_clipper_sequences.txt">
							<column index="1" name="name"/>
							<column index="0" name="value"/>
						</options>
					</param> 
				</when>
			</conditional>
		</repeat>

		<repeat help="Sequence of an adapter that was ligated to the 5' end.  If the adapter sequence starts with the character '^', the adapter is 'anchored'. An anchored adapter must appear in its entirety at the 5' end of the read (it is a prefix of the read). A non-anchored adapter may appear partially at the 5' end, or it may occur within the read. If it is found within a read, the sequence preceding the adapter is also trimmed. In all cases the adapter itself is trimmed." name="front_adapters" title="5' (Front) Adapters">
			<conditional name="front_adapter_source">
				<param label="Source" name="front_adapter_source_list" type="select">
					<option selected="true" value="prebuilt">Standard (select from the list below)</option>
					<option value="user">Enter custom sequence</option>
				</param>

				<when value="user">
					<param label="Enter custom 5' adapter sequence" name="front_adapter" size="30" type="text" value="AATTGGCC"/>
				</when>
				<when value="prebuilt">
					<param label="Choose 5' adapter" name="front_adapter" type="select">
						<options from_file="fastx_clipper_sequences.txt">
							<column index="1" name="name"/>
							<column index="0" name="value"/>
						</options>
					</param> 
				</when>
			</conditional>
		</repeat>

		<param help="Maximum allowed error rate (no. of errors divided by the length of the matching region)." label="Maximum error rate" max="1" min="0" name="error_rate" type="float" value="0.1"/>
		<param help="Try to remove adapters at most COUNT times. Useful when an adapter gets appended multiple times." label="Match times" min="1" name="count" type="integer" value="1"/>
		<param help="Minimum overlap length. If the overlap between the adapter and the sequence is shorter than LENGTH, the read is not modified. This reduces the number of bases trimmed purely due to short random adapter matches." label="Minimum overlap length" min="1" name="overlap" type="integer" value="3"/>

		<param falsevalue="" help="Allow 'N's in the read as matches to the adapter." label="Match Read Wildcards" name="match_read_wildcards" truevalue="--match-read-wildcards" type="boolean" value="false"/>
		<param falsevalue="" help="Do not treat 'N' in the adapter sequence as wildcards. This is needed when you want to search for literal 'N' characters." label="Do Not Match Adapter Wildcards" name="no_match_adapters_wildcards" truevalue="--no-match-adapter-wildcards" type="boolean" value="false"/>

        <conditional name="output_filtering_options">
            <param help="Options for filtering processed reads by those that contain the adapter or by minimum or maximum length" label="Output filtering options" name="output_filtering" type="select">
                <option value="default">Default (no filtering)</option>
                <option value="filter">Set Filters</option>
            </param>
            <when value="default"/>
            <when value="filter">
        		<param falsevalue="" help="Discard reads that contain the adapter instead of trimming them. Use the 'Minimum overlap length' option in order to avoid throwing away too many randomly matching reads!" label="Discard Trimmed Reads" name="discard" truevalue="--discard" type="boolean" value="false"/>
        		<param help="Discard trimmed reads that are shorter than LENGTH.  Reads that are too short even before adapter removal are also discarded. In colorspace, an initial primer is not counted. Value of 0 means no minimum length." label="Minimum length" min="0" name="min" optional="true" type="integer" value="0"/>
        		<param help="Discard trimmed reads that are longer than LENGTH.  Reads that are too long even before adapter removal are also discarded. In colorspace, an initial primer is not counted. Value of 0 means no maximum length." label="Maximum length" min="0" name="max" optional="true" type="integer" value="0"/>
            </when>
        </conditional>

	    <conditional name="output_params">
			<param help="By default all reads will be put in the same file.  However, reads with adapters matching in the middle, unmatched reads, and too-short reads can be saved in separate files." label="Additional output options" name="output_type" type="select">
				<option value="default">Default</option>
				<option value="additional">Additional output files</option>
			</param>
			<when value="default"/>
			<when value="additional">
				<param help="When the adapter matches in the middle of a read, write the rest (after the adapter) into a file." label="Rest of Read" name="rest_file" type="boolean" value="false"/>
				<param help="When the adapter has wildcard bases ('N's) write adapter bases matching wildcard positions to file." label="Wildcard File" name="wildcard_file" type="boolean" value="false"/>
				<param help="Write reads that are too short (according to minimum length specified) to a file. (default: discard reads)" label="Too Short Reads" name="too_short_file" type="boolean" value="false"/>
				<param help="Write reads that do not contain the adapter to a separate file, instead of writing them to the regular output file.  (default: output to same file as trimmed)" label="Untrimmed Reads" name="untrimmed_file" type="boolean" value="false"/>
			</when>
		</conditional>

        <conditional name="read_modification_params">
            <param help="Various options to trim reads based on quality, modify read names and quality scores" label="Additional modifications to reads" name="read_modification" type="select">
                <option value="none">No Read Modifications</option>
                <option value="modify">Set Modification Options</option>
            </param>
            <when value="none"/>
            <when value="modify">
                <param help="Trim low-quality ends from reads before adapter removal. The algorithm is the same as the one used by BWA (Subtract CUTOFF from all qualities; compute partial sums from all indices to the end of the sequence; cut sequence at the index at which the sum is minimal). Value of 0 means no quality trimming." label="Quality cutoff" min="0" name="quality_cutoff" optional="true" type="integer" value="0"/>
                <param help="Add this prefix to read names" label="Prefix" name="prefix" type="text"/>
                <param help="Add this suffix to read names" label="Suffix" name="suffix" type="text"/>
                <param help="Search for TAG followed by a decimal number in the name of the read (description/comment field of the FASTA or FASTQ file). Replace the decimal number with the correct length of the trimmed read. For example, use --length-tag 'length=' to search for fields like 'length=123'." label="Length Tag" name="length_tag" type="text"/>
                <param falsevalue="" help="Workaround to avoid segmentation faults in BWA" label="Change negative quality values to zero (0)" name="zero_cap" truevalue="--zero-cap" type="boolean" value="false"/>
            </when>
        </conditional>
	</inputs>

	<outputs>
		<data format="txt" label="${tool.name} on ${on_string} (Report)" name="report"/>
		<data format="input" metadata_source="input" name="output"/>
		<data format="input" label="${tool.name} on ${on_string} (Rest of Reads)" metadata_source="input" name="rest_output">
			<filter>(output_params['output_type'] == &quot;additional&quot;)</filter>
			<filter>(output_params['rest_file'] is True)</filter>
		</data>
		<data format="txt" label="${tool.name} on ${on_string} (Wildcard File)" metadata_source="input" name="wild_output">
			<filter>(output_params['output_type'] == &quot;additional&quot;)</filter>
			<filter>(output_params['wild_file'] is True)</filter>
		</data>
		<data format="input" label="${tool.name} on ${on_string} (Too Short Reads)" metadata_source="input" name="too_short_output">
			<filter>(output_params['output_type'] == &quot;additional&quot;)</filter>
			<filter>(output_params['too_short_file'] is True)</filter>
		</data>
		<data format="input" label="${tool.name} on ${on_string} (Untrimmed Reads)" metadata_source="input" name="untrimmed_output">
			<filter>(output_params['output_type'] == &quot;additional&quot;)</filter>
			<filter>(output_params['untrimmed_file'] is True)</filter>
		</data>
	</outputs>

	<tests>
		<test>
			<param ftype="fastqsanger" name="input" value="cutadapt_small.fastq"/>
			<param name="adapter_source_list" value="user"/>
			<param name="adapter" value=""/>
			<param name="anywhere_adapter_source_list" value="user"/>
			<param name="anywhere_adapter" value="TTAGACATATCTCCGTCG"/>
			<param name="front_adapter_source_list" value="user"/>
			<param name="front_adapter" value=""/>
			<param name="output_filtering" value="default"/>
			<param name="read_modification" value="none"/>
			<param name="output_type" value="default"/>
			<output file="cutadapt_small.out" name="output"/>
		</test>
<!-- Unable to get tests to function with conditional parameters
		<test>
			<param name="input" value="cutadapt_small.fastq" ftype="fastqsanger"/>
			<param name="adapter_source_list" value="user"/>
			<param name="adapter" value="TTAGACATATCTCCGTCG"/>
			<param name="anywhere_adapter_source_list" value="user"/>
			<param name="anywhere_adapter" value=""/>
			<param name="front_adapter_source_list" value="user"/>
			<param name="front_adapter" value=""/>
			<param name="output_filtering" value="filter"/>
			<param name="discard" value="true"/>
			<param name="read_modification" value="none"/>
			<param name="output_type" value="default"/>
			<output name="output" file="cutadapt_discard.out"/>
		</test>
		<test>
			<param name="input" value="cutadapt_rest.fa" ftype="fasta"/>
			<param name="adapter_source_list" value="user"/>
			<param name="adapter" value="ADAPTER"/>
			<param name="anywhere_adapter_source_list" value="user"/>
			<param name="anywhere_adapter" value=""/>
			<param name="front_adapter_source_list" value="user"/>
			<param name="front_adapter" value=""/>
			<param name="output_filtering" value="default"/>
			<param name="read_modification" value="none"/>
			<param name="output_type" value="additional"/>
			<param name="rest_file" value="true"/>
			<output name="output" file="cutadapt_rest.out"/>
			<output name="rest_output" file="cutadapt_rest2.out"/>
		</test>
-->
	</tests>

	<help>
Summary
-------
This tool removes adapter sequences from DNA high-throughput
sequencing data. This is usually necessary when the read length of the
machine is longer than the molecule that is sequenced, such as in
microRNA data.

The tool is based on the opensource cutadapt_ tool.

-----

Algorithm
---------

cutadapt uses a simple semi-global alignment algorithm, without any special optimizations.
For speed, the algorithm is implemented as a Python extension module in ``calignmodule.c``.


Partial adapter matches
-----------------------

Cutadapt correctly deals with partial adapter matches. As an example, suppose
your adapter sequence is ``ADAPTER`` (specified via 3' Adapters parameter).
If you have these input sequences::

	MYSEQUENCEADAPTER
	MYSEQUENCEADAP
	MYSEQUENCEADAPTERSOMETHINGELSE

All of them will be trimmed to ``MYSEQUENCE``. If the sequence starts with an
adapter, like this::

	ADAPTERSOMETHING

It will be empty after trimming.

When the allowed error rate is sufficiently high, errors in
the adapter sequence are allowed. For example, ``ADABTER`` (1 mismatch), ``ADAPTR`` (1 deletion),
and ``ADAPPTER`` (1 insertion) will all be recognized if the error rate is set to 0.15.


Anchoring 5' adapters
---------------------

If you specify a 5' (Front) adapter, the adapter may overlap the beginning of the read or
occur anywhere whithin it. If it appears withing the read, the sequence that precedes it 
will also be trimmed in addition to the adapter. For example when the adapter sequence is
``ADAPTER``::

    HELLOADAPTERTHERE
    APTERTHERE

will both be trimmed to ``THERE``. To avoid this, you can prefix the adapter with the character
``^``. This will restrict the search, forcing the adapter to be a prefix of the read. With
the adapter sequence set to ``^ADAPTER``, only reads like this will be trimmed::

    ADAPTERHELLO


Allowing adapters anywhere
--------------------------

Cutadapt assumes that any adapter specified via the 3' Adapter parameter
was ligated to the 3\' end of the sequence. This is the correct assumption for
at least the SOLiD and Illumina small RNA protocols and probably others.
The assumption is enforced by the alignment algorithm, which only finds the adapter
when its starting position is within the read. In other words, the 5' base of
the adapter must appear within the read. The adapter and all bases following
it are remved.

If, on the other hand, your adapter can also be ligated to the 5' end (on
purpose or by accident), you should tell cutadapt so by using the Anywhere Adapter
parameter. It will then use a slightly different alignment algorithm
(so-called semiglobal alignment), which allows any type of overlap between the
adapter and the sequence. In particular, the adapter may appear only partially
in the beginning of the read, like this::

    PTERMYSEQUENCE

The decision which part of the read to remove is made as follows: If there is at
least one base before the found adapter, then the adapter is considered to be
a 3' adapter and the adapter itself and everything following it is removed.
Otherwise, the adapter is considered to be a 5' adapter and it is removed from
the read.

Here are some examples, which may make this clearer (left: read, right: trimmed
read)::

    MYSEQUENCEADAPTER -&gt; MYSEQUENCE (3' adapter)
    MADAPTER -&gt; M (3' adapter)
    ADAPTERMYSEQUENCE -&gt; MYSEQUENCE (5' adapter)
    PTERMYSEQUENCE -&gt; MYSEQUENCE (5' adapter)

The regular algorithm (3' Adapter) would trim the first two examples in the same way,
but trim the third to an empty sequence and trim the fourth not at all.


.. _cutadapt: http://code.google.com/p/cutadapt/
	</help>

</tool>