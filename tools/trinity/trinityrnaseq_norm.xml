<tool id="trinityrnaseq_norm" name="Trinity read normalization" version="0.0.1">
<!--tool id="trinityrnaseq" name="Trinity" version="0.0.1" -->

    <!-- Written by Jeremy Goecks, modified by Josh Bowden for normalization proceedure, now maintained here by bhaas -->
    <description>Pre-process RNA-seq data to reduce coverage of highly covered areas</description>
    <requirements>
        <requirement type="package">trinity</requirement>
    </requirements>
    <command interpreter="perl">
        #import os
        ##trinityToolWrapper.py /mnt/galaxyTools/tools/trinity/v2.0.6/util/normalize_by_kmer_coverage.pl --JM $JM --max_cov $MAXCOV
        trinityToolWrapper.py /mnt/galaxyTools/tools/trinity/v2.0.6/util/insilico_read_normalization.pl --JM $JM --max_cov $MAXCOV        

        ## Inputs.
        #if str($inputs.paired_or_single) == "paired":
            --left $inputs.left_input --right $inputs.right_input
##			--outleft $output_left --outright $output_right
            #if  $inputs.left_input.ext == 'fa':
                --seqType fa
            #else:
                --seqType fq
            #end if
            #if str($inputs.library_type) != "None":
                --SS_lib_type $inputs.library_type
            #end if

        #else:
            --single $inputs.input
            #if  str($inputs.input.ext) == 'fa':
                --seqType fa
            #else:
                --seqType fq
            #end if
            #if str($inputs.library_type) != "None":
                --SS_lib_type $inputs.library_type
            #end if
			--outputsingle $output_single
        #end if	
	##	--galaxy
                
        ## direct to output
        > $trinity_coverage_normalization_log 
       #set $outleft = os.path.basename(str($inputs.left_input)) + ".normalized_K25_C" + str($MAXCOV) + "_pctSD200.fq"
       #set $outright = os.path.basename(str($inputs.right_input)) + ".normalized_K25_C" + str($MAXCOV) + "_pctSD200.fq"
       ; cp $outleft $output_left; cp $outright $output_right
    </command>
    <inputs>
      	<param name="JM" type="select" label="JM" help="Amount of memory to allocate to Jellyfish for Kmer catalog construction">
			<option value="1G">1G</option>
			<option value="10G">10G</option>
			<option value="20G">20G</option>
			<option value="50G">50G</option>
			<option value="100G">100G</option>			
		</param>
		
		<param name="MAXCOV" type="select" label="MAXCOV" help="Read coverage in terms of maximum covarge to keep">
			<option value="30">30</option>
			<option value="40">40</option>
			<option value="50">50</option>
			<option value="60">60</option>
			<option value="70">70</option>
			<option value="100">100</option>
		</param>

        <conditional name="inputs">
		    <param name="paired_or_single" type="select" label="Paired or Single-end data?">
                <option value="paired">Paired</option>
                <option value="single">Single</option>
            </param>
            <when value="paired">
                <param format="fasta,fastq,fastqsanger" name="left_input" type="data" label="Left/Forward strand reads" help=""/>
                <param format="fasta,fastq,fastqsanger" name="right_input" type="data" label="Right/Reverse strand reads" help=""/>
                <param name="library_type" type="select" label="Strand-specific Library Type">
                    <option value="None">None</option>
                    <option value="FR">FR</option>
                    <option value="RF">RF</option>
                </param>  				
            </when>
            <when value="single">
                <param format="fasta,fastq,fastqsanger" name="input" type="data" label="Single-end reads" help=""/>
                <param name="library_type" type="select" label="Strand-specific Library Type">
                    <option value="None">None</option>
                    <option value="F">F</option>
                    <option value="R">R</option>
                </param>

            </when>
        </conditional>
    </inputs>
	
    <outputs>
	<!-- I have not found a way to do condional outputs so all potential output files are specified and some will be empty -->
	<data format="txt" name="trinity_coverage_normalization_log" label="${tool.name} on ${on_string}: log" />
	<data format_source="left_input" name="output_left" label="${tool.name} on ${on_string}: Normalized left data" >
          <filter>(inputs["paired_or_single"] == "paired")</filter>
        </data>
	<data format_source="right_input" name="output_right" label="${tool.name} on ${on_string}: Normalized right data" > 
          <filter>(inputs["paired_or_single"] == "paired")</filter>
        </data>
	<data format_source="input" name="output_single" label="${tool.name} on ${on_string}: Normalized data" >
          <filter>(inputs["paired_or_single"] == "single")</filter>
        </data>
	<!-- data format="fastq" name="normalized right dataset" label="${tool.name} on ${on_string}: Normalized right data " from_work_dir="${inputs.right_input}.${inputs.input.ext}.normalized_K25_C${MAXCOV}_pctSD100.fq"/-->
	</outputs>
    <tests>
    </tests>
    <help>
        Runs script $TRINITY_HOME/util/normalize_by_kmer_coverage.pl which reduces data sizes with minimal impact on recovered transcripts when used by Trinity.pl.
        
        .. _Trinity: http://trinityrnaseq.sourceforge.net
    </help>
</tool>
