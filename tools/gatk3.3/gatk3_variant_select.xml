<tool id="gatk3.3_variant_select" name="Select Variants" version="GATK3.3: GenomeAnalysisTK-3.3-0">
  <description>from VCF files</description>
  <requirements>
      <requirement type="package" version="3.3">gatk3</requirement>
  </requirements>
  <macros>
    <import>gatk_macros.xml</import>
  </macros>
  <command interpreter="python">gatk3_wrapper.py
   #from binascii import hexlify
   --max_jvm_heap_fraction &quot;1&quot;
   --stdout &quot;${output_log}&quot;
   -d &quot;--variant:variant,%(file_type)s&quot; &quot;${reference_source.input_variant}&quot; &quot;${reference_source.input_variant.ext}&quot; &quot;input_variant&quot;
   -p 'java 
    -jar &quot;\$GATK3_PATH/GenomeAnalysisTK.jar&quot;
    -T &quot;SelectVariants&quot;
    \$GATK3_SITE_OPTIONS
    \$GATK3_NUM_THREADS
    --num_threads 32 ##hard coded, for now
    ##-et &quot;NO_ET&quot; -K &quot;\$GATK3_BASE/gatk3_key_file&quot; ##ET no phone home
    -o &quot;${output_vcf}&quot;
    
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
    '
    -p '
    #if $input_concordance:
        --concordance &quot;${input_concordance}&quot;
    #end if
    #if $input_discordance:
        --discordance &quot;${input_discordance}&quot;
    #end if
    
    #for $exclude_sample_name in $exclude_sample_name_repeat:
        --exclude_sample_name &quot;${exclude_sample_name.exclude_sample_name}&quot;
    #end for
    
    ${exclude_filtered}
    
    #for $sample_name in $sample_name_repeat:
        --sample_name &quot;${sample_name.sample_name}&quot;
    #end for
    
    '
    
    #for $select_expressions in $select_expressions_repeat:
        #set $select_expression = &quot;--select_expressions '%s'&quot; % ( str( $select_expressions.select_expressions ) )
        -o '${ hexlify( $select_expression ) }'
    #end for
    
    ##start tool specific options
    #if str( $analysis_param_type.analysis_param_type_selector ) == 'advanced':
        -p '
          #for $exclude_sample_file in $analysis_param_type.exclude_sample_file_repeat:
              --exclude_sample_file &quot;${exclude_sample_file.exclude_sample_file}&quot;
          #end for
          
          #for $sample_file in $analysis_param_type.sample_file_repeat:
              --sample_file &quot;${ample_file.sample_file}&quot;
          #end for
          
          #if $analysis_param_type.input_keep_ids:
              --keepIDs &quot;${analysis_param_type.input_keep_ids}&quot;
          #end if
          
          ${analysis_param_type.keep_original_AC}
          
          ${analysis_param_type.mendelian_violation}
          
          --mendelianViolationQualThreshold &quot;${analysis_param_type.mendelian_violation_qual_threshold}&quot;
          
          --remove_fraction_genotypes &quot;${analysis_param_type.remove_fraction_genotypes}&quot;
          
          --restrictAllelesTo &quot;${analysis_param_type.restrict_alleles_to}&quot;
          
          #if str( $analysis_param_type.select_random_type.select_random_type_selector ) == 'select_random_fraction':
              --select_random_fraction &quot;${analysis_param_type.select_random_type.select_random_fraction}&quot;
          #elif str( $analysis_param_type.select_random_type.select_random_type_selector ) == 'select_random_number':
              --select_random_number &quot;${analysis_param_type.select_random_type.select_random_number}&quot;
          #end if
          
          #if $analysis_param_type.select_type_to_include:
              #for $type_to_include in str( $analysis_param_type.select_type_to_include ).split( ',' ):
                  --selectTypeToInclude &quot;${type_to_include}&quot;
              #end for
          #end if
          
          ${analysis_param_type.exclude_non_variants}
        '
        
        #for $sample_expressions in $analysis_param_type.sample_expressions_repeat:
            #set $sample_expression = &quot;--sample_expressions '%s'&quot; % ( str( $sample_expressions.sample_expressions ) )
            -o '${ hexlify( $sample_expression ) }'
        #end for
        
    #end if
    ##end tool specific options
    
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #include source=$standard_gatk_options#
    #end if
    
    #if str( $reference_source.reference_source_selector ) == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input_reference_fasta&quot;
        --picard_jar &quot;/mnt/galaxyTools/tools/picard/1.121/CreateSequenceDictionary.jar&quot;
    #end if
    ##end standard gatk options
    
    
  </command>
  <inputs>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to select" name="input_variant" type="data"/>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
            <filter column="dbkey" key="dbkey" ref="input_variant" type="data_meta"/>
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to select" name="input_variant" type="data"/>
        <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    
    <repeat help="-select,--select_expressions &amp;lt;select_expressions&amp;gt;" name="select_expressions_repeat" title="Criteria to use when selecting the data">
        <param label="JEXL expression" name="select_expressions" type="text">
            <sanitizer>
              <valid initial="string.printable">
               <remove value="'"/>
             </valid>
              <mapping initial="none"/>
            </sanitizer>
        </param>
    </repeat>
    
    <param format="vcf" help="-conc,--concordance &amp;lt;concordance&amp;gt;" label="Output variants that were also called in this comparison track" name="input_concordance" optional="True" type="data"/>
    <param format="vcf" help="-disc,--discordance &amp;lt;discordance&amp;gt;" label="Output variants that were not called in this comparison track" name="input_discordance" optional="True" type="data"/>
    
    <repeat help="-sn,--sample_name &amp;lt;sample_name&amp;gt;" name="sample_name_repeat" title="Include Samples by name">
        <param label="Include genotypes from this sample" name="sample_name" type="text"/>
    </repeat>
    
    <repeat help="-xl_sn,--exclude_sample_name &amp;lt;exclude_sample_name&amp;gt;" name="exclude_sample_name_repeat" title="Exclude Samples by name">
        <param label="Exclude genotypes from this sample" name="exclude_sample_name" type="text"/>
    </repeat>
    
    <param falsevalue="" help="-ef,--excludeFiltered" label="Don't include filtered loci in the analysis" name="exclude_filtered" truevalue="--excludeFiltered" type="boolean"/>
    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <expand macro="advanced_options" />
      </when>
    </conditional>
    
    
    <conditional name="analysis_param_type">
      <param label="Basic or Advanced Analysis options" name="analysis_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        
        <repeat help="-xl_sf,--exclude_sample_file &amp;lt;exclude_sample_file&amp;gt;" name="exclude_sample_file_repeat" title="Exclude Samples by file">
            <param format="txt" label="File containing a list of samples (one per line) to exclude" name="exclude_sample_file" type="data"/>
        </repeat>
        
        <repeat help="-sf,--sample_file &amp;lt;sample_file&amp;gt;" name="sample_file_repeat" title="Samples by file">
            <param format="txt" label="File containing a list of samples (one per line) to include" name="sample_file" type="data"/>
        </repeat>
        
        <param format="text" help="-IDs,--keepIDs &amp;lt;keepIDs&amp;gt;" label="Only emit sites whose ID is found in this file" name="input_keep_ids" optional="True" type="data"/>
        
        <param falsevalue="" help="-keepOriginalAC,--keepOriginalAC" label="Don't update the AC, AF, or AN values in the INFO field after selecting" name="keep_original_AC" truevalue="--keepOriginalAC" type="boolean"/>
        
        <param falsevalue="" help="-mv,--mendelianViolation" label="output mendelian violation sites only" name="mendelian_violation" truevalue="--mendelianViolation" type="boolean"/>
        
        <param help="-mvq,--mendelianViolationQualThreshold &amp;lt;mendelianViolationQualThreshold&amp;gt;" label="Minimum genotype QUAL score for each trio member required to accept a site as a mendelian violation" name="mendelian_violation_qual_threshold" type="float" value="0"/>
        
        <param help="-fractionGenotypes,--remove_fraction_genotypes &amp;lt;remove_fraction_genotypes&amp;gt;" label="Selects a fraction (a number between 0 and 1) of the total genotypes at random from the variant track and sets them to nocall" max="1" min="0" name="remove_fraction_genotypes" type="float" value="0"/>
        
        <param help="-restrictAllelesTo,--restrictAllelesTo &amp;lt;restrictAllelesTo&amp;gt;" label="Select only variants of a particular allelicity" name="restrict_alleles_to" type="select">
            <option selected="True" value="ALL">ALL</option>
            <option value="MULTIALLELIC">MULTIALLELIC</option>
            <option value="BIALLELIC">BIALLELIC</option>
        </param>
        
        <repeat help="-se,--sample_expressions &amp;lt;sample_expressions&amp;gt;" name="sample_expressions_repeat" title="Regular expression to select many samples from the ROD tracks provided">
            <param label="Regular expression" name="sample_expressions" type="text">
                <sanitizer>
                  <valid initial="string.printable">
                   <remove value="'"/>
                 </valid>
                  <mapping initial="none"/>
                </sanitizer>
            </param>
        </repeat>
        
        <conditional name="select_random_type">
          <param label="Select a random subset of variants" name="select_random_type_selector" type="select">
            <option selected="True" value="select_all">Use all variants</option>
            <option value="select_random_fraction">Select random fraction</option>
            <option value="select_random_number">Select random number</option>
          </param>
          <when value="select_all">
            <!-- Do nothing here -->
          </when>
          <when value="select_random_fraction">
            <param help="-fraction,--select_random_fraction &amp;lt;select_random_fraction&amp;gt;" label="Fraction" max="1" min="0" name="select_random_fraction" type="float" value="0"/>
          </when>
          <when value="select_random_number">
            <param help="-number,--select_random_number &amp;lt;select_random_number&amp;gt;" label="Count" name="select_random_number" type="integer" value="0"/>
          </when>
        </conditional>
        
        <param falsevalue="" help="-env,--excludeNonVariants" label="Don't include loci found to be non-variant after the subsetting procedure" name="exclude_non_variants" truevalue="--excludeNonVariants" type="boolean"/>
        
        <param display="checkboxes" help="-selectType,--selectTypeToInclude &amp;lt;selectTypeToInclude&amp;gt;" label="Select only a certain type of variants from the input file" multiple="True" name="select_type_to_include" type="select">
            <option value="INDEL">INDEL</option>
            <option value="SNP">SNP</option>
            <option value="MIXED">MIXED</option>
            <option value="MNP">MNP</option>
            <option value="SYMBOLIC">SYMBOLIC</option>
            <option value="NO_VARIATION">NO_VARIATION</option>
        </param>
        
      </when>
    </conditional>
    
  </inputs>
  <outputs>
    <data format="vcf" label="${tool.name} on ${on_string} (Variant File)" name="output_vcf"/>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="vcf" name="input_variant" value="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf"/>
          <param name="select_expressions_repeat" value="0"/>
          <param name="input_concordance"/>
          <param name="input_discordance"/>
          <param name="exclude_sample_name_repeat" value="0"/>
          <param name="exclude_filtered"/>
          <param name="sample_name_repeat" value="0"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <param name="analysis_param_type_selector" value="basic"/>
          <output file="gatk/gatk_variant_select/gatk_variant_select_out_1.vcf" lines_diff="4" name="output_vcf"/> 
          <output compare="contains" file="gatk/gatk_variant_select/gatk_variant_select_out_1.log.contains" name="output_log"/>
      </test>
  </tests>
  <help>
**What it does**

Often, a VCF containing many samples and/or variants will need to be subset in order to facilitate certain analyses (e.g. comparing and contrasting cases vs. controls; extracting variant or non-variant loci that meet certain requirements, displaying just a few samples in a browser like IGV, etc.). SelectVariants can be used for this purpose. Given a single VCF file, one or more samples can be extracted from the file (based on a complete sample name or a pattern match). Variants can be further selected by specifying criteria for inclusion, i.e. &quot;DP &gt; 1000&quot; (depth of coverage greater than 1000x), &quot;AF &lt; 0.25&quot; (sites with allele frequency less than 0.25). These JEXL expressions are documented in the `Using JEXL expressions section &lt;http://gatkforums.broadinstitute.org/discussion/1255/what-are-jexl-expressions-and-how-can-i-use-them-with-the-gatk&gt;`_. One can optionally include concordance or discordance tracks for use in selecting overlapping variants. 

For more information on using the SelectVariants module, see this `tool specific page &lt;http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_variantutils_SelectVariants.html&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gatk/guide/topic?name=best-practices&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gatk/guide/topic?name=faqs&gt;`_.

------

**Inputs**

GenomeAnalysisTK: SelectVariants accepts a VCF input file.


**Outputs**

The output is in VCF format.


Go `here &lt;http://www.broadinstitute.org/gatk/guide/topic?name=intro&gt;`_ for details on GATK file formats.

-------

**Settings**::


 out                         VCFWriter  stdout  File to which variants should be written
 variant                     RodBinding[VariantContext]  NA  Input VCF file
 concordance                 RodBinding[VariantContext]  none  Output variants that were also called in this comparison track
 discordance                 RodBinding[VariantContext]  none  Output variants that were not called in this comparison track
 exclude_sample_file         Set[File]  []  File containing a list of samples (one per line) to exclude. Can be specified multiple times
 exclude_sample_name         Set[String]  []  Exclude genotypes from this sample. Can be specified multiple times
 excludeFiltered             boolean  false  Don't include filtered loci in the analysis
 excludeNonVariants          boolean  false  Don't include loci found to be non-variant after the subsetting procedure
 keepIDs                     File  NA  Only emit sites whose ID is found in this file (one ID per line)
 keepOriginalAC              boolean  false  Don't update the AC, AF, or AN values in the INFO field after selecting
 mendelianViolation          Boolean  false  output mendelian violation sites only
 mvq                         double  0.0  Minimum genotype QUAL score for each trio member required to accept a site as a violation
 remove_fraction_genotypes   double  0.0  Selects a fraction (a number between 0 and 1) of the total genotypes at random from the variant track and sets them to nocall
 restrictAllelesTo           NumberAlleleRestriction  ALL  Select only variants of a particular allelicity. Valid options are ALL (default), MULTIALLELIC or BIALLELIC
 sample_expressions          Set[String]  NA  Regular expression to select many samples from the ROD tracks provided. Can be specified multiple times
 sample_file                 Set[File]  NA  File containing a list of samples (one per line) to include. Can be specified multiple times
 sample_name                 Set[String]  []  Include genotypes from this sample. Can be specified multiple times
 select_expressions          ArrayList[String]  []  One or more criteria to use when selecting the data
 select_random_fraction      double  0.0  Selects a fraction (a number between 0 and 1) of the total variants at random from the variant track
 select_random_number        int  0  Selects a number of variants at random from the variant track
 selectTypeToInclude         List[Type]  []  Select only a certain type of variants from the input file. Valid types are INDEL, SNP, MIXED, MNP, SYMBOLIC, NO_VARIATION. Can be specified multiple times

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

Please also site `McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res. 20:1297-303. Epub 2010 Jul 19. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20644199&gt;`_

If you use this tool in Galaxy, please cite `Blankenberg D, Von Kuster G, Coraor N, Ananda G, Lazarus R, Mangan M, Nekrutenko A, Taylor J. Galaxy: a web-based genome analysis tool for experimentalists. Curr Protoc Mol Biol. 2010 Jan;Chapter 19:Unit 19.10.1-21. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20069535&gt;`_

  </help>
</tool>
