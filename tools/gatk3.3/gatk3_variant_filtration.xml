<tool id="gatk3.3_variant_filtration" name="Variant Filtration" version="GATK3.3: GenomeAnalysisTK-3.3-0">
  <description>on VCF files</description>
  <requirements>
      <requirement type="package" version="3.3">gatk3</requirement>
  </requirements>
  <macros>
    <import>gatk_macros.xml</import>
  </macros>
  <command interpreter="python">gatk3_wrapper.py
   #from binascii import hexlify
   --max_jvm_heap_fraction &quot;1&quot;
   --stdout &quot;${output_log}&quot;
   -d &quot;--variant:variant,%(file_type)s&quot; &quot;${reference_source.input_variant}&quot; &quot;${reference_source.input_variant.ext}&quot; &quot;input_variant&quot;
   -p 'java 
    -jar &quot;\$GATK3_PATH/GenomeAnalysisTK.jar&quot;
    -T &quot;VariantFiltration&quot;
    \$GATK3_SITE_OPTIONS
    ## \$GATK3_NUM_THREADS
    ##--num_threads 32 ##hard coded, for now
    ##-et &quot;NO_ET&quot; -K &quot;\$GATK3_BASE/gatk3_key_file&quot; ##ET no phone home
    -o &quot;${output_vcf}&quot;
    ##-log &quot;${output_log}&quot; ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
    '
    #for $variant_filter in $variant_filters:
        #set $variant_filter = &quot;--%sExpression '%s' --%sName '%s'&quot; % ( str( $variant_filter.is_genotype_filter ), str( $variant_filter.filter_expression ), str( $variant_filter.is_genotype_filter ), str( $variant_filter.filter_name )  )
        -o '${ hexlify( $variant_filter ) }'
    #end for
    
    #if str( $mask_rod_bind_type.mask_rod_bind_type_selector ) == 'set_mask':
        -d &quot;--mask:${mask_rod_bind_type.mask_rod_name},%(file_type)s&quot; &quot;${mask_rod_bind_type.input_mask_rod}&quot; &quot;${mask_rod_bind_type.input_mask_rod.ext}&quot; &quot;input_mask_${mask_rod_bind_type.mask_rod_name}&quot;
        -p '
        --maskExtension &quot;${mask_rod_bind_type.mask_extension}&quot;
        --maskName &quot;${mask_rod_bind_type.mask_rod_name}&quot;
        '
    #end if
    
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #include source=$standard_gatk_options#
    #end if
    
    #if str( $reference_source.reference_source_selector ) == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input_reference_fasta&quot;
        --picard_jar &quot;/mnt/galaxyTools/tools/picard/1.121/CreateSequenceDictionary.jar&quot;
    #end if
    ##end standard gatk options
    
    ##start analysis specific options
    #if $cluster_snp_type.cluster_snp_type_selector == &quot;cluster_snp&quot;:
        -p '
        --clusterSize &quot;${cluster_snp_type.cluster_size}&quot;
        --clusterWindowSize &quot;${cluster_snp_type.cluster_window_size}&quot;
        '
    #end if
    -p '${missing_values_in_expressions_should_evaluate_as_failing}'
  </command>
  <inputs>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to annotate" name="input_variant" type="data"/>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
                <filter column="3" type="sort_by"/>

            <filter column="dbkey" key="dbkey" ref="input_variant" type="data_meta"/>
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to annotate" name="input_variant" type="data"/>
        <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    
    
    <repeat name="variant_filters" title="Variant Filters">
        <param help="JEXL formatted expressions (-filter,--filterExpression &amp;lt;filterExpression&amp;gt;)" label="Filter expression" name="filter_expression" type="text" value="AB &lt; 0.2 || MQ0 &gt; 50">
            <sanitizer>
              <valid initial="string.printable">
               <remove value="'"/>
             </valid>
              <mapping initial="none"/>
            </sanitizer>
        </param>
        <param help="-filterName,--filterName &amp;lt;filterName&amp;gt;" label="Filter name" name="filter_name" type="text" value="custom_filter"/>
        <param falsevalue="filter" help="Use -G_filter,--genotypeFilterExpression &amp;lt;genotypeFilterExpression&amp;gt; and -G_filterName,--genotypeFilterName &amp;lt;genotypeFilterName&amp;gt; for filter type" label="Use filter at the individual sample level" name="is_genotype_filter" truevalue="genotypeFilter" type="boolean"/>
    </repeat>
    

    
    <conditional name="mask_rod_bind_type">
      <param label="Provide a Mask reference-ordered data file" name="mask_rod_bind_type_selector" type="select">
        <option selected="True" value="set_mask">Set maskP</option>
        <option value="exclude_mask">Don't set mask</option>
      </param>
      <when value="exclude_mask">
        <!-- Do nothing here -->
      </when>
      <when value="set_mask">
        <param format="bed,gatk_dbsnp,vcf" help="--mask &amp;lt;mask&amp;gt;" label="Mask ROD file" name="input_mask_rod" type="data"/>
        <param help="-maskName,--maskName &amp;lt;maskName&amp;gt;" label="Mask Name" name="mask_rod_name" type="text" value="Mask"/>
        <param help="-maskExtend,--maskExtension &amp;lt;maskExtension&amp;gt;" label="Mask Extension" name="mask_extension" type="integer" value="0"/>
      </when>
    </conditional>    
    
    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <expand macro="advanced_options" />
      </when>
    </conditional>
    
    <conditional name="cluster_snp_type">
      <param label="Cluster SNPs" name="cluster_snp_type_selector" type="select">
        <option value="cluster_snp">Cluster SNPs</option>
        <option selected="True" value="do_not_cluster_snp">Do not cluster SNPs</option>
      </param>
      <when value="do_not_cluster_snp">
        <!-- Do nothing here -->
      </when>
      <when value="cluster_snp">
        <param help="-cluster,--clusterSize &amp;lt;clusterSize&amp;gt;" label="The number of SNPs which make up a cluster" name="cluster_size" type="integer" value="3"/>
        <param help="-window,--clusterWindowSize &amp;lt;clusterWindowSize&amp;gt;" label="The window size (in bases) in which to evaluate clustered SNPs" name="cluster_window_size" type="integer" value="0"/>
      </when>
    </conditional>
    
    <param falsevalue="" help="--missingValuesInExpressionsShouldEvaluateAsFailing" label="Should missing values be considered failing the expression" name="missing_values_in_expressions_should_evaluate_as_failing" truevalue="--missingValuesInExpressionsShouldEvaluateAsFailing" type="boolean"/>
    
  </inputs>
  <outputs>
    <data format="vcf" label="${tool.name} on ${on_string} (Variant File)" name="output_vcf"/>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="vcf" name="input_variant" value="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf"/>
          <param name="filter_expression" value="MQ &lt; 37.74 || MQ0 &gt; 50"/>
          <param name="filter_name" value="Galaxy_filter"/>
          <param name="is_genotype_filter"/>
          <param name="mask_rod_bind_type_selector" value="set_mask"/>
          <param ftype="bed" name="input_mask_rod" value="gatk/fake_phiX_variant_locations.bed"/>
          <param name="mask_rod_name" value="."/>
          <param name="mask_extension" value="0"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <param name="cluster_snp_type_selector" value="do_not_cluster_snp"/>
          <param name="missing_values_in_expressions_should_evaluate_as_failing"/>
          <output file="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf" lines_diff="4" name="output_vcf"/> 
          <output compare="contains" file="gatk/gatk_variant_filtration/gatk_variant_filtration_out_1.log.contains" name="output_log"/>
      </test>
  </tests>
  <help>
**What it does**

Filters variant calls using a number of user-selectable, parameterizable criteria.

For more information on using the VariantFiltration module, see this `tool specific page &lt;http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_filters_VariantFiltration.html&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gatk/guide/topic?name=best-practices&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gatk/guide/topic?name=faqs&gt;`_.

------

**Inputs**

GenomeAnalysisTK: VariantFiltration accepts a VCF input file.


**Outputs**

The output is in VCF format.

Go `here &lt;http://www.broadinstitute.org/gatk/guide/topic?name=intro&gt;`_ for details on GATK file formats.

-------

**Settings**::


 filterExpression                                     One or more expression used with INFO fields to filter (see wiki docs for more info)
 filterName                                           Names to use for the list of filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered
 genotypeFilterExpression                             One or more expression used with FORMAT (sample/genotype-level) fields to filter (see wiki docs for more info)
 genotypeFilterName                                   Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered
 clusterSize                                          The number of SNPs which make up a cluster (see also --clusterWindowSize); [default:3]
 clusterWindowSize                                    The window size (in bases) in which to evaluate clustered SNPs (to disable the clustered SNP filter, set this value to less than 1); [default:0]
 maskName                                             The text to put in the FILTER field if a 'mask' rod is provided and overlaps with a variant call; [default:'Mask']
 missingValuesInExpressionsShouldEvaluateAsFailing    When evaluating the JEXL expressions, should missing values be considered failing the expression (by default they are considered passing)?

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

Please also site `McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res. 20:1297-303. Epub 2010 Jul 19. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20644199&gt;`_

If you use this tool in Galaxy, please cite `Blankenberg D, Von Kuster G, Coraor N, Ananda G, Lazarus R, Mangan M, Nekrutenko A, Taylor J. Galaxy: a web-based genome analysis tool for experimentalists. Curr Protoc Mol Biol. 2010 Jan;Chapter 19:Unit 19.10.1-21. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20069535&gt;`_


  </help>
</tool>
