<tool id="condor_gatk_validate_variants" name="Validate Variants (via Condor)" version="GATK: 1.4">
  <description/>
  <requirements>
      <requirement type="package" version="1.4">gatk</requirement>
  </requirements>
  <command interpreter="python">condor_run.py
    ${GALAXY_DATA_INDEX_DIR}/../tools/gatk-condor/gatk_wrapper.py
   --max_jvm_heap_fraction &quot;1&quot;
   --stdout &quot;${output_log}&quot;
   -d &quot;--variant:variant,%(file_type)s&quot; &quot;${reference_source.input_variant}&quot; &quot;${reference_source.input_variant.ext}&quot; &quot;input_variant&quot;
   -p 'java 
    -jar &quot;${GALAXY_DATA_INDEX_DIR}/shared/jars/gatk/GenomeAnalysisTK.jar&quot;
    -T &quot;ValidateVariants&quot;
    
    -et &quot;NO_ET&quot; ##ET no phone home
    ##--num_threads 4 ##hard coded, for now
    ##-log &quot;${output_log}&quot; ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
    ${warn_on_errors}
    ${do_not_validate_filtered_records}
   '
   
    #if str( $dbsnp_rod_bind_type.dbsnp_rod_bind_type_selector ) == 'set_dbsnp':
        -d &quot;--dbsnp:${dbsnp_rod_bind_type.dbsnp_rod_name},%(file_type)s&quot; &quot;${dbsnp_rod_bind_type.dbsnp_input_rod}&quot; &quot;${dbsnp_rod_bind_type.dbsnp_input_rod.ext}&quot; &quot;input_dbsnp_${dbsnp_rod_bind_type.dbsnp_rod_name}&quot;
    #end if
   
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree &quot;${pedigree.pedigree_file}&quot;'
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString &quot;${pedigree_string.pedigree_string}&quot;'
        #end for
        -p '--pedigreeValidationType &quot;${gatk_param_type.pedigree_validation_type}&quot;'
        #for $read_filter in $gatk_param_type.read_filter:
            -p '--read_filter &quot;${read_filter.read_filter_type.read_filter_type_selector}&quot;
            ###raise Exception( str( dir( $read_filter ) ) )
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ &quot;__current_case__&quot;, &quot;read_filter_type_selector&quot; ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        ${param}
                    #else:
                        --${name} &quot;${param}&quot;
                    #end if
                #end if
            #end for
            '
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d &quot;--intervals&quot; &quot;${input_intervals.input_intervals}&quot; &quot;${input_intervals.input_intervals.ext}&quot; &quot;input_intervals_${interval_count}&quot;
        #end for
        
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d &quot;--excludeIntervals&quot; &quot;${input_intervals.input_exclude_intervals}&quot; &quot;${input_intervals.input_exclude_intervals.ext}&quot; &quot;input_exlude_intervals_${interval_count}&quot;
        #end for

        -p '--interval_set_rule &quot;${gatk_param_type.interval_set_rule}&quot;'
        
        -p '--downsampling_type &quot;${gatk_param_type.downsampling_type.downsampling_type_selector}&quot;'
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != &quot;NONE&quot;:
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} &quot;${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}&quot;'
        #end if
        -p '
        --baq &quot;${gatk_param_type.baq}&quot;
        --baqGapOpenPenalty &quot;${gatk_param_type.baq_gap_open_penalty}&quot;
        ${gatk_param_type.use_original_qualities}
        --defaultBaseQualities &quot;${gatk_param_type.default_base_qualities}&quot;
        --validation_strictness &quot;${gatk_param_type.validation_strictness}&quot;
        --interval_merging &quot;${gatk_param_type.interval_merging}&quot;
        ${gatk_param_type.disable_experimental_low_memory_sharding}
        ${gatk_param_type.non_deterministic_random_seed}
        '
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == &quot;file&quot;:
                -d &quot;--read_group_black_list&quot; &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot; &quot;txt&quot; &quot;input_read_group_black_list_${rg_black_list_count}&quot;
            #else
                -p '--read_group_black_list &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot;'
            #end if
        #end for
    #end if
    
    #if $reference_source.reference_source_selector == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input&quot;
    #end if
    ##end standard gatk options
    
  </command>
  <inputs>
    
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <param format="vcf" label="Input variant file" name="input_variant" type="data"/>
        <param label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk_picard_indexes">
                <filter column="3" type="sort_by"/>

            <filter column="dbkey" key="dbkey" ref="input_variant" type="data_meta"/>
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <param format="vcf" label="Input variant file" name="input_variant" type="data"/>
        <param format="fasta" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    
    <conditional name="dbsnp_rod_bind_type">
      <param label="Provide a dbSNP reference-ordered data file" name="dbsnp_rod_bind_type_selector" type="select">
        <option selected="True" value="set_dbsnp">Set dbSNP</option>
        <option value="exclude_dbsnp">Don't set dbSNP</option>
      </param>
      <when value="exclude_dbsnp">
        <!-- Do nothing here -->
      </when>
      <when value="set_dbsnp">
        <param format="vcf" label="ROD file" name="dbsnp_input_rod" type="data"/>
        <param label="ROD Name" name="dbsnp_rod_name" type="hidden" value="dbsnp"/>
      </when>
    </conditional>
    
    <param checked="False" falsevalue="" label="instead of terminating the run at the first error, print warning messages for each error seen. " name="warn_on_errors" truevalue="-warnOnErrors" type="boolean"/>
    <param checked="False" falsevalue="" label="do not try to validate records that are FILTERed. " name="do_not_validate_filtered_records" truevalue="-doNotValidateFilteredRecords" type="boolean"/>
    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <repeat name="pedigree" title="Pedigree file">
            <param format="txt" label="Pedigree files for samples" name="pedigree_file" type="data"/>
        </repeat>
        <repeat name="pedigree_string_repeat" title="Pedigree string">
            <param label="Pedigree string for samples" name="pedigree_string" type="text" value=""/>
        </repeat>
        <param label="How strict should we be in validating the pedigree information" name="pedigree_validation_type" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat name="read_filter" title="Read Filter">
            <conditional name="read_filter_type">
		      <param label="Read Filter Type" name="read_filter_type_selector" type="select">
		        <option value="BadCigar">BadCigar</option>
		        <option value="BadMate">BadMate</option>
		        <option value="DuplicateRead">DuplicateRead</option>
		        <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
		        <option value="MalformedRead">MalformedRead</option>
		        <option value="MappingQuality">MappingQuality</option>
		        <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
		        <option value="MappingQualityZero">MappingQualityZero</option>
		        <option value="MateSameStrand">MateSameStrand</option>
		        <option value="MaxInsertSize">MaxInsertSize</option>
		        <option selected="True" value="MaxReadLength">MaxReadLength</option>
		        <option value="MissingReadGroup">MissingReadGroup</option>
		        <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
		        <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
		        <option value="Platform454">Platform454</option>
		        <option value="Platform">Platform</option>
		        <option value="PlatformUnit">PlatformUnit</option>
		        <option value="ReadGroupBlackList">ReadGroupBlackList</option>
		        <option value="ReadName">ReadName</option>
		        <option value="ReadStrand">ReadStrand</option>
		        <option value="ReassignMappingQuality">ReassignMappingQuality</option>
		        <option value="Sample">Sample</option>
		        <option value="SingleReadGroup">SingleReadGroup</option>
		        <option value="UnmappedRead">UnmappedRead</option>
		      </param>
	          <when value="BadCigar">
	              <!-- no extra options -->
	          </when>
	          <when value="BadMate">
	              <!-- no extra options -->
	          </when>
	          <when value="DuplicateRead">
	              <!-- no extra options -->
	          </when>
	          <when value="FailsVendorQualityCheck">
	              <!-- no extra options -->
	          </when>
	          <when value="MalformedRead">
	              <!-- no extra options -->
	          </when>
	          <when value="MappingQuality">
	              <param label="Minimum read mapping quality required to consider a read for calling" name="min_mapping_quality_score" type="integer" value="10"/>
	          </when>
	          <when value="MappingQualityUnavailable">
	              <!-- no extra options -->
	          </when>
	          <when value="MappingQualityZero">
	              <!-- no extra options -->
	          </when>
	          <when value="MateSameStrand">
	              <!-- no extra options -->
	          </when>
	          <when value="MaxInsertSize">
	              <param label="Discard reads with insert size greater than the specified value" name="maxInsertSize" type="integer" value="1000000"/>
	          </when>
	          <when value="MaxReadLength">
	              <param label="Max Read Length" name="maxReadLength" type="integer" value="76"/>
	          </when>
	          <when value="MissingReadGroup">
	              <!-- no extra options -->
	          </when>
	          <when value="NoOriginalQualityScores">
	              <!-- no extra options -->
	          </when>
	          <when value="NotPrimaryAlignment">
	              <!-- no extra options -->
	          </when>
	          <when value="Platform454">
	              <!-- no extra options -->
	          </when>
	          <when value="Platform">
	              <param label="Discard reads with RG:PL attribute containing this string" name="PLFilterName" type="text" value=""/>
	          </when>
	          <when value="PlatformUnit">
	              <!-- no extra options -->
	          </when>
	          <when value="ReadGroupBlackList">
	              <!-- no extra options -->
	          </when>
	          <when value="ReadName">
	              <param label="Filter out all reads except those with this read name" name="readName" type="text" value=""/>
	          </when>
	          <when value="ReadStrand">
	              <param falsevalue="" label="Discard reads on the forward strand" name="filterPositive" truevalue="--filterPositive" type="boolean"/>
	          </when>
	          <when value="ReassignMappingQuality">
	              <param label="Default read mapping quality to assign to all reads" name="default_mapping_quality" type="integer" value="60"/>
	          </when>
	          <when value="Sample">
	              <param label="The name of the sample(s) to keep, filtering out all others" name="sample_to_keep" type="text" value=""/>
	          </when>
	          <when value="SingleReadGroup">
	              <param label="The name of the read group to keep, filtering out all others" name="read_group_to_keep" type="integer" value="76"/>
	          </when>
	          <when value="UnmappedRead">
	              <!-- no extra options -->
	          </when>
            </conditional>
        </repeat>
        <repeat name="input_interval_repeat" title="Operate on Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_intervals" type="data"/>
        </repeat>
        <repeat name="input_exclude_interval_repeat" title="Exclude Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_exclude_intervals" type="data"/>
        </repeat>
        
        <param label="Interval set rule" name="interval_set_rule" type="select">
          <option selected="True" value="UNION">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        
        <conditional name="downsampling_type">
          <param help="Downsampling Type" label="Type of reads downsampling to employ at a given locus" name="downsampling_type_selector" type="select">
            <option selected="True" value="NONE">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
	          <!-- no more options here -->
	      </when>
          <when value="ALL_READS">
	          <conditional name="downsample_to_type">
	              <param help="Downsampling Type" label="Type of reads downsampling to employ at a given locus" name="downsample_to_type_selector" type="select">
	                  <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
	                  <option value="downsample_to_coverage">Downsample by Coverage</option>
	              </param>
	              <when value="downsample_to_fraction">
	                  <param label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
	              </when>
	              <when value="downsample_to_coverage">
	                  <param label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
	              </when>
	          </conditional>
	      </when>
          <when value="BY_SAMPLE">
	          <conditional name="downsample_to_type">
	              <param help="Downsampling Type" label="Type of reads downsampling to employ at a given locus" name="downsample_to_type_selector" type="select">
	                  <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
	                  <option value="downsample_to_coverage">Downsample by Coverage</option>
	              </param>
	              <when value="downsample_to_fraction">
	                  <param label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
	              </when>
	              <when value="downsample_to_coverage">
	                  <param label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
	              </when>
	          </conditional>
	      </when>
        </conditional>
        <param label="Type of BAQ calculation to apply in the engine" name="baq" type="select">
          <option selected="True" value="OFF">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param help="Default value is 40. 30 is perhaps better for whole genome call sets." label="BAQ gap open penalty (Phred Scaled)" name="baq_gap_open_penalty" type="float" value="40"/>
        <param falsevalue="" label="Use the original base quality scores from the OQ tag" name="use_original_qualities" truevalue="--useOriginalQualities" type="boolean"/>
        <param label="Value to be used for all base quality scores, when some are missing" name="default_base_qualities" type="integer" value="-1"/>
        <param label="How strict should we be with validation" name="validation_strictness" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param label="Interval merging rule" name="interval_merging" type="select">
          <option selected="True" value="ALL">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>
        
        <repeat name="read_group_black_list_repeat" title="Read group black list">
          <conditional name="read_group_black_list_type">
            <param label="Type of reads read group black list" name="read_group_black_list_type_selector" type="select">
              <option selected="True" value="file">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
	          <param format="txt" label="Read group black list file" name="read_group_black_list" type="data"/>
	        </when>
            <when value="text">
	          <param label="Read group black list tag:string" name="read_group_black_list" type="text" value="tag:string"/>
	        </when>
          </conditional>
        </repeat>
        
        <param checked="False" falsevalue="" label="Disable experimental low-memory sharding functionality." name="disable_experimental_low_memory_sharding" truevalue="--disable_experimental_low_memory_sharding" type="boolean"/>
        <param checked="False" falsevalue="" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" name="non_deterministic_random_seed" truevalue="--nonDeterministicRandomSeed" type="boolean"/>
        
      </when>
    </conditional>
    
  </inputs>
  <outputs>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="vcf" name="input_variant" value="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf"/>
          <param name="dbsnp_rod_bind_type_selector" value="set_dbsnp"/>
          <param ftype="vcf" name="dbsnp_input_rod" value="gatk/fake_phiX_variant_locations.vcf"/>
          <param name="warn_on_errors" value="True"/>
          <param name="do_not_validate_filtered_records"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <output compare="contains" file="gatk/gatk_validate_variants/gatk_validate_variants_out_1.log.contains" name="output_log"/>
      </test>
  </tests>
  <help>
**What it does**

Validates a variants file.

For more information on using the ValidateVariants module, see this `tool specific page &lt;http://www.broadinstitute.org/gsa/wiki/index.php/VariantValidator&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Best_Practice_Variant_Detection_with_the_GATK_v3&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Frequently_Asked_Questions&gt;`_.

------

**Inputs**

GenomeAnalysisTK: ValidateVariants accepts variant files as input.


**Outputs**

The output is a log of variant validation.


Go `here &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Input_files_for_the_GATK&gt;`_ for details on GATK file formats.

-------

**Settings**::

 doNotValidateFilteredRecords    should we skip validation on filtered records?
 warnOnErrors                    should we just emit warnings on errors instead of terminating the run?

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

If you use this tool in Galaxy, please cite Blankenberg D, et al. *In preparation.*

  </help>
</tool>