<tool id="condor_gatk_unified_genotyper" name="Unified Genotyper (via Condor)" version="GATK: 1.4">
  <description>SNP and indel caller</description>
  <requirements>
      <requirement type="package" version="1.4">gatk</requirement>
  </requirements>
  <command interpreter="python">condor_run.py
    ${GALAXY_DATA_INDEX_DIR}/../tools/gatk-condor/gatk_wrapper.py
   --max_jvm_heap_fraction &quot;1&quot;
   --stdout &quot;${output_log}&quot;
   #for $i, $input_bam in enumerate( $reference_source.input_bams ):
       -d &quot;-I&quot; &quot;${input_bam.input_bam}&quot; &quot;${input_bam.input_bam.ext}&quot; &quot;gatk_input_${i}&quot;
       -d &quot;&quot; &quot;${input_bam.input_bam.metadata.bam_index}&quot; &quot;bam_index&quot; &quot;gatk_input_${i}&quot; ##hardcode galaxy ext type as bam_index
   #end for
   -p 'java 
    -jar &quot;${GALAXY_DATA_INDEX_DIR}/shared/jars/gatk/GenomeAnalysisTK.jar&quot;
    -T &quot;UnifiedGenotyper&quot;
    --num_threads 4 ##hard coded, for now
    --out &quot;${output_vcf}&quot;
    --metrics_file &quot;${output_metrics}&quot;
    -et &quot;NO_ET&quot; ##ET no phone home
    ##-log &quot;${output_log}&quot; ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
    --genotype_likelihoods_model &quot;${genotype_likelihoods_model}&quot;
    --standard_min_confidence_threshold_for_calling &quot;${standard_min_confidence_threshold_for_calling}&quot;
    --standard_min_confidence_threshold_for_emitting &quot;${standard_min_confidence_threshold_for_emitting}&quot;
   '
    #set $rod_binding_names = dict()
    #for $rod_binding in $rod_bind:
        #if str( $rod_binding.rod_bind_type.rod_bind_type_selector ) == 'custom':
            #set $rod_bind_name = $rod_binding.rod_bind_type.custom_rod_name
        #else
            #set $rod_bind_name = $rod_binding.rod_bind_type.rod_bind_type_selector
        #end if
        #set $rod_binding_names[$rod_bind_name] = $rod_binding_names.get( $rod_bind_name, -1 ) + 1
        -d &quot;--dbsnp:${rod_bind_name},%(file_type)s&quot; &quot;${rod_binding.rod_bind_type.input_rod}&quot; &quot;${rod_binding.rod_bind_type.input_rod.ext}&quot; &quot;input_${rod_bind_name}_${rod_binding_names[$rod_bind_name]}&quot;
    #end for
   
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree &quot;${pedigree.pedigree_file}&quot;'
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString &quot;${pedigree_string.pedigree_string}&quot;'
        #end for
        -p '--pedigreeValidationType &quot;${gatk_param_type.pedigree_validation_type}&quot;'
        #for $read_filter in $gatk_param_type.read_filter:
            -p '--read_filter &quot;${read_filter.read_filter_type.read_filter_type_selector}&quot;
            ###raise Exception( str( dir( $read_filter ) ) )
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ &quot;__current_case__&quot;, &quot;read_filter_type_selector&quot; ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        ${param}
                    #else:
                        --${name} &quot;${param}&quot;
                    #end if
                #end if
            #end for
            '
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d &quot;--intervals&quot; &quot;${input_intervals.input_intervals}&quot; &quot;${input_intervals.input_intervals.ext}&quot; &quot;input_intervals_${interval_count}&quot;
        #end for
        
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d &quot;--excludeIntervals&quot; &quot;${input_intervals.input_exclude_intervals}&quot; &quot;${input_intervals.input_exclude_intervals.ext}&quot; &quot;input_exlude_intervals_${interval_count}&quot;
        #end for

        -p '--interval_set_rule &quot;${gatk_param_type.interval_set_rule}&quot;'
        
        -p '--downsampling_type &quot;${gatk_param_type.downsampling_type.downsampling_type_selector}&quot;'
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != &quot;NONE&quot;:
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} &quot;${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}&quot;'
        #end if
        -p '
        --baq &quot;${gatk_param_type.baq}&quot;
        --baqGapOpenPenalty &quot;${gatk_param_type.baq_gap_open_penalty}&quot;
        ${gatk_param_type.use_original_qualities}
        --defaultBaseQualities &quot;${gatk_param_type.default_base_qualities}&quot;
        --validation_strictness &quot;${gatk_param_type.validation_strictness}&quot;
        --interval_merging &quot;${gatk_param_type.interval_merging}&quot;
        ${gatk_param_type.disable_experimental_low_memory_sharding}
        ${gatk_param_type.non_deterministic_random_seed}
        '
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == &quot;file&quot;:
                -d &quot;--read_group_black_list&quot; &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot; &quot;txt&quot; &quot;input_read_group_black_list_${rg_black_list_count}&quot;
            #else
                -p '--read_group_black_list &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot;'
            #end if
        #end for
    #end if
    
    #if $reference_source.reference_source_selector == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input&quot;
    #end if
    ##end standard gatk options
    ##start analysis specific options
    #if $analysis_param_type.analysis_param_type_selector == &quot;advanced&quot;:
        -p '
        --p_nonref_model &quot;${analysis_param_type.p_nonref_model}&quot;
        --heterozygosity &quot;${analysis_param_type.heterozygosity}&quot;
        --pcr_error_rate &quot;${analysis_param_type.pcr_error_rate}&quot;
        --genotyping_mode &quot;${analysis_param_type.genotyping_mode_type.genotyping_mode}&quot;
        #if str( $analysis_param_type.genotyping_mode_type.genotyping_mode ) == 'GENOTYPE_GIVEN_ALLELES':
            --alleles &quot;${analysis_param_type.genotyping_mode_type.input_alleles_rod}&quot;
        #end if
        --output_mode &quot;${analysis_param_type.output_mode}&quot;
        ${analysis_param_type.compute_SLOD}
        --min_base_quality_score &quot;${analysis_param_type.min_base_quality_score}&quot;
        --max_deletion_fraction &quot;${analysis_param_type.max_deletion_fraction}&quot;
        --max_alternate_alleles &quot;${analysis_param_type.max_alternate_alleles}&quot;
        --min_indel_count_for_genotyping &quot;${analysis_param_type.min_indel_count_for_genotyping}&quot;
        --indel_heterozygosity &quot;${analysis_param_type.indel_heterozygosity}&quot;
        --indelGapContinuationPenalty &quot;${analysis_param_type.indelGapContinuationPenalty}&quot;
        --indelGapOpenPenalty &quot;${analysis_param_type.indelGapOpenPenalty}&quot;
        --indelHaplotypeSize &quot;${analysis_param_type.indelHaplotypeSize}&quot;
        ${analysis_param_type.doContextDependentGapPenalties}
        #if str( $analysis_param_type.annotation ) != &quot;None&quot;:
            #for $annotation in str( $analysis_param_type.annotation.fields.gatk_value ).split( ','):
                --annotation &quot;${annotation}&quot;
            #end for
        #end if
        #for $additional_annotation in $analysis_param_type.additional_annotations:
            --annotation &quot;${additional_annotation.additional_annotation_name}&quot;
        #end for
        #if str( $analysis_param_type.group ) != &quot;None&quot;:
            #for $group in str( $analysis_param_type.group ).split( ','):
                --group &quot;${group}&quot;
            #end for
        #end if
        #if str( $analysis_param_type.exclude_annotations ) != &quot;None&quot;:
            #for $annotation in str( $analysis_param_type.exclude_annotations.fields.gatk_value ).split( ','):
                --excludeAnnotation &quot;${annotation}&quot;
            #end for
        #end if
        '
##        #if str( $analysis_param_type.snpEff_rod_bind_type.snpEff_rod_bind_type_selector ) == 'set_snpEff':
##            -p '--annotation &quot;SnpEff&quot;'
##            -d &quot;--snpEffFile:${analysis_param_type.snpEff_rod_bind_type.snpEff_rod_name},%(file_type)s&quot; &quot;${analysis_param_type.snpEff_rod_bind_type.snpEff_input_rod}&quot; &quot;${analysis_param_type.snpEff_rod_bind_type.snpEff_input_rod.ext}&quot; &quot;input_snpEff_${analysis_param_type.snpEff_rod_bind_type.snpEff_rod_name}&quot;
##        #else:
##            -p '--excludeAnnotation &quot;SnpEff&quot;'
##        #end if
        ${analysis_param_type.multiallelic}
    #end if
  </command>
  <inputs>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <repeat min="1" name="input_bams" title="Sample BAM file">
            <param format="bam" label="BAM file" name="input_bam" type="data">
              <validator type="unspecified_build"/>
              <validator check="bam_index" message="Metadata missing, click the pencil icon in the history item and use the auto-detect feature to correct this issue." type="metadata"/>
              <validator message="Sequences are not currently available for the specified build." metadata_column="dbkey" metadata_name="dbkey" table_name="gatk_picard_indexes" type="dataset_metadata_in_data_table"/> <!-- fixme!!! this needs to be a select -->
            </param>
        </repeat>
        <param label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk_picard_indexes">
                <filter column="3" type="sort_by"/>

            <!-- <filter type="data_meta" key="dbkey" ref="input_bam" column="dbkey"/> does not yet work in a repeat...--> 
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <repeat min="1" name="input_bams" title="Sample BAM file">
            <param format="bam" label="BAM file" name="input_bam" type="data">
              <validator check="bam_index" message="Metadata missing, click the pencil icon in the history item and use the auto-detect feature to correct this issue." type="metadata"/>
            </param>
        </repeat>
        <param format="fasta" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    
    <repeat name="rod_bind" title="Binding for reference-ordered data">
        <conditional name="rod_bind_type">
	      <param label="Binding Type" name="rod_bind_type_selector" type="select">
	        <option selected="True" value="dbsnp">dbSNP</option>
	        <option value="snps">SNPs</option>
	        <option value="indels">INDELs</option>
	        <option value="custom">Custom</option>
	      </param>
          <when value="dbsnp">
              <param format="vcf" label="ROD file" name="input_rod" type="data"/>
          </when>
          <when value="snps">
              <param format="vcf" label="ROD file" name="input_rod" type="data"/>
          </when>
          <when value="indels">
              <param format="vcf" label="ROD file" name="input_rod" type="data"/>
          </when>
          <when value="custom">
              <param label="ROD Name" name="custom_rod_name" type="text" value="Unknown"/>
              <param format="vcf" label="ROD file" name="input_rod" type="data"/>
          </when>
        </conditional>
    </repeat>
    
    <param label="Genotype likelihoods calculation model to employ" name="genotype_likelihoods_model" type="select">
      <option selected="True" value="BOTH">BOTH</option>
      <option value="SNP">SNP</option>
      <option value="INDEL">INDEL</option>
    </param>
    
    <param label="The minimum phred-scaled confidence threshold at which variants not at 'trigger' track sites should be called" name="standard_min_confidence_threshold_for_calling" type="float" value="30.0"/>
    <param label="The minimum phred-scaled confidence threshold at which variants not at 'trigger' track sites should be emitted (and filtered if less than the calling threshold)" name="standard_min_confidence_threshold_for_emitting" type="float" value="30.0"/>

    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <repeat name="pedigree" title="Pedigree file">
            <param format="txt" label="Pedigree files for samples" name="pedigree_file" type="data"/>
        </repeat>
        <repeat name="pedigree_string_repeat" title="Pedigree string">
            <param label="Pedigree string for samples" name="pedigree_string" type="text" value=""/>
        </repeat>
        <param label="How strict should we be in validating the pedigree information" name="pedigree_validation_type" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat name="read_filter" title="Read Filter">
            <conditional name="read_filter_type">
		      <param label="Read Filter Type" name="read_filter_type_selector" type="select">
		        <option value="BadCigar">BadCigar</option>
		        <option value="BadMate">BadMate</option>
		        <option value="DuplicateRead">DuplicateRead</option>
		        <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
		        <option value="MalformedRead">MalformedRead</option>
		        <option value="MappingQuality">MappingQuality</option>
		        <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
		        <option value="MappingQualityZero">MappingQualityZero</option>
		        <option value="MateSameStrand">MateSameStrand</option>
		        <option value="MaxInsertSize">MaxInsertSize</option>
		        <option selected="True" value="MaxReadLength">MaxReadLength</option>
		        <option value="MissingReadGroup">MissingReadGroup</option>
		        <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
		        <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
		        <option value="Platform454">Platform454</option>
		        <option value="Platform">Platform</option>
		        <option value="PlatformUnit">PlatformUnit</option>
		        <option value="ReadGroupBlackList">ReadGroupBlackList</option>
		        <option value="ReadName">ReadName</option>
		        <option value="ReadStrand">ReadStrand</option>
		        <option value="ReassignMappingQuality">ReassignMappingQuality</option>
		        <option value="Sample">Sample</option>
		        <option value="SingleReadGroup">SingleReadGroup</option>
		        <option value="UnmappedRead">UnmappedRead</option>
		      </param>
	          <when value="BadCigar">
	              <!-- no extra options -->
	          </when>
	          <when value="BadMate">
	              <!-- no extra options -->
	          </when>
	          <when value="DuplicateRead">
	              <!-- no extra options -->
	          </when>
	          <when value="FailsVendorQualityCheck">
	              <!-- no extra options -->
	          </when>
	          <when value="MalformedRead">
	              <!-- no extra options -->
	          </when>
	          <when value="MappingQuality">
	              <param label="Minimum read mapping quality required to consider a read for calling" name="min_mapping_quality_score" type="integer" value="10"/>
	          </when>
	          <when value="MappingQualityUnavailable">
	              <!-- no extra options -->
	          </when>
	          <when value="MappingQualityZero">
	              <!-- no extra options -->
	          </when>
	          <when value="MateSameStrand">
	              <!-- no extra options -->
	          </when>
	          <when value="MaxInsertSize">
	              <param label="Discard reads with insert size greater than the specified value" name="maxInsertSize" type="integer" value="1000000"/>
	          </when>
	          <when value="MaxReadLength">
	              <param label="Max Read Length" name="maxReadLength" type="integer" value="76"/>
	          </when>
	          <when value="MissingReadGroup">
	              <!-- no extra options -->
	          </when>
	          <when value="NoOriginalQualityScores">
	              <!-- no extra options -->
	          </when>
	          <when value="NotPrimaryAlignment">
	              <!-- no extra options -->
	          </when>
	          <when value="Platform454">
	              <!-- no extra options -->
	          </when>
	          <when value="Platform">
	              <param label="Discard reads with RG:PL attribute containing this string" name="PLFilterName" type="text" value=""/>
	          </when>
	          <when value="PlatformUnit">
	              <!-- no extra options -->
	          </when>
	          <when value="ReadGroupBlackList">
	              <!-- no extra options -->
	          </when>
	          <when value="ReadName">
	              <param label="Filter out all reads except those with this read name" name="readName" type="text" value=""/>
	          </when>
	          <when value="ReadStrand">
	              <param falsevalue="" label="Discard reads on the forward strand" name="filterPositive" truevalue="--filterPositive" type="boolean"/>
	          </when>
	          <when value="ReassignMappingQuality">
	              <param label="Default read mapping quality to assign to all reads" name="default_mapping_quality" type="integer" value="60"/>
	          </when>
	          <when value="Sample">
	              <param label="The name of the sample(s) to keep, filtering out all others" name="sample_to_keep" type="text" value=""/>
	          </when>
	          <when value="SingleReadGroup">
	              <param label="The name of the read group to keep, filtering out all others" name="read_group_to_keep" type="integer" value="76"/>
	          </when>
	          <when value="UnmappedRead">
	              <!-- no extra options -->
	          </when>
            </conditional>
        </repeat>
        <repeat name="input_interval_repeat" title="Operate on Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_intervals" type="data"/>
        </repeat>
        <repeat name="input_exclude_interval_repeat" title="Exclude Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_exclude_intervals" type="data"/>
        </repeat>
        
        <param label="Interval set rule" name="interval_set_rule" type="select">
          <option selected="True" value="UNION">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        
        <conditional name="downsampling_type">
          <param help="Downsampling Type" label="Type of reads downsampling to employ at a given locus" name="downsampling_type_selector" type="select">
            <option selected="True" value="NONE">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
	          <!-- no more options here -->
	      </when>
          <when value="ALL_READS">
	          <conditional name="downsample_to_type">
	              <param help="Downsampling Type" label="Type of reads downsampling to employ at a given locus" name="downsample_to_type_selector" type="select">
	                  <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
	                  <option value="downsample_to_coverage">Downsample by Coverage</option>
	              </param>
	              <when value="downsample_to_fraction">
	                  <param label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
	              </when>
	              <when value="downsample_to_coverage">
	                  <param label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
	              </when>
	          </conditional>
	      </when>
          <when value="BY_SAMPLE">
	          <conditional name="downsample_to_type">
	              <param help="Downsampling Type" label="Type of reads downsampling to employ at a given locus" name="downsample_to_type_selector" type="select">
	                  <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
	                  <option value="downsample_to_coverage">Downsample by Coverage</option>
	              </param>
	              <when value="downsample_to_fraction">
	                  <param label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
	              </when>
	              <when value="downsample_to_coverage">
	                  <param label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
	              </when>
	          </conditional>
	      </when>
        </conditional>
        <param label="Type of BAQ calculation to apply in the engine" name="baq" type="select">
          <option selected="True" value="OFF">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param help="Default value is 40. 30 is perhaps better for whole genome call sets." label="BAQ gap open penalty (Phred Scaled)" name="baq_gap_open_penalty" type="float" value="40"/>
        <param falsevalue="" label="Use the original base quality scores from the OQ tag" name="use_original_qualities" truevalue="--useOriginalQualities" type="boolean"/>
        <param label="Value to be used for all base quality scores, when some are missing" name="default_base_qualities" type="integer" value="-1"/>
        <param label="How strict should we be with validation" name="validation_strictness" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param label="Interval merging rule" name="interval_merging" type="select">
          <option selected="True" value="ALL">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>
        
        <repeat name="read_group_black_list_repeat" title="Read group black list">
          <conditional name="read_group_black_list_type">
            <param label="Type of reads read group black list" name="read_group_black_list_type_selector" type="select">
              <option selected="True" value="file">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
	          <param format="txt" label="Read group black list file" name="read_group_black_list" type="data"/>
	        </when>
            <when value="text">
	          <param label="Read group black list tag:string" name="read_group_black_list" type="text" value="tag:string"/>
	        </when>
          </conditional>
        </repeat>
        
        <param checked="False" falsevalue="" label="Disable experimental low-memory sharding functionality." name="disable_experimental_low_memory_sharding" truevalue="--disable_experimental_low_memory_sharding" type="boolean"/>
        <param checked="False" falsevalue="" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" name="non_deterministic_random_seed" truevalue="--nonDeterministicRandomSeed" type="boolean"/>
        
      </when>
    </conditional>
    
    <conditional name="analysis_param_type">
      <param label="Basic or Advanced Analysis options" name="analysis_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <param label="Non-reference probability calculation model to employ" name="p_nonref_model" type="select">
          <option selected="True" value="EXACT">EXACT</option>
          <option value="GRID_SEARCH">GRID_SEARCH</option>
        </param>
        <param label="Heterozygosity value used to compute prior likelihoods for any locus" name="heterozygosity" type="float" value="1e-3"/>
        <param label="The PCR error rate to be used for computing fragment-based likelihoods" name="pcr_error_rate" type="float" value="1e-4"/>
        <conditional name="genotyping_mode_type">
          <param label="How to determine the alternate allele to use for genotyping" name="genotyping_mode" type="select">
            <option selected="True" value="DISCOVERY">DISCOVERY</option>
            <option value="GENOTYPE_GIVEN_ALLELES">GENOTYPE_GIVEN_ALLELES</option>
          </param>
          <when value="DISCOVERY">
            <!-- Do nothing here -->
          </when>
          <when value="GENOTYPE_GIVEN_ALLELES">
            <param format="vcf" label="Alleles ROD file" name="input_alleles_rod" type="data"/>
          </when>
        </conditional>
        <param label="Should we output confident genotypes (i.e. including ref calls) or just the variants?" name="output_mode" type="select">
          <option selected="True" value="EMIT_VARIANTS_ONLY">EMIT_VARIANTS_ONLY</option>
          <option value="EMIT_ALL_CONFIDENT_SITES">EMIT_ALL_CONFIDENT_SITES</option>
          <option value="EMIT_ALL_SITES">EMIT_ALL_SITES</option>
        </param>
        <param falsevalue="" label="Compute the SLOD" name="compute_SLOD" truevalue="--computeSLOD" type="boolean"/>
        <param label="Minimum base quality required to consider a base for calling" name="min_base_quality_score" type="integer" value="17"/>
        <param help="to disable, set to &lt; 0 or &gt; 1" label="Maximum fraction of reads with deletions spanning this locus for it to be callable" name="max_deletion_fraction" type="float" value="0.05"/>
        <param label="Maximum number of alternate alleles to genotype" name="max_alternate_alleles" type="integer" value="5"/>
        <param label="Minimum number of consensus indels required to trigger genotyping run" name="min_indel_count_for_genotyping" type="integer" value="5"/>
        <param help="1.0/8000==0.000125" label="Heterozygosity for indel calling" name="indel_heterozygosity" type="float" value="0.000125"/>
        <param label="Indel gap continuation penalty" name="indelGapContinuationPenalty" type="float" value="10.0"/>
        <param label="Indel gap open penalty" name="indelGapOpenPenalty" type="float" value="45.0"/>
        <param label="Indel haplotype size" name="indelHaplotypeSize" type="integer" value="80"/>
        <param falsevalue="" label="Vary gap penalties by context" name="doContextDependentGapPenalties" truevalue="--doContextDependentGapPenalties" type="boolean"/>
	    <param display="checkboxes" label="Annotation Types" multiple="True" name="annotation" type="select">
          <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
          <options from_data_table="gatk_annotations">
            <filter column="tools_valid_for" separator="," type="multiple_splitter"/>
            <filter column="tools_valid_for" type="static_value" value="UnifiedGenotyper"/>
          </options>
	    </param>
        <repeat name="additional_annotations" title="Additional annotation">
          <param label="Annotation name" name="additional_annotation_name" type="text" value=""/>
        </repeat>
<!--
        <conditional name="snpEff_rod_bind_type">
          <param name="snpEff_rod_bind_type_selector" type="select" label="Provide a snpEff reference-ordered data file">
            <option value="set_snpEff">Set snpEff</option>
            <option value="exclude_snpEff" selected="True">Don't set snpEff</option>
          </param>
          <when value="exclude_snpEff">
          </when>
          <when value="set_snpEff">
            <param name="snpEff_input_rod" type="data" format="vcf" label="ROD file" />
            <param name="snpEff_rod_name" type="hidden" value="snpEff" label="ROD Name"/>
          </when>
        </conditional>
-->
	    <param display="checkboxes" label="Annotation Interfaces/Groups" multiple="True" name="group" type="select">
            <option value="RodRequiringAnnotation">RodRequiringAnnotation</option>
            <option value="Standard">Standard</option>
            <option value="Experimental">Experimental</option>
            <option value="WorkInProgress">WorkInProgress</option>
            <option value="RankSumTest">RankSumTest</option>
	        <!-- <option value="none">none</option> -->
	    </param>
    <!--     <param name="family_string" type="text" value="" label="Family String"/> -->
        <param display="checkboxes" label="Annotations to exclude" multiple="True" name="exclude_annotations" type="select">
          <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
          <options from_data_table="gatk_annotations">
            <filter column="tools_valid_for" separator="," type="multiple_splitter"/>
            <filter column="tools_valid_for" type="static_value" value="UnifiedGenotyper"/>
          </options>
        </param>
        <param falsevalue="" label="Allow the discovery of multiple alleles (SNPs only)" name="multiallelic" truevalue="--multiallelic" type="boolean"/>
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data format="vcf" label="${tool.name} on ${on_string} (VCF)" name="output_vcf"/>
    <data format="txt" label="${tool.name} on ${on_string} (metrics)" name="output_metrics"/>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <trackster_conf/>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="bam" name="input_bam" value="gatk/gatk_table_recalibration/gatk_table_recalibration_out_1.bam"/>
          <param name="rod_bind_type_selector" value="dbsnp"/>
          <param ftype="vcf" name="input_rod" value="gatk/fake_phiX_variant_locations.vcf"/>
          <param name="standard_min_confidence_threshold_for_calling" value="0"/>
          <param name="standard_min_confidence_threshold_for_emitting" value="4"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <param name="analysis_param_type_selector" value="advanced"/>
          <param name="genotype_likelihoods_model" value="BOTH"/>
          <param name="p_nonref_model" value="EXACT"/>
          <param name="heterozygosity" value="0.001"/>
          <param name="pcr_error_rate" value="0.0001"/>
          <param name="genotyping_mode" value="DISCOVERY"/>
          <param name="output_mode" value="EMIT_ALL_CONFIDENT_SITES"/>
          <param name="compute_SLOD"/>
          <param name="min_base_quality_score" value="17"/>
          <param name="max_deletion_fraction" value="-1"/>
          <param name="min_indel_count_for_genotyping" value="2"/>
          <param name="indel_heterozygosity" value="0.000125"/>
          <param name="indelGapContinuationPenalty" value="10"/>
          <param name="indelGapOpenPenalty" value="3"/>
          <param name="indelHaplotypeSize" value="80"/>
          <param name="doContextDependentGapPenalties"/>
          <!-- <param name="annotation" value="" />
          <param name="group" value="" /> -->
          <output file="gatk/gatk_unified_genotyper/gatk_unified_genotyper_out_1.vcf" lines_diff="4" name="output_vcf"/> 
          <output file="gatk/gatk_unified_genotyper/gatk_unified_genotyper_out_1.metrics" name="output_metrics"/> 
          <output compare="contains" file="gatk/gatk_unified_genotyper/gatk_unified_genotyper_out_1.log.contains" name="output_log"/>
      </test>
  </tests>
  <help>
**What it does**

A variant caller which unifies the approaches of several disparate callers.  Works for single-sample and multi-sample data.  The user can choose from several different incorporated calculation models.

For more information on the GATK Unified Genotyper, see this `tool specific page &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Unified_genotyper&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Best_Practice_Variant_Detection_with_the_GATK_v3&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Frequently_Asked_Questions&gt;`_.

------

**Inputs**

GenomeAnalysisTK: UnifiedGenotyper accepts an aligned BAM input file.


**Outputs**

The output is in VCF format.


Go `here &lt;http://www.broadinstitute.org/gsa/wiki/index.php/Input_files_for_the_GATK&gt;`_ for details on GATK file formats.

-------

**Settings**::

 genotype_likelihoods_model                        Genotype likelihoods calculation model to employ -- BOTH is the default option, while INDEL is also available for calling indels and SNP is available for calling SNPs only (SNP|INDEL|BOTH)
 p_nonref_model                                    Non-reference probability calculation model to employ -- EXACT is the default option, while GRID_SEARCH is also available. (EXACT|GRID_SEARCH)
 heterozygosity                                    Heterozygosity value used to compute prior likelihoods for any locus
 pcr_error_rate                                    The PCR error rate to be used for computing fragment-based likelihoods
 genotyping_mode                                   Should we output confident genotypes (i.e. including ref calls) or just the variants? (DISCOVERY|GENOTYPE_GIVEN_ALLELES)
 output_mode                                       Should we output confident genotypes (i.e. including ref calls) or just the variants? (EMIT_VARIANTS_ONLY|EMIT_ALL_CONFIDENT_SITES|EMIT_ALL_SITES)
 standard_min_confidence_threshold_for_calling     The minimum phred-scaled confidence threshold at which variants not at 'trigger' track sites should be called
 standard_min_confidence_threshold_for_emitting    The minimum phred-scaled confidence threshold at which variants not at 'trigger' track sites should be emitted (and filtered if less than the calling threshold)
 noSLOD                                            If provided, we will not calculate the SLOD
 min_base_quality_score                            Minimum base quality required to consider a base for calling
 max_deletion_fraction                             Maximum fraction of reads with deletions spanning this locus for it to be callable [to disable, set to &lt; 0 or &gt; 1; default:0.05]
 min_indel_count_for_genotyping                    Minimum number of consensus indels required to trigger genotyping run
 indel_heterozygosity                              Heterozygosity for indel calling
 indelGapContinuationPenalty                       Indel gap continuation penalty
 indelGapOpenPenalty                               Indel gap open penalty
 indelHaplotypeSize                                Indel haplotype size
 doContextDependentGapPenalties                    Vary gap penalties by context
 indel_recal_file                                  Filename for the input covariates table recalibration .csv file - EXPERIMENTAL, DO NO USE
 indelDebug                                        Output indel debug info
 out                                               File to which variants should be written
 annotation                                        One or more specific annotations to apply to variant calls
 group                                             One or more classes/groups of annotations to apply to variant calls

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

If you use this tool in Galaxy, please cite Blankenberg D, et al. *In preparation.*

  </help>
</tool>