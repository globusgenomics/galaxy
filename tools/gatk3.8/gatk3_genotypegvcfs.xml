<tool description="merges gVCF records" id="gatk3.8_genotypegvcfs" name="GenotypeGVCFs" version="GATK3.8: GenomeAnalysisTK-3.8-0">
  <description/>
  <requirements>
      <requirement type="package" version="1.8.0">java</requirement>
      <requirement type="package" version="3.8">gatk3</requirement>
  </requirements>
  <macros>
    <import>gatk_macros.xml</import>
  </macros>
  <command interpreter="python">gatk3_wrapper.py
   --max_jvm_heap &quot;240g&quot;
   --stdout &quot;${output_log}&quot;

   #if str($reference_source.reference_source_selector) == "cached":
     #for $i, $input_format in enumerate( $reference_source.input_variants ):
       #if str($input_format.input_format_selector.input_format) == "galaxy":
         -d "--variant" "${input_format.input_format_selector.input_variant}" "${input_format.input_format_selector.input_variant.ext}" "input_format_${i}"
       #else:
         #import os, glob
         #if str($input_format.input_format_selector.input_format) == "swift":
           #set $variant_files = glob.glob(str( $input_format.input_format_selector.swift_input_file.extra_files_path) + "/*.vcf"  )
         #else:
           #set $variant_files = glob.glob(str( $input_format.input_format_selector.ref_vcf_file.fields.path) + "/*/*.vcf"  )
         #end if
         #set $i = 0
         #for $input_variant in $variant_files:
           #set $variant_ext = "vcf"
           -d "--variant" "$input_variant" "$variant_ext" "input_variant_set_${i}"
           #set $i = $i + 1
         #end for
       #end if
     #end for
   #end if
   -p 'java 
    -jar &quot;\$GATK3_PATH/GenomeAnalysisTK.jar&quot;
    -T &quot;GenotypeGVCFs&quot;
    --disable_auto_index_creation_and_locking_when_reading_rods 
    --out &quot;${output_variants}&quot;
    \$GATK3_SITE_OPTIONS
    \$GATK3_NUM_THREADS
    --num_threads 32 ##hard coded, for now
    ##-et &quot;NO_ET&quot; -K &quot;\$GATK3_BASE/gatk3_key_file&quot; ##ET no phone home
    ##-log &quot;${output_log}&quot; ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
    #if str($dbsnp) != 'None':
        --dbsnp &quot;${dbsnp}&quot;
    #end if
    #if str($inv) == 'true':
        -inv
    #end if
    '
    ##
   
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #include source=$standard_gatk_options#
    #end if

    #if $reference_source.reference_source_selector == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input_reference_fasta&quot;
        --picard_jar &quot;/mnt/galaxyTools/tools/picard/1.121/CreateSequenceDictionary.jar&quot;
     #for $i, $input_format in enumerate( $reference_source.input_variants ):
       #if str($input_format.input_format_selector.input_format) == "galaxy":
         -d "--variant" "${input_format.input_format_selector.input_variant}" "${input_format.input_format_selector.input_variant.ext}" "input_format_${i}"
       #else:
         #import os, glob
         #if str($input_format.input_format_selector.input_format) == "swift":
           #set $variant_files = glob.glob(str( $input_format.input_format_selector.swift_input_file.extra_files_path) + "/*.vcf"  )
         #else:
           #set $variant_files = glob.glob(str( $input_format.input_format_selector.ref_vcf_file.fields.path) + "/*/*.vcf"  )
         #end if
         #set $i = 0
         #for $input_variant in $variant_files:
           #set $variant_ext = "vcf"
           -d "--variant" "$input_variant" "$variant_ext" "input_variant_set_${i}"
           #set $i = $i + 1
         #end for
       #end if
     #end for
    #end if
    ##end standard gatk options
    
  </command>
  <inputs>
    
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <repeat help="Records will be prioritized in the order that you list them here (-V,--variant &amp;lt;variant&amp;gt;)" min="1" name="input_variants" title="Variants to Merge">
          <conditional name="input_format_selector">
            <param help="You can specify VCF files in this history or provide a file that points to a directory where VCFs are." label="How will you provide inputs" name="input_format" type="select">
              <option selected="true" value="galaxy">VCF files are in the history</option>
              <option value="swift">File output from Swift</option>
              <option value="reference">Use VCF from reference set</option>
            </param>
            <when value="galaxy">
              <param format="vcf" label="Input variant file" name="input_variant" type="data"/>
            </when>
            <when value="swift">
              <param help="Must be in tabular format with column VCF separated by tab and its value." label="Input file containing path to VCF files" name="swift_input_file" type="data"/>
            </when>
            <when value="reference">
              <param help="VCFs are stored in a set to be used" label="Select a reference VCF list" name="ref_vcf_file" type="select">
                <options from_data_table="gatk3_reference_vcf_set">
                </options>
              </param>
            </when>
          </conditional>
        </repeat>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
            <!-- <filter type="data_meta" key="dbkey" ref="input_variants.input_variant" column="dbkey"/> -->
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
       <repeat help="Records will be prioritized in the order that you list them here (-V,--variant &amp;lt;variant&amp;gt;)" min="1" name="input_variants" title="Variants to Merge">
        <conditional name="input_format_selector">
          <param help="You can specify VCF files in this history or provide a file that points to a directory where VCFs are." label="How will you provide inputs" name="input_format" type="select">
            <option selected="true" value="galaxy">VCF files are in the history</option>
            <option value="swift">File output from Swift</option>
            <option value="reference">Use VCF from reference set</option>
          </param>
          <when value="galaxy">
              <param format="vcf" label="Input variant file" name="input_variant" type="data"/>
          </when>
          <when value="swift">
            <param help="Must be in tabular format with column VCF separated by tab and its value." label="Input file containing path to VCF files" name="swift_input_file" type="data"/>
          </when>
          <when value="reference">
            <param help="VCFs are stored in a set to be used" label="Select a reference VCF list" name="ref_vcf_file" type="select">
              <options from_data_table="gatk3_reference_vcf_set">
              </options>
            </param>
          </when>
        </conditional>          
       </repeat>
       <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>

    <param display="checkboxes" help="-A,--annotation &amp;lt;annotation&amp;gt;" label="Annotation Types" multiple="True" name="annotation" type="select">
      <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
      <options from_data_table="gatk3_annotations">
        <filter column="tools_valid_for" separator="," type="multiple_splitter"/>
        <filter column="tools_valid_for" type="static_value" value="UnifiedGenotyper"/>
      </options>
    </param>
    <repeat help="-A,--annotation &amp;lt;annotation&amp;gt;" name="additional_annotations" title="Additional annotation">
      <param label="Annotation name" name="additional_annotation_name" type="text" value=""/>
    </repeat>
    <param format="vcf" help="--dbsnp / -D  dbSNP file" label="dbsnp" name="dbsnp" optional="true" type="data"/>
    <param checked="false" falsevalue="" label="Include loci found to be non-variant after the combining procedure" name="inv" truevalue="true" type="boolean"/>

    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <expand macro="advanced_options" />
      </when>
    </conditional>
    
  </inputs>
  <outputs>
    <data format="vcf" label="${tool.name} on ${on_string} (variants)" name="output_variants"/>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="vcf" name="input_variant" value="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf"/>
          <param name="genotype_merge_option" value="PRIORITIZE"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <output file="gatk/gatk_variant_combine/gatk_variant_combine_out_1.vcf" lines_diff="4" name="output_variants"/>
          <output compare="contains" file="gatk/gatk_variant_combine/gatk_variant_combine_out_1.log.contains" name="output_log"/>
      </test>
  </tests>
  <help>
**What it does**

Combines VCF records from different sources; supports both full merges and set unions. Merge: combines multiple records into a single one; if sample names overlap then they are uniquified. Union: assumes each rod represents the same set of samples (although this is not enforced); using the priority list (if provided), emits a single record instance at every position represented in the rods.

For more information on using the CombineVariants module, see this `tool specific page &lt;http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_variantutils_CombineVariants.html&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gatk/guide/topic?name=best-practices&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gatk/guide/topic?name=faqs&gt;`_.

------

**Inputs**

GenomeAnalysisTK: CombineVariants accepts variant files as input.

------

**Outputs**

The output is a combined vcf file.


Go `here &lt;http://www.broadinstitute.org/gatk/guide/topic?name=intro&gt;`_ for details on GATK file formats.

-------

**Settings**::

 out                         File to which variants should be written
 genotypemergeoption         How should we merge genotype records for samples shared across the ROD files? (UNIQUIFY|PRIORITIZE|UNSORTED|REQUIRE_UNIQUE)
 filteredrecordsmergetype    How should we deal with records seen at the same site in the VCF, but with different FILTER fields? KEEP_IF_ANY_UNFILTERED PASSes the record if any record is unfiltered, KEEP_IF_ALL_UNFILTERED requires all records to be unfiltered (KEEP_IF_ANY_UNFILTERED|KEEP_IF_ALL_UNFILTERED)
 rod_priority_list           When taking the union of variants containing genotypes: a comma-separated string describing the priority ordering for the genotypes as far as which record gets emitted; a complete priority list MUST be provided
 printComplexMerges          Print out interesting sites requiring complex compatibility merging
 filteredAreUncalled         If true, then filtered VCFs are treated as uncalled, so that filtered set annotation don't appear in the combined VCF
 minimalVCF                  If true, then the output VCF will contain no INFO or genotype INFO field
 setKey                      Key, by default set, in the INFO key=value tag emitted describing which set the combined VCF record came from.  Set to null if you don't want the set field emitted.
 assumeIdenticalSamples      If true, assume input VCFs have identical sample sets and disjoint calls so that one can simply perform a merge sort to combine the VCFs into one, drastically reducing the runtime.
 minimumN                    Combine variants and output site only if variant is present in at least N input files.

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

Please also site `McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res. 20:1297-303. Epub 2010 Jul 19. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20644199&gt;`_

If you use this tool in Galaxy, please cite `Blankenberg D, Von Kuster G, Coraor N, Ananda G, Lazarus R, Mangan M, Nekrutenko A, Taylor J. Galaxy: a web-based genome analysis tool for experimentalists. Curr Protoc Mol Biol. 2010 Jan;Chapter 19:Unit 19.10.1-21. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20069535&gt;`_

  </help>
</tool>
