<tool id="gatk3.8_haplotype_caller_swift" name="Haplotype Caller using Swift" version="GATK3.8: GenomeAnalysisTK-3.8-0;
 SAMTOOLS: 1.1; JAVA: jre1.7.0_51">
  <description>Call SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region</description>
  <requirements>
      <requirement type="package">gatk3</requirement>
      <requirement type="package" version="0.1.18">samtools</requirement>
      <requirement type="package">java</requirement>
      <requirement type="package">ruby</requirement>
  </requirements>
  <command interpreter="python">gatk3_swift_wrapper.py --gatk_options 'export PYTHONPATH=/mnt/galaxyTools/tools/pymodules/python2.7/lib/python:/opt/galaxy/lib:\$PYTHONPATH;source /mnt/galaxyTools/tools/pymodules/python2.7/env.sh; source /mnt/galaxyTools/tools/java/jre1.7.0_51/env.sh; python /opt/galaxy/tools/gatk3/gatk3_wrapper.py'
   --gatk_options &quot;-d \&quot;-I\&quot; \&quot;INPUT_BAM\&quot; \&quot;bam\&quot; \&quot;gatk_input\&quot;&quot;
   --gatk_options &quot;--max_jvm_heap_fraction 1&quot;
   --input_dir ${reference_source.input_directory_path}
   --output_dir $output_vcf.extra_files_path
   --output_log $output_vcf
   --gatk_options &quot;-p \&quot;/mnt/galaxyTools/tools/java/jre1.7.0_51/bin/java 
    -jar \$GATK3_PATH/GenomeAnalysisTK.jar
    -T HaplotypeCaller
    -o OUTPUT_VCF
    ## \$GATK3_SITE_OPTIONS
    ## \$GATK3_NUM_THREADS
    -nct 8 ##not supported yet
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R ${reference_source.ref_file.fields.path}
    #end if
    #if str($input_recal) != 'None':
        --BQSR ${input_recal}
    #end if
   \&quot;&quot;
    ##start standard gatk option
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #for $pedigree in $gatk_param_type.pedigree:
            --gatk_options &quot;-p \&quot;--pedigree ${pedigree.pedigree_file}\&quot;&quot;
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            --gatk_options &quot;-p \&quot;--pedigreeString ${pedigree_string.pedigree_string}\&quot;&quot;
        #end for
        --gatk_options &quot;-p \&quot;--pedigreeValidationType ${gatk_param_type.pedigree_validation_type}\&quot;&quot;
        #set default_read_filters = ['DuplicateRead','FailsVendorQualityCheck','NotPrimaryAlignment','MalformedRead','UnmappedRead']
        #for $read_filter in $gatk_param_type.read_filter:
            --gatk_options &quot;-p \&quot;
            #if $read_filter.read_filter_type.read_filter_type_selector not in $default_read_filters:
                --read_filter ${read_filter.read_filter_type.read_filter_type_selector}
            #end if
            ###raise Exception( str( dir( $read_filter ) ) )
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ &quot;__current_case__&quot;, &quot;read_filter_type_selector&quot; ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        ${param}
                    #else:
                        --${name} ${param}
                    #end if
                #end if
            #end for
            \&quot;&quot;
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            --gatk_options &quot;-d \&quot;--intervals\&quot; \&quot;${input_intervals.input_intervals}\&quot; \&quot;${input_intervals.input_intervals.ext}\&quot; \&quot;input_intervals_${interval_count}\&quot;&quot;
        #end for
        
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            --gatk_options &quot;-d \&quot;--excludeIntervals\&quot; \&quot;${input_intervals.input_exclude_intervals}\&quot; \&quot;${input_intervals.input_exclude_intervals.ext}\&quot; \&quot;input_exlude_intervals_${interval_count}\&quot;&quot;
        #end for
        #if str( $gatk_param_type.interval_set_rule ) != &quot;NONE&quot;:
            --gatk_options &quot;-p \&quot;--interval_set_rule ${gatk_param_type.interval_set_rule}\&quot;&quot;
        #end if

        --gatk_options &quot;-p \&quot;--downsampling_type ${gatk_param_type.downsampling_type.downsampling_type_selector}\&quot;&quot;
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != &quot;NONE&quot;:
            --gatk_options &quot;-p \&quot;--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} ${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}\&quot;&quot;
        #end if
        --gatk_options &quot;-p \&quot;
        --baq ${gatk_param_type.baq}
        --baqGapOpenPenalty ${gatk_param_type.baq_gap_open_penalty}
        ${gatk_param_type.use_original_qualities}
        --defaultBaseQualities ${gatk_param_type.default_base_qualities}
        --validation_strictness ${gatk_param_type.validation_strictness}
        #if str( $gatk_param_type.interval_merging ) != &quot;NONE&quot;:
            --interval_merging ${gatk_param_type.interval_merging}
        #end if
        ${gatk_param_type.fix_misencoded_quality_scores}
        ${gatk_param_type.non_deterministic_random_seed}
        \&quot;&quot;
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == &quot;file&quot;:
                --gatk_options &quot;-d \&quot;--read_group_black_list\&quot; \&quot;${rg_black_list.read_group_black_list_type.read_group_black_list}\&quot; \&quot;txt\&quot; \&quot;input_read_group_black_list_${rg_black_list_count}\&quot;&quot;
            #else
                --gatk_options &quot;-p \'--read_group_black_list \&quot;${rg_black_list.read_group_black_list_type.read_group_black_list}\&quot;\'&quot;
            #end if
        #end for
    #end if
    
    #if str( $reference_source.reference_source_selector ) == &quot;history&quot;:
        --gatk_options &quot;-d \&quot;-R\&quot; \&quot;${reference_source.ref_file}\&quot; \&quot;${reference_source.ref_file.ext}\&quot; \&quot;gatk_input_reference_fasta\&quot;&quot;
        --gatk_options &quot;--picard_jar \&quot;/mnt/galaxyTools/tools/picard/1.121/CreateSequenceDictionary.jar\&quot;&quot;
    #end if
    ##end standard gatk options
    
    ##start analysis specific options
    #if $analysis_param_type.analysis_param_type_selector == &quot;advanced&quot;:
        --gatk_options &quot;-p \&quot;
        --emitRefConfidence $analysis_param_type.emitRefConfidence
        #if $analysis_param_type.emitRefConfidence.__str__ == &quot;GVCF&quot;:
           -variant_index_type LINEAR -variant_index_parameter 128000
        #end if
        #if $analysis_param_type.p_nonref_model.__str__ != &quot;None&quot; and len($analysis_param_type.p_nonref_model.__str__) &gt; 0:
          --p_nonref_model $analysis_param_type.p_nonref_model
        #end if
        #if $analysis_param_type.heterozygosity.__str__.strip() != '':
            --heterozygosity $analysis_param_type.heterozygosity
        #end if
        #if str( $analysis_param_type.genotyping_mode_type.genotyping_mode ) != &quot;NONE&quot;:
            --genotyping_mode ${analysis_param_type.genotyping_mode_type.genotyping_mode}
        #end if
        #if str( $analysis_param_type.genotyping_mode_type.genotyping_mode ) == 'GENOTYPE_GIVEN_ALLELES':
            --alleles ${analysis_param_type.genotyping_mode_type.input_alleles_rod}
        #end if
        #if str( $analysis_param_type.output_mode ) != &quot;NONE&quot;:
            --output_mode ${analysis_param_type.output_mode}
        #end if
        ## files
        #if str($analysis_param_type.activeRegionIn) != 'None':
            --activeRegionIn $analysis_param_type.activeRegionIn
        #end if
        #if str($analysis_param_type.comp) != 'None':
            --comp $analysis_param_type.comp
        #end if
        #if str($analysis_param_type.dbsnp) != 'None':
            --dbsnp $analysis_param_type.dbsnp
        #end if
        ##  
        #if str( $analysis_param_type.annotation ) != &quot;None&quot;:
            #for $annotation in str( $analysis_param_type.annotation.fields.gatk_value ).split( ','):
                --annotation ${annotation}
            #end for
        #end if
        #for $additional_annotation in $analysis_param_type.additional_annotations:
            --annotation ${additional_annotation.additional_annotation_name}
        #end for
        #if str( $analysis_param_type.group ) != &quot;None&quot;:
            #for $group in str( $analysis_param_type.group ).split( ','):
                --group ${group}
            #end for
        #end if
        #if str( $analysis_param_type.exclude_annotations ) != &quot;None&quot;:
            #for $annotation in str( $analysis_param_type.exclude_annotations.fields.gatk_value ).split( ','):
                --excludeAnnotation ${annotation}
            #end for
        #end if

        ## value setings
        #if $analysis_param_type.contamination_fraction_to_filter.__str__.strip() != '':
            --contamination_fraction_to_filter $analysis_param_type.contamination_fraction_to_filter
        #end if
        ###if $analysis_param_type.downsampleRegion.__str__.strip() != '':
        ##    --downsampleRegion $analysis_param_type.downsampleRegion
        ###end if
        #if $analysis_param_type.minPruning.__str__.strip() != '':
            --minPruning $analysis_param_type.minPruning
        #end if
        #if $analysis_param_type.standard_min_confidence_threshold_for_calling.__str__.strip() != '':
            --standard_min_confidence_threshold_for_calling $analysis_param_type.standard_min_confidence_threshold_for_calling
        #end if
        #if $analysis_param_type.standard_min_confidence_threshold_for_emitting.__str__.strip() != '':
            --standard_min_confidence_threshold_for_emitting $analysis_param_type.standard_min_confidence_threshold_for_emitting
        #end if
        #if $analysis_param_type.gcpHMM.__str__.strip() != '':
            --gcpHMM $analysis_param_type.gcpHMM
        #end if
        #if $analysis_param_type.max_alternate_alleles.__str__.strip() != '':
            --max_alternate_alleles $analysis_param_type.max_alternate_alleles
        #end if
        ## mode selections
        ###if $analysis_param_type.genotyping_mode_type.genotyping_mode.__str__ != &quot;None&quot; and len($analysis_param_type.genotyping_mode_type.genotyping_mode.__str__) &gt; 0:
        ##  --genotyping_mode $analysis_param_type.genotyping_mode_type.genotyping_mode
        ###end if
        #if $analysis_param_type.pair_hmm_implementation.__str__ != &quot;None&quot; and len($analysis_param_type.pair_hmm_implementation.__str__) &gt; 0:
          --pair_hmm_implementation $analysis_param_type.pair_hmm_implementation
        #end if
        ## optional outputs
        #if $analysis_param_type.activeRegionOut:
            --activeRegionOut $active_region_out
        #end if
        #if $analysis_param_type.graphOutput:
            --graphOutput $graph_out
        #end if
        ## flags
        $analysis_param_type.useAllelesTrigger
        $analysis_param_type.fullHaplotype
        $analysis_param_type.genotypeFullActiveRegion
        $analysis_param_type.debug
        \&quot;&quot;
    #end if
  </command>
  <inputs>
    <param format="gatk_report" help="-BQSR,--BQSR &amp;lt;recal_file&amp;gt;" label="Covariates table recalibration file" name="input_recal" optional="true" type="data">
      <help>The input covariates table file which enables on-the-fly base quality score recalibration. 
            Enables on-the-fly recalibrate of base qualities. The covariates tables are produced by the BaseQualityScoreRecalibrator tool. 
            Please be aware that one should only run recalibration with the covariates file created on the same input bam(s).
      </help>
    </param>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
         <param area="True" help="Please input the full path of the directory that contains a set of BAM files. All the BAM files will be used as input datasets." label="BAM directory path" name="input_directory_path" size="2x40" type="text"/>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
                <filter column="3" type="sort_by"/>

            <!-- <filter type="data_meta" key="dbkey" ref="input_bam" column="dbkey"/> -->
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history">
        <param area="True" help="Please input the full path of the directory that contains a set of BAM files. All the BAM files will be used as input datasets." label="BAM directory path" name="input_directory_path" size="2x40" type="text"/>
        <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
 
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <!--<param name="emitRefConfidence" type="select" label="Mode for emitting experimental reference confidence scores" help="-emitRefConfidence. Records whether the trimming intervals are going to be used to emit reference confidence, or regular HC output.">
           <option value="NONE">NONE</option>
           <option value="BP_RESOLUTION">BP_RESOLUTION</option>
           <option value="GVCF">GVCF</option>
        </param>-->
        <repeat help="-ped,--pedigree &amp;lt;pedigree&amp;gt;" name="pedigree" title="Pedigree file">
            <param format="txt" label="Pedigree files for samples" name="pedigree_file" type="data"/>
        </repeat>
        <repeat help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;" name="pedigree_string_repeat" title="Pedigree string">
            <param label="Pedigree string for samples" name="pedigree_string" type="text" value=""/>
        </repeat>
        <param help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;" label="How strict should we be in validating the pedigree information" name="pedigree_validation_type" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat help="-rf,--read_filter &amp;lt;read_filter&amp;gt;" name="read_filter" title="Read Filter">
            <conditional name="read_filter_type">
              <param label="Read Filter Type" name="read_filter_type_selector" type="select">
                <option value="BadCigar">BadCigar</option>
                <option value="BadMate">BadMate</option>
                <option value="DuplicateRead">DuplicateRead</option>
                <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
                <option value="MalformedRead">MalformedRead</option>
                <option value="MappingQuality">MappingQuality</option>
                <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
                <option value="MappingQualityZero">MappingQualityZero</option>
                <option value="MateSameStrand">MateSameStrand</option>
                <option value="MaxInsertSize">MaxInsertSize</option>
                <option selected="True" value="MaxReadLength">MaxReadLength</option>
                <option value="MissingReadGroup">MissingReadGroup</option>
                <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
                <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
                <option value="Platform454">Platform454</option>
                <option value="Platform">Platform</option>
                <option value="PlatformUnit">PlatformUnit</option>
                <option value="ReadGroupBlackList">ReadGroupBlackList</option>
                <option value="ReadName">ReadName</option>
                <option value="ReadStrand">ReadStrand</option>
                <option value="ReassignMappingQuality">ReassignMappingQuality</option>
                <option value="Sample">Sample</option>
                <option value="SingleReadGroup">SingleReadGroup</option>
                <option value="UnmappedRead">UnmappedRead</option>
              </param>
              <when value="BadCigar">
                  <!-- no extra options -->
              </when>
              <when value="BadMate">
                  <!-- no extra options -->
              </when>
              <when value="DuplicateRead">
                  <!-- no extra options -->
              </when>
              <when value="FailsVendorQualityCheck">
                  <!-- no extra options -->
              </when>
              <when value="MalformedRead">
                  <param checked="false" falsevalue="" help="filter out the mismatch reads instead of quitting with an error" label="filter out the reads with mismatching number of bases and base qualities" name="filter_mismatching_base_and_quals" truevalue="--filter_mismatching_base_and_quals" type="boolean"/>
              </when>
              <when value="MappingQuality">
                  <param label="Minimum read mapping quality required to consider a read for calling" name="min_mapping_quality_score" type="integer" value="10"/>
              </when>
              <when value="MappingQualityUnavailable">
                  <!-- no extra options -->
              </when>
              <when value="MappingQualityZero">
                  <!-- no extra options -->
              </when>
              <when value="MateSameStrand">
                  <!-- no extra options -->
              </when>
              <when value="MaxInsertSize">
                  <param label="Discard reads with insert size greater than the specified value" name="maxInsertSize" type="integer" value="1000000"/>
              </when>
              <when value="MaxReadLength">
                  <param label="Max Read Length" name="maxReadLength" type="integer" value="76"/>
              </when>
              <when value="MissingReadGroup">
                  <!-- no extra options -->
              </when>
              <when value="NoOriginalQualityScores">
                  <!-- no extra options -->
              </when>
              <when value="NotPrimaryAlignment">
                  <!-- no extra options -->
              </when>
              <when value="Platform454">
                  <!-- no extra options -->
              </when>
              <when value="Platform">
                  <param label="Discard reads with RG:PL attribute containing this string" name="PLFilterName" type="text" value=""/>
              </when>
              <when value="PlatformUnit">
                  <!-- no extra options -->
              </when>
              <when value="ReadGroupBlackList">
                  <!-- no extra options -->
              </when>
              <when value="ReadName">
                  <param label="Filter out all reads except those with this read name" name="readName" type="text" value=""/>
              </when>
              <when value="ReadStrand">
                  <param falsevalue="" label="Discard reads on the forward strand" name="filterPositive" truevalue="--filterPositive" type="boolean"/>
              </when>
              <when value="ReassignMappingQuality">
                  <param label="Default read mapping quality to assign to all reads" name="default_mapping_quality" type="integer" value="60"/>
              </when>
              <when value="Sample">
                  <param label="The name of the sample(s) to keep, filtering out all others" name="sample_to_keep" type="text" value=""/>
              </when>
              <when value="SingleReadGroup">
                  <param label="The name of the read group to keep, filtering out all others" name="read_group_to_keep" type="integer" value="76"/>
              </when>
              <when value="UnmappedRead">
                  <!-- no extra options -->
              </when>
            </conditional>
        </repeat>
        <repeat help="-L,--intervals &amp;lt;intervals&amp;gt;" name="input_interval_repeat" title="Operate on Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_intervals" type="data"/>
        </repeat>
        <repeat help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;" name="input_exclude_interval_repeat" title="Exclude Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_exclude_intervals" type="data"/>
        </repeat>
        
        <param help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;" label="Interval set rule" name="interval_set_rule" type="select">
          <option selected="True" value="NONE">NONE</option>
          <option value="UNION">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        
        <conditional name="downsampling_type">
          <param help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;" label="Type of reads downsampling to employ at a given locus" name="downsampling_type_selector" type="select">
            <option selected="True" value="NONE">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
              <!-- no more options here -->
          </when>
          <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param label="Downsample method" name="downsample_to_type_selector" type="select">
                      <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;" label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;" label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
                  </when>
              </conditional>
          </when>
          <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param label="Downsample method" name="downsample_to_type_selector" type="select">
                      <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;" label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;" label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
                  </when>
              </conditional>
          </when>
        </conditional>
        <param help="-baq,--baq &amp;lt;baq&amp;gt;" label="Type of BAQ calculation to apply in the engine" name="baq" type="select">
          <option selected="True" value="OFF">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;" label="BAQ gap open penalty (Phred Scaled)" name="baq_gap_open_penalty" type="float" value="40"/>
        <param falsevalue="" help="-OQ,--useOriginalQualities" label="Use the original base quality scores from the OQ tag" name="use_original_qualities" truevalue="--useOriginalQualities" type="boolean"/>
        <param help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;" label="Value to be used for all base quality scores, when some are missing" name="default_base_qualities" type="integer" value="0"/>
        <param help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;" label="How strict should we be with validation" name="validation_strictness" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;" label="Interval merging rule" name="interval_merging" type="select">
          <option selected="True" value="NONE">DEFAULT</option>
          <option selected="True" value="ALL">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>
        
        <repeat help="-rgbl,--read_group_black_list &amp;lt;read_group_black_list&amp;gt;" name="read_group_black_list_repeat" title="Read group black list">
          <conditional name="read_group_black_list_type">
            <param label="Type of reads read group black list" name="read_group_black_list_type_selector" type="select">
              <option selected="True" value="file">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
              <param format="txt" label="Read group black list file" name="read_group_black_list" type="data"/>
            </when>
            <when value="text">
              <param label="Read group black list tag:string" name="read_group_black_list" type="text" value="tag:string"/>
            </when>
          </conditional>
        </repeat>
        
        <param checked="False" falsevalue="" help="-ndrs,--nonDeterministicRandomSeed" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" name="non_deterministic_random_seed" truevalue="--nonDeterministicRandomSeed" type="boolean"/>
        <param checked="False" falsevalue="" help="-fixMisencodedQuals / --fix_misencoded_quality_scores" label="Fix mis-encoded base quality scores. Q0 == ASCII 33 according to the SAM specification, whereas Illumina encoding starts at Q64. The idea here is simple: we just iterate over all reads and subtract 31 from every quality score." name="fix_misencoded_quality_scores" truevalue="--fix_misencoded_quality_scores" type="boolean"/>
        
      </when>
    </conditional>

    <conditional name="analysis_param_type">
      <param label="Basic or Advanced Analysis options" name="analysis_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <param help="--emitRefConfidence. Records whether the trimming intervals are going to be used to emit reference confidence, or regular HC output." label="Mode for emitting experimental reference confidence scores" name="emitRefConfidence" type="select">
           <option value="NONE">NONE</option>
           <option value="BP_RESOLUTION">BP_RESOLUTION</option>
           <option value="GVCF">GVCF</option>
        </param>

        <param format="bed,gatk_interval,picard_interval_list,vcf" help="--activeRegionIn / -AR  Use this interval list file as the active regions to process" label="activeRegionIn" name="activeRegionIn" optional="true" type="data"/>
        <param checked="False" falsevalue="" help="--activeRegionOut / -ARO  Output the active region to an interval list file" label="activeRegionOut" name="activeRegionOut" truevalue="" type="boolean"/>

        <param display="checkboxes" help="-A,--annotation &amp;lt;annotation&amp;gt;" label="Annotation Types" multiple="True" name="annotation" type="select">
          <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
          <options from_data_table="gatk3_annotations">
            <filter column="tools_valid_for" separator="," type="multiple_splitter"/>
            <filter column="tools_valid_for" type="static_value" value="UnifiedGenotyper"/>
          </options>
        </param>
        <repeat help="-A,--annotation &amp;lt;annotation&amp;gt;" name="additional_annotations" title="Additional annotation">
          <param label="Annotation name" name="additional_annotation_name" type="text" value=""/>
        </repeat>
<!--
        <conditional name="snpEff_rod_bind_type">
          <param name="snpEff_rod_bind_type_selector" type="select" label="Provide a snpEff reference-ordered data file">
            <option value="set_snpEff">Set snpEff</option>
            <option value="exclude_snpEff" selected="True">Don't set snpEff</option>
          </param>
          <when value="exclude_snpEff">
          </when>
          <when value="set_snpEff">
            <param name="snpEff_input_rod" type="data" format="vcf" label="ROD file" />
            <param name="snpEff_rod_name" type="hidden" value="snpEff" label="ROD Name"/>
          </when>
        </conditional>
-->
        <param display="checkboxes" help="-G,--group &amp;lt;group&amp;gt;" label="Annotation Interfaces/Groups" multiple="True" name="group" type="select">
            <option value="RodRequiringAnnotation">RodRequiringAnnotation</option>
            <option value="Standard">Standard</option>
            <option value="Experimental">Experimental</option>
            <option value="WorkInProgress">WorkInProgress</option>
            <option value="RankSumTest">RankSumTest</option>
            <!-- <option value="none">none</option> -->
        </param>
    <!--     <param name="family_string" type="text" value="" label="Family String"/> -->
        <param display="checkboxes" help="-XA,--excludeAnnotation &amp;lt;excludeAnnotation&amp;gt;" label="Annotations to exclude" multiple="True" name="exclude_annotations" type="select">
          <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
          <options from_data_table="gatk3_annotations">
            <filter column="tools_valid_for" separator="," type="multiple_splitter"/>
            <filter column="tools_valid_for" type="static_value" value="UnifiedGenotyper"/>
          </options>
        </param>

        <param format="vcf" help="--comp / -comp  comparison VCF file" label="comp" name="comp" optional="true" type="data"/>
        <param help="--contamination_fraction_to_filter / -contamination  Fraction of contamination in sequencing data (for all samples) to aggressively remove" label="contamination_fraction_to_filter" name="contamination_fraction_to_filter" optional="true" type="float" value="0.05">
            <validator max="1" message="value between 0.00 and 1.00" min="0" type="in_range"/>
        </param>
        <param format="vcf" help="--dbsnp / -D  dbSNP file" label="dbsnp" name="dbsnp" optional="true" type="data"/>
        <param checked="False" falsevalue="" help="--debug / -debug  If specified, print out very verbose debug information about each triggering active region" label="debug" name="debug" truevalue="-debug" type="boolean"/>
        <!--<param name="downsampleRegion" type="integer" value="1000" optional="true" label="downsampleRegion" help="-downsampleRegion / -dr  coverage, per-sample, to downsample each active region to"/>-->
        <conditional name="genotyping_mode_type">
          <param help="-gt_mode,--genotyping_mode &amp;lt;genotyping_mode&amp;gt;" label="How to determine the alternate allele to use for genotyping" name="genotyping_mode" type="select">
            <option selected="True" value="NONE">DEFAULT</option>
            <option value="DISCOVERY">DISCOVERY</option>
            <option value="GENOTYPE_GIVEN_ALLELES">GENOTYPE_GIVEN_ALLELES</option>
          </param>
          <when value="NONE"/>
          <when value="DISCOVERY">
            <!-- Do nothing here -->
          </when>
          <when value="GENOTYPE_GIVEN_ALLELES">
            <param format="vcf" help="-alleles,--alleles &amp;lt;alleles&amp;gt;" label="Alleles ROD file" name="input_alleles_rod" type="data"/>
          </when>
        </conditional>

        <param checked="False" falsevalue="" help="--graphOutput / -graph  File to which debug assembly graph information should be written" label="graphOutput" name="graphOutput" truevalue="" type="boolean"/>
        <param help="--heterozygosity / -hets  Heterozygosity value used to compute prior likelihoods for any locus" label="heterozygosity" name="heterozygosity" optional="true" type="float" value="0.0010"/>
        <param help="--minPruning / -minPruning  The minimum allowed pruning factor in assembly graph. Paths with &gt;= X supporting kmers are pruned from the graph" label="minPruning" name="minPruning" optional="true" type="integer" value="2">
            <validator max="127" message="value between 0 and 127" min="0" type="in_range"/>
        </param>
        <param help="-out_mode,--output_mode &amp;lt;output_mode&amp;gt;" label="Should we output confident genotypes (i.e. including ref calls) or just the variants?" name="output_mode" type="select">
          <option selected="True" value="NONE">DEFAULT</option>
          <option value="EMIT_VARIANTS_ONLY">EMIT_VARIANTS_ONLY</option>
          <option value="EMIT_ALL_CONFIDENT_SITES">EMIT_ALL_CONFIDENT_SITES</option>
          <option value="EMIT_ALL_SITES">EMIT_ALL_SITES</option>
        </param>
        <param help="--pair_hmm_implementation / -pairHMM  The PairHMM implementation to use for genotype likelihood calculations" label="pair_hmm_implementation" name="pair_hmm_implementation" optional="true" type="select">
              <option value="EXACT">EXACT</option>
              <option value="ORIGINAL">ORIGINAL</option>
              <option value="CACHING">CACHING</option>
              <option selected="True" value="LOGLESS_CACHING">LOGLESS_CACHING</option>
        </param>
        <param help="--standard_min_confidence_threshold_for_calling / -stand_call_conf  The minimum phred-scaled confidence threshold at which variants should be called" label="standard_min_confidence_threshold_for_calling" name="standard_min_confidence_threshold_for_calling" optional="true" type="float" value="30.0"/>
        <param help="--standard_min_confidence_threshold_for_emitting / -stand_emit_conf  The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold)" label="standard_min_confidence_threshold_for_emitting" name="standard_min_confidence_threshold_for_emitting" optional="true" type="float" value="30.0"/>
        <param checked="False" falsevalue="" help="--useAllelesTrigger / -allelesTrigger  If specified, use additional trigger on variants found in an external alleles file" label="useAllelesTrigger" name="useAllelesTrigger" truevalue="-allelesTrigger" type="boolean"/>
        <param checked="False" falsevalue="" help="--fullHaplotype / -fullHaplotype  If specified, output the full haplotype sequence instead of converting to individual variants w.r.t. the reference" label="fullHaplotype" name="fullHaplotype" truevalue="-fullHaplotype" type="boolean"/>
        <param help="--gcpHMM / -gcpHMM  Flat gap continuation penalty for use in the Pair HMM" label="gcpHMM" name="gcpHMM" optional="true" type="integer" value="10"/>
        <param checked="False" falsevalue="" help="--genotypeFullActiveRegion / -genotypeFullActiveRegion  If specified, alternate alleles are considered to be the full active region for the purposes of genotyping" label="genotypeFullActiveRegion" name="genotypeFullActiveRegion" truevalue="-genotypeFullActiveRegion" type="boolean"/>
        <param help="--max_alternate_alleles / -maxAltAlleles  Maximum number of alternate alleles to genotype" label="max_alternate_alleles" name="max_alternate_alleles" optional="true" type="integer" value="6"/>
        <param help="--p_nonref_model / -pnrm  Non-reference probability calculation model to employ" label="p_nonref_model" name="p_nonref_model" optional="true" type="select">
              <option selected="True" value="EXACT_INDEPENDENT">EXACT_INDEPENDENT experimental implementation - for testing only</option>
              <option value="EXACT_REFERENCE">EXACT_REFERENCE reference implementation of multi-allelic EXACT model. Extremely slow for many alternate alleles</option>
              <option value="EXACT_ORIGINAL">EXACT_ORIGINAL original biallelic exact model, for testing only</option>
              <option value="EXACT_GENERAL_PLOIDY">implementation that supports any sample ploidy</option>
        </param>

      </when>
    </conditional>
  </inputs>
  <outputs>
    <data format="tabular" label="${tool.name} on ${on_string} (Summary output)" name="output_vcf"/>
    <data format="vcf" label="${tool.name} on ${on_string} graph" name="graph_out">
      <filter>analysis_param_type['analysis_param_type_selector'] == &quot;advanced&quot; and analysis_param_type['graphOutput'] == True</filter>
    </data>
    <data format="vcf" label="${tool.name} on ${on_string} activeRegion" name="active_region_out">
      <filter>analysis_param_type['analysis_param_type_selector'] == &quot;advanced&quot; and analysis_param_type['activeRegionOut'] == True</filter>
    </data>
  </outputs>
  <tests>
      <test>
          <param ftype="csv" name="input_recal" value="gatk/gatk_count_covariates/gatk_count_covariates_out_1.csv"/> 
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="bam" name="input_bam" value="gatk/gatk_indel_realigner/gatk_indel_realigner_out_1.bam"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <param name="analysis_param_type_selector" value="basic"/>
          <output file="gatk/gatk_table_recalibration/gatk_table_recalibration_out_1.bam" ftype="bam" lines_diff="4" name="output_bam"/>
      </test>
  </tests>
  <help>
**What it does**

**HaplotypeCaller**
calls SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region.
Haplotypes are evaluated using an affine gap penalty Pair HMM.

For more information on using read based compression in the GATK, see this `tool specific page &lt;http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_haplotypecaller_HaplotypeCaller.html&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gatk/guide/topic?name=best-practices&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gatk/guide/topic?name=faqs&gt;`_.

------

**Inputs**

GenomeAnalysisTK: PrintReads accepts aligned BAM files.


**Outputs**

The output is a VCF file with raw, unrecalibrated SNP and indel calls.


Go `here &lt;http://www.broadinstitute.org/gatk/guide/topic?name=intro&gt;`_ for details on GATK file formats.

-------

**Settings**::

 activeRegionIn              Use this interval list file as the active regions to process
 activeRegionOut             Output the active region to this interval list file
 alleles                     The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES
 annotation                  One or more specific annotations to apply to variant calls
 comp                        comparison VCF file
 contamination               Fraction of contamination in sequencing data (for all samples) to aggressively remove
 dbsnp                       dbSNP file
 debug                       If specified, print out very verbose debug information about each triggering active region
 downsampleRegion            coverage, per-sample, to downsample each active region to
 excludeAnnotation           One or more specific annotations to exclude
 genotyping_mode             Specifies how to determine the alternate alleles to use for genotyping
 graphOutput                 File to which debug assembly graph information should be written
 group                       One or more classes/groups of annotations to apply to variant calls
 heterozygosity              Heterozygosity value used to compute prior likelihoods for any locus
 minPruning                  The minimum allowed pruning factor in assembly graph. Paths with less than or equal supporting kmers are pruned from the graph
 output_mode                 Specifies which type of calls we should output
 pair_hmm_implementation     The PairHMM implementation to use for genotype likelihood calculations
 stand_call_conf             The minimum phred-scaled confidence threshold at which variants should be called
 stand_emit_conf             The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold)
 useAllelesTrigger           If specified, use additional trigger on variants found in an external alleles file
 fullHaplotype               If specified, output the full haplotype sequence instead of converting to individual variants w.r.t. the reference
 gcpHMM                      Flat gap continuation penalty for use in the Pair HMM
 genotypeFullActiveRegion    If specified, alternate alleles are considered to be the full active region for the purposes of genotyping
 max_alternate_alleles       Maximum number of alternate alleles to genotype
 p_nonref_model              Non-reference probability calculation model to employ

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

Please also site `McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res. 20:1297-303. Epub 2010 Jul 19. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20644199&gt;`_

If you use this tool in Galaxy, please cite `Blankenberg D, Von Kuster G, Coraor N, Ananda G, Lazarus R, Mangan M, Nekrutenko A, Taylor J. Galaxy: a web-based genome analysis tool for experimentalists. Curr Protoc Mol Biol. 2010 Jan;Chapter 19:Unit 19.10.1-21. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20069535&gt;`_

  </help>
</tool>
