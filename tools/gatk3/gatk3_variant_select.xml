<tool id="gatk3_variant_select" name="Select Variants" version="GATK3: GenomeAnalysisTK-3.4-46">
  <description>from VCF files</description>
  <requirements>
      <requirement type="package">gatk3</requirement>
  </requirements>
  <command interpreter="python">gatk3_wrapper.py
   #from binascii import hexlify
   --max_jvm_heap_fraction &quot;1&quot;
   --stdout &quot;${output_log}&quot;
   -d &quot;--variant:variant,%(file_type)s&quot; &quot;${reference_source.input_variant}&quot; &quot;${reference_source.input_variant.ext}&quot; &quot;input_variant&quot;
   -p 'java 
    -jar &quot;\$GATK3_PATH/GenomeAnalysisTK.jar&quot;
    -T &quot;SelectVariants&quot;
    \$GATK3_SITE_OPTIONS
    \$GATK3_NUM_THREADS
    --num_threads 32 ##hard coded, for now
    ##-et &quot;NO_ET&quot; -K &quot;\$GATK3_BASE/gatk3_key_file&quot; ##ET no phone home
    -o &quot;${output_vcf}&quot;
    
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
    '
    -p '
    #if $input_concordance:
        --concordance &quot;${input_concordance}&quot;
    #end if
    #if $input_discordance:
        --discordance &quot;${input_discordance}&quot;
    #end if
    
    #for $exclude_sample_name in $exclude_sample_name_repeat:
        --exclude_sample_name &quot;${exclude_sample_name.exclude_sample_name}&quot;
    #end for
    
    ${exclude_filtered}
    
    #for $sample_name in $sample_name_repeat:
        --sample_name &quot;${sample_name.sample_name}&quot;
    #end for
    
    '
    
    #for $select_expressions in $select_expressions_repeat:
        #set $select_expression = &quot;--select_expressions '%s'&quot; % ( str( $select_expressions.select_expressions ) )
        -o '${ hexlify( $select_expression ) }'
    #end for
    
    ##start tool specific options
    #if str( $analysis_param_type.analysis_param_type_selector ) == 'advanced':
        -p '
          #for $exclude_sample_file in $analysis_param_type.exclude_sample_file_repeat:
              --exclude_sample_file &quot;${exclude_sample_file.exclude_sample_file}&quot;
          #end for
          
          #for $sample_file in $analysis_param_type.sample_file_repeat:
              --sample_file &quot;${ample_file.sample_file}&quot;
          #end for
          
          #if $analysis_param_type.input_keep_ids:
              --keepIDs &quot;${analysis_param_type.input_keep_ids}&quot;
          #end if
          
          ${analysis_param_type.keep_original_AC}
          
          ${analysis_param_type.mendelian_violation}
          
          --mendelianViolationQualThreshold &quot;${analysis_param_type.mendelian_violation_qual_threshold}&quot;
          
          --remove_fraction_genotypes &quot;${analysis_param_type.remove_fraction_genotypes}&quot;
          
          --restrictAllelesTo &quot;${analysis_param_type.restrict_alleles_to}&quot;
          
          #if str( $analysis_param_type.select_random_type.select_random_type_selector ) == 'select_random_fraction':
              --select_random_fraction &quot;${analysis_param_type.select_random_type.select_random_fraction}&quot;
          #elif str( $analysis_param_type.select_random_type.select_random_type_selector ) == 'select_random_number':
              --select_random_number &quot;${analysis_param_type.select_random_type.select_random_number}&quot;
          #end if
          
          #if $analysis_param_type.select_type_to_include:
              #for $type_to_include in str( $analysis_param_type.select_type_to_include ).split( ',' ):
                  --selectTypeToInclude &quot;${type_to_include}&quot;
              #end for
          #end if
          
          ${analysis_param_type.exclude_non_variants}
        '
        
        #for $sample_expressions in $analysis_param_type.sample_expressions_repeat:
            #set $sample_expression = &quot;--sample_expressions '%s'&quot; % ( str( $sample_expressions.sample_expressions ) )
            -o '${ hexlify( $sample_expression ) }'
        #end for
        
    #end if
    ##end tool specific options
    
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree &quot;${pedigree.pedigree_file}&quot;'
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString &quot;${pedigree_string.pedigree_string}&quot;'
        #end for
        -p '--pedigreeValidationType &quot;${gatk_param_type.pedigree_validation_type}&quot;'
        #set default_read_filters = ['DuplicateRead','FailsVendorQualityCheck','NotPrimaryAlignment','MalformedRead','UnmappedRead']
        #for $read_filter in $gatk_param_type.read_filter:
            -p '
            #if $read_filter.read_filter_type.read_filter_type_selector not in $default_read_filters:
                --read_filter &quot;${read_filter.read_filter_type.read_filter_type_selector}&quot;
            #end if
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ &quot;__current_case__&quot;, &quot;read_filter_type_selector&quot; ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        ${param}
                    #else:
                        --${name} &quot;${param}&quot;
                    #end if
                #end if
            #end for
            '
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d &quot;--intervals&quot; &quot;${input_intervals.input_intervals}&quot; &quot;${input_intervals.input_intervals.ext}&quot; &quot;input_intervals_${interval_count}&quot;
        #end for
        
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d &quot;--excludeIntervals&quot; &quot;${input_intervals.input_exclude_intervals}&quot; &quot;${input_intervals.input_exclude_intervals.ext}&quot; &quot;input_exlude_intervals_${interval_count}&quot;
        #end for

        -p '--interval_set_rule &quot;${gatk_param_type.interval_set_rule}&quot;'
        
        -p '--downsampling_type &quot;${gatk_param_type.downsampling_type.downsampling_type_selector}&quot;'
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != &quot;NONE&quot;:
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} &quot;${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}&quot;'
        #end if
        -p '
        --baq &quot;${gatk_param_type.baq}&quot;
        --baqGapOpenPenalty &quot;${gatk_param_type.baq_gap_open_penalty}&quot;
        ${gatk_param_type.use_original_qualities}
        --defaultBaseQualities &quot;${gatk_param_type.default_base_qualities}&quot;
        --validation_strictness &quot;${gatk_param_type.validation_strictness}&quot;
        --interval_merging &quot;${gatk_param_type.interval_merging}&quot;
        ${gatk_param_type.disable_experimental_low_memory_sharding}
        ${gatk_param_type.fix_misencoded_quality_scores}
        ${gatk_param_type.non_deterministic_random_seed}
        '
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == &quot;file&quot;:
                -d &quot;--read_group_black_list&quot; &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot; &quot;txt&quot; &quot;input_read_group_black_list_${rg_black_list_count}&quot;
            #else
                -p '--read_group_black_list &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot;'
            #end if
        #end for
    #end if
    
    #if str( $reference_source.reference_source_selector ) == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input_reference_fasta&quot;
        --picard_jar &quot;/mnt/galaxyTools/tools/picard/1.121/CreateSequenceDictionary.jar&quot;
    #end if
    ##end standard gatk options
    
    
  </command>
  <inputs>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to select" name="input_variant" type="data"/>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
            <filter column="dbkey" key="dbkey" ref="input_variant" type="data_meta"/>
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to select" name="input_variant" type="data"/>
        <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    
    <repeat help="-select,--select_expressions &amp;lt;select_expressions&amp;gt;" name="select_expressions_repeat" title="Criteria to use when selecting the data">
        <param label="JEXL expression" name="select_expressions" type="text">
            <sanitizer>
              <valid initial="string.printable">
               <remove value="'"/>
             </valid>
              <mapping initial="none"/>
            </sanitizer>
        </param>
    </repeat>
    
    <param format="vcf" help="-conc,--concordance &amp;lt;concordance&amp;gt;" label="Output variants that were also called in this comparison track" name="input_concordance" optional="True" type="data"/>
    <param format="vcf" help="-disc,--discordance &amp;lt;discordance&amp;gt;" label="Output variants that were not called in this comparison track" name="input_discordance" optional="True" type="data"/>
    
    <repeat help="-sn,--sample_name &amp;lt;sample_name&amp;gt;" name="sample_name_repeat" title="Include Samples by name">
        <param label="Include genotypes from this sample" name="sample_name" type="text"/>
    </repeat>
    
    <repeat help="-xl_sn,--exclude_sample_name &amp;lt;exclude_sample_name&amp;gt;" name="exclude_sample_name_repeat" title="Exclude Samples by name">
        <param label="Exclude genotypes from this sample" name="exclude_sample_name" type="text"/>
    </repeat>
    
    <param falsevalue="" help="-ef,--excludeFiltered" label="Don't include filtered loci in the analysis" name="exclude_filtered" truevalue="--excludeFiltered" type="boolean"/>
    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <repeat help="-ped,--pedigree &amp;lt;pedigree&amp;gt;" name="pedigree" title="Pedigree file">
            <param format="txt" label="Pedigree files for samples" name="pedigree_file" type="data"/>
        </repeat>
        <repeat help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;" name="pedigree_string_repeat" title="Pedigree string">
            <param label="Pedigree string for samples" name="pedigree_string" type="text" value=""/>
        </repeat>
        <param help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;" label="How strict should we be in validating the pedigree information" name="pedigree_validation_type" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat help="-rf,--read_filter &amp;lt;read_filter&amp;gt;" name="read_filter" title="Read Filter">
            <conditional name="read_filter_type">
              <param label="Read Filter Type" name="read_filter_type_selector" type="select">
                <option value="BadCigar">BadCigar</option>
                <option value="BadMate">BadMate</option>
                <option value="DuplicateRead">DuplicateRead</option>
                <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
                <option value="MalformedRead">MalformedRead</option>
                <option value="MappingQuality">MappingQuality</option>
                <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
                <option value="MappingQualityZero">MappingQualityZero</option>
                <option value="MateSameStrand">MateSameStrand</option>
                <option value="MaxInsertSize">MaxInsertSize</option>
                <option selected="True" value="MaxReadLength">MaxReadLength</option>
                <option value="MissingReadGroup">MissingReadGroup</option>
                <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
                <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
                <option value="Platform454">Platform454</option>
                <option value="Platform">Platform</option>
                <option value="PlatformUnit">PlatformUnit</option>
                <option value="ReadGroupBlackList">ReadGroupBlackList</option>
                <option value="ReadName">ReadName</option>
                <option value="ReadStrand">ReadStrand</option>
                <option value="ReassignMappingQuality">ReassignMappingQuality</option>
                <option value="Sample">Sample</option>
                <option value="SingleReadGroup">SingleReadGroup</option>
                <option value="UnmappedRead">UnmappedRead</option>
              </param>
              <when value="BadCigar">
                  <!-- no extra options -->
              </when>
              <when value="BadMate">
                  <!-- no extra options -->
              </when>
              <when value="DuplicateRead">
                  <!-- no extra options -->
              </when>
              <when value="FailsVendorQualityCheck">
                  <!-- no extra options -->
              </when>
              <when value="MalformedRead">
                  <param checked="false" falsevalue="" help="filter out the mismatch reads instead of quitting with an error" label="filter out the reads with mismatching number of bases and base qualities" name="filter_mismatching_base_and_quals" truevalue="--filter_mismatching_base_and_quals" type="boolean"/>
              </when>
              <when value="MappingQuality">
                  <param label="Minimum read mapping quality required to consider a read for calling" name="min_mapping_quality_score" type="integer" value="10"/>
              </when>
              <when value="MappingQualityUnavailable">
                  <!-- no extra options -->
              </when>
              <when value="MappingQualityZero">
                  <!-- no extra options -->
              </when>
              <when value="MateSameStrand">
                  <!-- no extra options -->
              </when>
              <when value="MaxInsertSize">
                  <param label="Discard reads with insert size greater than the specified value" name="maxInsertSize" type="integer" value="1000000"/>
              </when>
              <when value="MaxReadLength">
                  <param label="Max Read Length" name="maxReadLength" type="integer" value="76"/>
              </when>
              <when value="MissingReadGroup">
                  <!-- no extra options -->
              </when>
              <when value="NoOriginalQualityScores">
                  <!-- no extra options -->
              </when>
              <when value="NotPrimaryAlignment">
                  <!-- no extra options -->
              </when>
              <when value="Platform454">
                  <!-- no extra options -->
              </when>
              <when value="Platform">
                  <param label="Discard reads with RG:PL attribute containing this string" name="PLFilterName" type="text" value=""/>
              </when>
              <when value="PlatformUnit">
                  <!-- no extra options -->
              </when>
              <when value="ReadGroupBlackList">
                  <!-- no extra options -->
              </when>
              <when value="ReadName">
                  <param label="Filter out all reads except those with this read name" name="readName" type="text" value=""/>
              </when>
              <when value="ReadStrand">
                  <param falsevalue="" label="Discard reads on the forward strand" name="filterPositive" truevalue="--filterPositive" type="boolean"/>
              </when>
              <when value="ReassignMappingQuality">
                  <param label="Default read mapping quality to assign to all reads" name="default_mapping_quality" type="integer" value="60"/>
              </when>
              <when value="Sample">
                  <param label="The name of the sample(s) to keep, filtering out all others" name="sample_to_keep" type="text" value=""/>
              </when>
              <when value="SingleReadGroup">
                  <param label="The name of the read group to keep, filtering out all others" name="read_group_to_keep" type="integer" value="76"/>
              </when>
              <when value="UnmappedRead">
                  <!-- no extra options -->
              </when>
            </conditional>
        </repeat>
        <repeat help="-L,--intervals &amp;lt;intervals&amp;gt;" name="input_interval_repeat" title="Operate on Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_intervals" type="data"/>
        </repeat>
        <repeat help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;" name="input_exclude_interval_repeat" title="Exclude Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_exclude_intervals" type="data"/>
        </repeat>
        
        <param help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;" label="Interval set rule" name="interval_set_rule" type="select">
          <option selected="True" value="UNION">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        
        <conditional name="downsampling_type">
          <param help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;" label="Type of reads downsampling to employ at a given locus" name="downsampling_type_selector" type="select">
            <option selected="True" value="NONE">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
              <!-- no more options here -->
          </when>
          <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param label="Downsample method" name="downsample_to_type_selector" type="select">
                      <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;" label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;" label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
                  </when>
              </conditional>
          </when>
          <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param label="Downsample method" name="downsample_to_type_selector" type="select">
                      <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;" label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;" label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
                  </when>
              </conditional>
          </when>
        </conditional>
        <param help="-baq,--baq &amp;lt;baq&amp;gt;" label="Type of BAQ calculation to apply in the engine" name="baq" type="select">
          <option selected="True" value="OFF">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;" label="BAQ gap open penalty (Phred Scaled)" name="baq_gap_open_penalty" type="float" value="40"/>
        <param falsevalue="" help="-OQ,--useOriginalQualities" label="Use the original base quality scores from the OQ tag" name="use_original_qualities" truevalue="--useOriginalQualities" type="boolean"/>
        <param help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;" label="Value to be used for all base quality scores, when some are missing" name="default_base_qualities" type="integer" value="-1"/>
        <param help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;" label="How strict should we be with validation" name="validation_strictness" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;" label="Interval merging rule" name="interval_merging" type="select">
          <option selected="True" value="ALL">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>
        
        <repeat help="-rgbl,--read_group_black_list &amp;lt;read_group_black_list&amp;gt;" name="read_group_black_list_repeat" title="Read group black list">
          <conditional name="read_group_black_list_type">
            <param label="Type of reads read group black list" name="read_group_black_list_type_selector" type="select">
              <option selected="True" value="file">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
              <param format="txt" label="Read group black list file" name="read_group_black_list" type="data"/>
            </when>
            <when value="text">
              <param label="Read group black list tag:string" name="read_group_black_list" type="text" value="tag:string"/>
            </when>
          </conditional>
        </repeat>
        
        <param checked="False" falsevalue="" help="--disable_experimental_low_memory_sharding" label="Disable experimental low-memory sharding functionality." name="disable_experimental_low_memory_sharding" truevalue="--disable_experimental_low_memory_sharding" type="boolean"/>
        <param checked="False" falsevalue="" help="-ndrs,--nonDeterministicRandomSeed" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" name="non_deterministic_random_seed" truevalue="--nonDeterministicRandomSeed" type="boolean"/>
        <param checked="False" falsevalue="" help="-fixMisencodedQuals / --fix_misencoded_quality_scores" label="Fix mis-encoded base quality scores. Q0 == ASCII 33 according to the SAM specification, whereas Illumina encoding starts at Q64. The idea here is simple: we just iterate over all reads and subtract 31 from every quality score." name="fix_misencoded_quality_scores" truevalue="--fix_misencoded_quality_scores" type="boolean"/>
        
      </when>
    </conditional>
    
    
    <conditional name="analysis_param_type">
      <param label="Basic or Advanced Analysis options" name="analysis_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        
        <repeat help="-xl_sf,--exclude_sample_file &amp;lt;exclude_sample_file&amp;gt;" name="exclude_sample_file_repeat" title="Exclude Samples by file">
            <param format="txt" label="File containing a list of samples (one per line) to exclude" name="exclude_sample_file" type="data"/>
        </repeat>
        
        <repeat help="-sf,--sample_file &amp;lt;sample_file&amp;gt;" name="sample_file_repeat" title="Samples by file">
            <param format="txt" label="File containing a list of samples (one per line) to include" name="sample_file" type="data"/>
        </repeat>
        
        <param format="text" help="-IDs,--keepIDs &amp;lt;keepIDs&amp;gt;" label="Only emit sites whose ID is found in this file" name="input_keep_ids" optional="True" type="data"/>
        
        <param falsevalue="" help="-keepOriginalAC,--keepOriginalAC" label="Don't update the AC, AF, or AN values in the INFO field after selecting" name="keep_original_AC" truevalue="--keepOriginalAC" type="boolean"/>
        
        <param falsevalue="" help="-mv,--mendelianViolation" label="output mendelian violation sites only" name="mendelian_violation" truevalue="--mendelianViolation" type="boolean"/>
        
        <param help="-mvq,--mendelianViolationQualThreshold &amp;lt;mendelianViolationQualThreshold&amp;gt;" label="Minimum genotype QUAL score for each trio member required to accept a site as a mendelian violation" name="mendelian_violation_qual_threshold" type="float" value="0"/>
        
        <param help="-fractionGenotypes,--remove_fraction_genotypes &amp;lt;remove_fraction_genotypes&amp;gt;" label="Selects a fraction (a number between 0 and 1) of the total genotypes at random from the variant track and sets them to nocall" max="1" min="0" name="remove_fraction_genotypes" type="float" value="0"/>
        
        <param help="-restrictAllelesTo,--restrictAllelesTo &amp;lt;restrictAllelesTo&amp;gt;" label="Select only variants of a particular allelicity" name="restrict_alleles_to" type="select">
            <option selected="True" value="ALL">ALL</option>
            <option value="MULTIALLELIC">MULTIALLELIC</option>
            <option value="BIALLELIC">BIALLELIC</option>
        </param>
        
        <repeat help="-se,--sample_expressions &amp;lt;sample_expressions&amp;gt;" name="sample_expressions_repeat" title="Regular expression to select many samples from the ROD tracks provided">
            <param label="Regular expression" name="sample_expressions" type="text">
                <sanitizer>
                  <valid initial="string.printable">
                   <remove value="'"/>
                 </valid>
                  <mapping initial="none"/>
                </sanitizer>
            </param>
        </repeat>
        
        <conditional name="select_random_type">
          <param label="Select a random subset of variants" name="select_random_type_selector" type="select">
            <option selected="True" value="select_all">Use all variants</option>
            <option value="select_random_fraction">Select random fraction</option>
            <option value="select_random_number">Select random number</option>
          </param>
          <when value="select_all">
            <!-- Do nothing here -->
          </when>
          <when value="select_random_fraction">
            <param help="-fraction,--select_random_fraction &amp;lt;select_random_fraction&amp;gt;" label="Fraction" max="1" min="0" name="select_random_fraction" type="float" value="0"/>
          </when>
          <when value="select_random_number">
            <param help="-number,--select_random_number &amp;lt;select_random_number&amp;gt;" label="Count" name="select_random_number" type="integer" value="0"/>
          </when>
        </conditional>
        
        <param falsevalue="" help="-env,--excludeNonVariants" label="Don't include loci found to be non-variant after the subsetting procedure" name="exclude_non_variants" truevalue="--excludeNonVariants" type="boolean"/>
        
        <param display="checkboxes" help="-selectType,--selectTypeToInclude &amp;lt;selectTypeToInclude&amp;gt;" label="Select only a certain type of variants from the input file" multiple="True" name="select_type_to_include" type="select">
            <option value="INDEL">INDEL</option>
            <option value="SNP">SNP</option>
            <option value="MIXED">MIXED</option>
            <option value="MNP">MNP</option>
            <option value="SYMBOLIC">SYMBOLIC</option>
            <option value="NO_VARIATION">NO_VARIATION</option>
        </param>
        
      </when>
    </conditional>
    
  </inputs>
  <outputs>
    <data format="vcf" label="${tool.name} on ${on_string} (Variant File)" name="output_vcf"/>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="vcf" name="input_variant" value="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf"/>
          <param name="select_expressions_repeat" value="0"/>
          <param name="input_concordance"/>
          <param name="input_discordance"/>
          <param name="exclude_sample_name_repeat" value="0"/>
          <param name="exclude_filtered"/>
          <param name="sample_name_repeat" value="0"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <param name="analysis_param_type_selector" value="basic"/>
          <output file="gatk/gatk_variant_select/gatk_variant_select_out_1.vcf" lines_diff="4" name="output_vcf"/> 
          <output compare="contains" file="gatk/gatk_variant_select/gatk_variant_select_out_1.log.contains" name="output_log"/>
      </test>
  </tests>
  <help>
**What it does**

Often, a VCF containing many samples and/or variants will need to be subset in order to facilitate certain analyses (e.g. comparing and contrasting cases vs. controls; extracting variant or non-variant loci that meet certain requirements, displaying just a few samples in a browser like IGV, etc.). SelectVariants can be used for this purpose. Given a single VCF file, one or more samples can be extracted from the file (based on a complete sample name or a pattern match). Variants can be further selected by specifying criteria for inclusion, i.e. &quot;DP &gt; 1000&quot; (depth of coverage greater than 1000x), &quot;AF &lt; 0.25&quot; (sites with allele frequency less than 0.25). These JEXL expressions are documented in the `Using JEXL expressions section &lt;http://gatkforums.broadinstitute.org/discussion/1255/what-are-jexl-expressions-and-how-can-i-use-them-with-the-gatk&gt;`_. One can optionally include concordance or discordance tracks for use in selecting overlapping variants. 

For more information on using the SelectVariants module, see this `tool specific page &lt;http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_variantutils_SelectVariants.html&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gatk/guide/topic?name=best-practices&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gatk/guide/topic?name=faqs&gt;`_.

------

**Inputs**

GenomeAnalysisTK: SelectVariants accepts a VCF input file.


**Outputs**

The output is in VCF format.


Go `here &lt;http://www.broadinstitute.org/gatk/guide/topic?name=intro&gt;`_ for details on GATK file formats.

-------

**Settings**::


 out                         VCFWriter  stdout  File to which variants should be written
 variant                     RodBinding[VariantContext]  NA  Input VCF file
 concordance                 RodBinding[VariantContext]  none  Output variants that were also called in this comparison track
 discordance                 RodBinding[VariantContext]  none  Output variants that were not called in this comparison track
 exclude_sample_file         Set[File]  []  File containing a list of samples (one per line) to exclude. Can be specified multiple times
 exclude_sample_name         Set[String]  []  Exclude genotypes from this sample. Can be specified multiple times
 excludeFiltered             boolean  false  Don't include filtered loci in the analysis
 excludeNonVariants          boolean  false  Don't include loci found to be non-variant after the subsetting procedure
 keepIDs                     File  NA  Only emit sites whose ID is found in this file (one ID per line)
 keepOriginalAC              boolean  false  Don't update the AC, AF, or AN values in the INFO field after selecting
 mendelianViolation          Boolean  false  output mendelian violation sites only
 mvq                         double  0.0  Minimum genotype QUAL score for each trio member required to accept a site as a violation
 remove_fraction_genotypes   double  0.0  Selects a fraction (a number between 0 and 1) of the total genotypes at random from the variant track and sets them to nocall
 restrictAllelesTo           NumberAlleleRestriction  ALL  Select only variants of a particular allelicity. Valid options are ALL (default), MULTIALLELIC or BIALLELIC
 sample_expressions          Set[String]  NA  Regular expression to select many samples from the ROD tracks provided. Can be specified multiple times
 sample_file                 Set[File]  NA  File containing a list of samples (one per line) to include. Can be specified multiple times
 sample_name                 Set[String]  []  Include genotypes from this sample. Can be specified multiple times
 select_expressions          ArrayList[String]  []  One or more criteria to use when selecting the data
 select_random_fraction      double  0.0  Selects a fraction (a number between 0 and 1) of the total variants at random from the variant track
 select_random_number        int  0  Selects a number of variants at random from the variant track
 selectTypeToInclude         List[Type]  []  Select only a certain type of variants from the input file. Valid types are INDEL, SNP, MIXED, MNP, SYMBOLIC, NO_VARIATION. Can be specified multiple times

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

Please also site `McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res. 20:1297-303. Epub 2010 Jul 19. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20644199&gt;`_

If you use this tool in Galaxy, please cite `Blankenberg D, Von Kuster G, Coraor N, Ananda G, Lazarus R, Mangan M, Nekrutenko A, Taylor J. Galaxy: a web-based genome analysis tool for experimentalists. Curr Protoc Mol Biol. 2010 Jan;Chapter 19:Unit 19.10.1-21. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20069535&gt;`_

  </help>
</tool>