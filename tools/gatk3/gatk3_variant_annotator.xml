<tool id="gatk3_variant_annotator" name="Variant Annotator" version="GATK3: GenomeAnalysisTK-3.4-46; SAMTOOLS: 0.1.18">
  <description/>
  <requirements>
      <requirement type="package">gatk3</requirement>
      <requirement type="package" version="0.1.18">samtools</requirement>
  </requirements>
  <command interpreter="python">gatk3_wrapper.py
   --max_jvm_heap_fraction &quot;1&quot;
   --stdout &quot;${output_log}&quot;
   #if str( $reference_source.input_bam ) != &quot;None&quot;:
       -d &quot;-I&quot; &quot;${reference_source.input_bam}&quot; &quot;${reference_source.input_bam.ext}&quot; &quot;gatk_input&quot;
       #if str( $reference_source.input_bam.metadata.bam_index ) != &quot;None&quot;:
           -d &quot;&quot; &quot;${reference_source.input_bam.metadata.bam_index}&quot; &quot;bam_index&quot; &quot;gatk_input&quot; ##hardcode galaxy ext type as bam_index
       #end if
   #end if
   -d &quot;--variant&quot; &quot;${reference_source.input_variant}&quot; &quot;${reference_source.input_variant.ext}&quot; &quot;input_variant&quot;
   -p 'java 
    -jar &quot;\$GATK3_PATH/GenomeAnalysisTK.jar&quot;
    ##--list
    -T &quot;VariantAnnotator&quot;
    \$GATK3_SITE_OPTIONS
    ## \$GATK3_NUM_THREADS
    --num_threads 32 ##hard coded, for now
    ##-et &quot;NO_ET&quot; -K &quot;\$GATK3_BASE/gatk3_key_file&quot; ##ET no phone home
    ##-log &quot;${output_log}&quot; ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
    -o &quot;${output_vcf}&quot;
    #if str( $annotations_type.annotations_type_selector ) == &quot;use_all_annotations&quot;:
        --useAllAnnotations
    #else:
        #if $annotations_type.annotations:
            #for $annotation in str( $annotations_type.annotations.fields.gatk_value ).split( ',' ):
                --annotation &quot;${annotation}&quot;
            #end for
        #end if
    #end if
    #if $exclude_annotations:
        #for $annotation in str( $exclude_annotations.fields.gatk_value ).split( ',' ):
            --excludeAnnotation &quot;${annotation}&quot;
        #end for
    #end if
    #for $additional_annotation in $additional_annotations:
        --annotation &quot;${additional_annotation.additional_annotation_name}&quot;
    #end for
    '
    #if $reference_source.input_variant_bti:
        -d &quot;--intervals&quot; &quot;${reference_source.input_variant}&quot; &quot;${reference_source.input_variant.ext}&quot; &quot;input_variant_bti&quot;
    #end if
    
    #for $rod_binding in $comp_rod_bind:
        -d &quot;--comp:${rod_binding.comp_rod_name},%(file_type)s&quot; &quot;${rod_binding.comp_input_rod}&quot; &quot;${rod_binding.comp_input_rod.ext}&quot; &quot;input_comp_${rod_binding.comp_rod_name}&quot;
    #end for
    
    #if str( $dbsnp_rod_bind_type.dbsnp_rod_bind_type_selector ) == 'set_dbsnp':
        -d &quot;--dbsnp:${dbsnp_rod_bind_type.dbsnp_rod_name},%(file_type)s&quot; &quot;${dbsnp_rod_bind_type.dbsnp_input_rod}&quot; &quot;${dbsnp_rod_bind_type.dbsnp_input_rod.ext}&quot; &quot;input_dbsnp_${dbsnp_rod_bind_type.dbsnp_rod_name}&quot;
    #end if
    
    
    #for $rod_binding in $resource_rod_bind:
        -d &quot;--resource:${rod_binding.resource_rod_name},%(file_type)s&quot; &quot;${rod_binding.resource_input_rod}&quot; &quot;${rod_binding.resource_input_rod.ext}&quot; &quot;input_resource_${rod_binding.resource_rod_name}&quot;
    #end for
    
    #if str( $snpEff_rod_bind_type.snpEff_rod_bind_type_selector ) == 'set_snpEff':
        -p '--annotation &quot;SnpEff&quot;'
        -d &quot;--snpEffFile:${snpEff_rod_bind_type.snpEff_rod_name},%(file_type)s&quot; &quot;${snpEff_rod_bind_type.snpEff_input_rod}&quot; &quot;${snpEff_rod_bind_type.snpEff_input_rod.ext}&quot; &quot;input_snpEff_${snpEff_rod_bind_type.snpEff_rod_name}&quot;
    #else:
        -p '--excludeAnnotation &quot;SnpEff&quot;'
    #end if
    
    #for $expression in $expressions:
        -p '--expression &quot;${expression.expression}&quot;'
    #end for
    
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #for $pedigree in $gatk_param_type.pedigree:
            -p '--pedigree &quot;${pedigree.pedigree_file}&quot;'
        #end for
        #for $pedigree_string in $gatk_param_type.pedigree_string_repeat:
            -p '--pedigreeString &quot;${pedigree_string.pedigree_string}&quot;'
        #end for
        -p '--pedigreeValidationType &quot;${gatk_param_type.pedigree_validation_type}&quot;'
        #set default_read_filters = ['DuplicateRead','FailsVendorQualityCheck','NotPrimaryAlignment','MalformedRead','UnmappedRead']
        #for $read_filter in $gatk_param_type.read_filter:
            -p '
            #if $read_filter.read_filter_type.read_filter_type_selector not in $default_read_filters:
                --read_filter &quot;${read_filter.read_filter_type.read_filter_type_selector}&quot;
            #end if
            #for $name, $param in $read_filter.read_filter_type.iteritems():
                #if $name not in [ &quot;__current_case__&quot;, &quot;read_filter_type_selector&quot; ]:
                    #if hasattr( $param.input, 'truevalue' ):
                        ${param}
                    #else:
                        --${name} &quot;${param}&quot;
                    #end if
                #end if
            #end for
            '
        #end for
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_interval_repeat ):
            -d &quot;--intervals&quot; &quot;${input_intervals.input_intervals}&quot; &quot;${input_intervals.input_intervals.ext}&quot; &quot;input_intervals_${interval_count}&quot;
        #end for
        
        #for $interval_count, $input_intervals in enumerate( $gatk_param_type.input_exclude_interval_repeat ):
            -d &quot;--excludeIntervals&quot; &quot;${input_intervals.input_exclude_intervals}&quot; &quot;${input_intervals.input_exclude_intervals.ext}&quot; &quot;input_exlude_intervals_${interval_count}&quot;
        #end for

        -p '--interval_set_rule &quot;${gatk_param_type.interval_set_rule}&quot;'
        
        -p '--downsampling_type &quot;${gatk_param_type.downsampling_type.downsampling_type_selector}&quot;'
        #if str( $gatk_param_type.downsampling_type.downsampling_type_selector ) != &quot;NONE&quot;:
            -p '--${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_type_selector} &quot;${gatk_param_type.downsampling_type.downsample_to_type.downsample_to_value}&quot;'
        #end if
        -p '
        --baq &quot;${gatk_param_type.baq}&quot;
        --baqGapOpenPenalty &quot;${gatk_param_type.baq_gap_open_penalty}&quot;
        ${gatk_param_type.use_original_qualities}
        --defaultBaseQualities &quot;${gatk_param_type.default_base_qualities}&quot;
        --validation_strictness &quot;${gatk_param_type.validation_strictness}&quot;
        --interval_merging &quot;${gatk_param_type.interval_merging}&quot;
        ${gatk_param_type.disable_experimental_low_memory_sharding}
        ${gatk_param_type.fix_misencoded_quality_scores}
        ${gatk_param_type.non_deterministic_random_seed}
        '
        #for $rg_black_list_count, $rg_black_list in enumerate( $gatk_param_type.read_group_black_list_repeat ):
            #if $rg_black_list.read_group_black_list_type.read_group_black_list_type_selector == &quot;file&quot;:
                -d &quot;--read_group_black_list&quot; &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot; &quot;txt&quot; &quot;input_read_group_black_list_${rg_black_list_count}&quot;
            #else
                -p '--read_group_black_list &quot;${rg_black_list.read_group_black_list_type.read_group_black_list}&quot;'
            #end if
        #end for
    #end if
    #if str( $reference_source.reference_source_selector ) == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input_reference_fasta&quot;
        --picard_jar &quot;/mnt/galaxyTools/tools/picard/1.121/CreateSequenceDictionary.jar&quot;
    #end if
    ##end standard gatk options
    
    -p '
    #if str( $annotation_group ) != &quot;None&quot;:
        #for $group in str( $annotation_group ).split( ',' ):
            --group &quot;${group}&quot;
        #end for
    #end if
    #if str( $family_string ) != &quot;&quot;:
        --family_string &quot;${family_string}&quot;
    #end if
    --MendelViolationGenotypeQualityThreshold &quot;${mendel_violation_genotype_quality_threshold}&quot;
        '
  </command>
  <inputs>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to annotate" name="input_variant" type="data"/>
        <param falsevalue="" help="--intervals" label="Increase efficiency for small variant files." name="input_variant_bti" truevalue="-BTI variant" type="boolean"/>
        <param format="bam" help="Not needed for all annotations. (-I,--input_file &amp;lt;input_file&amp;gt;)" label="BAM file" name="input_bam" optional="True" type="data">
          <validator type="unspecified_build"/>
          <validator message="Sequences are not currently available for the specified build." metadata_column="dbkey" metadata_name="dbkey" table_name="gatk3_picard_indexes" type="dataset_metadata_in_data_table"/> <!-- fixme!!! this needs to be a select -->
        </param>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
                <filter column="3" type="sort_by"/>

            <filter column="dbkey" key="dbkey" ref="input_variant" type="data_meta"/>
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <param format="vcf" help="-V,--variant &amp;lt;variant&amp;gt;" label="Variant file to annotate" name="input_variant" type="data"/>
        <param falsevalue="" help="--intervals" label="Increase efficiency for small variant files." name="input_variant_bti" truevalue="-BTI variant" type="boolean"/>
        <param format="bam" help="Not needed for all annotations. (-I,--input_file &amp;lt;input_file&amp;gt;)" label="BAM file" name="input_bam" optional="True" type="data">
        </param>
        <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    <conditional name="annotations_type">
      <param label="Use all possible annotations" name="annotations_type_selector" type="select">
        <option value="use_all_annotations">Use all</option>
        <option selected="True" value="choose">Use selected</option>
      </param>
      <when value="use_all_annotations">
          <!-- no extra options here -->
      </when>
      <when value="choose">
        <param display="checkboxes" help="-A,--annotation &amp;lt;annotation&amp;gt;" label="Annotations to apply" multiple="True" name="annotations" type="select">
          <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
          <options from_data_table="gatk3_annotations">
            <filter column="tools_valid_for" separator="," type="multiple_splitter"/>
            <filter column="tools_valid_for" type="static_value" value="VariantAnnotator"/>
          </options>
        </param>
      </when>
    </conditional>
    
    <repeat help="-A,--annotation &amp;lt;annotation&amp;gt;" name="additional_annotations" title="Additional annotation">
      <param label="Annotation name" name="additional_annotation_name" type="text" value=""/>
    </repeat>
    
    <repeat help="-comp,--comp &amp;lt;comp&amp;gt;" name="comp_rod_bind" title="Binding for reference-ordered comparison data">
      <param format="vcf" label="ROD file" name="comp_input_rod" type="data"/>
      <param label="ROD Name" name="comp_rod_name" type="text" value="Unnamed"/>
    </repeat>
    
    <conditional name="dbsnp_rod_bind_type">
      <param help="-D,--dbsnp &amp;lt;dbsnp&amp;gt;" label="Provide a dbSNP reference-ordered data file" name="dbsnp_rod_bind_type_selector" type="select">
        <option selected="True" value="set_dbsnp">Set dbSNP</option>
        <option value="exclude_dbsnp">Don't set dbSNP</option>
      </param>
      <when value="exclude_dbsnp">
        <!-- Do nothing here -->
      </when>
      <when value="set_dbsnp">
        <param format="vcf" label="ROD file" name="dbsnp_input_rod" type="data"/>
        <param label="ROD Name" name="dbsnp_rod_name" type="hidden" value="dbsnp"/>
      </when>
    </conditional>
    
    <repeat help="-resource,--resource &amp;lt;resource&amp;gt;" name="resource_rod_bind" title="Binding for reference-ordered resource data">
      <param format="vcf" label="ROD file" name="resource_input_rod" type="data"/>
      <param label="ROD Name" name="resource_rod_name" type="text" value="Unnamed"/>
    </repeat>
    
    <conditional name="snpEff_rod_bind_type">
      <param help="-snpEffFile,--snpEffFile &amp;lt;snpEffFile&amp;gt;" label="Provide a snpEff reference-ordered data file" name="snpEff_rod_bind_type_selector" type="select">
        <option value="set_snpEff">Set snpEff</option>
        <option selected="True" value="exclude_snpEff">Don't set snpEff</option>
      </param>
      <when value="exclude_snpEff">
        <!-- Do nothing here -->
      </when>
      <when value="set_snpEff">
        <param format="vcf" label="ROD file" name="snpEff_input_rod" type="data"/>
        <param label="ROD Name" name="snpEff_rod_name" type="hidden" value="snpEff"/>
      </when>
    </conditional>
    
    <repeat help="-E,--expression &amp;lt;expression&amp;gt;" name="expressions" title="Expression">
      <param label="Expression" name="expression" type="text" value=""/>
    </repeat>
    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <repeat help="-ped,--pedigree &amp;lt;pedigree&amp;gt;" name="pedigree" title="Pedigree file">
            <param format="txt" label="Pedigree files for samples" name="pedigree_file" type="data"/>
        </repeat>
        <repeat help="-pedString,--pedigreeString &amp;lt;pedigreeString&amp;gt;" name="pedigree_string_repeat" title="Pedigree string">
            <param label="Pedigree string for samples" name="pedigree_string" type="text" value=""/>
        </repeat>
        <param help="-pedValidationType,--pedigreeValidationType &amp;lt;pedigreeValidationType&amp;gt;" label="How strict should we be in validating the pedigree information" name="pedigree_validation_type" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="SILENT">SILENT</option>
        </param>
        <repeat help="-rf,--read_filter &amp;lt;read_filter&amp;gt;" name="read_filter" title="Read Filter">
            <conditional name="read_filter_type">
              <param label="Read Filter Type" name="read_filter_type_selector" type="select">
                <option value="BadCigar">BadCigar</option>
                <option value="BadMate">BadMate</option>
                <option value="DuplicateRead">DuplicateRead</option>
                <option value="FailsVendorQualityCheck">FailsVendorQualityCheck</option>
                <option value="MalformedRead">MalformedRead</option>
                <option value="MappingQuality">MappingQuality</option>
                <option value="MappingQualityUnavailable">MappingQualityUnavailable</option>
                <option value="MappingQualityZero">MappingQualityZero</option>
                <option value="MateSameStrand">MateSameStrand</option>
                <option value="MaxInsertSize">MaxInsertSize</option>
                <option selected="True" value="MaxReadLength">MaxReadLength</option>
                <option value="MissingReadGroup">MissingReadGroup</option>
                <option value="NoOriginalQualityScores">NoOriginalQualityScores</option>
                <option value="NotPrimaryAlignment">NotPrimaryAlignment</option>
                <option value="Platform454">Platform454</option>
                <option value="Platform">Platform</option>
                <option value="PlatformUnit">PlatformUnit</option>
                <option value="ReadGroupBlackList">ReadGroupBlackList</option>
                <option value="ReadName">ReadName</option>
                <option value="ReadStrand">ReadStrand</option>
                <option value="ReassignMappingQuality">ReassignMappingQuality</option>
                <option value="Sample">Sample</option>
                <option value="SingleReadGroup">SingleReadGroup</option>
                <option value="UnmappedRead">UnmappedRead</option>
              </param>
              <when value="BadCigar">
                  <!-- no extra options -->
              </when>
              <when value="BadMate">
                  <!-- no extra options -->
              </when>
              <when value="DuplicateRead">
                  <!-- no extra options -->
              </when>
              <when value="FailsVendorQualityCheck">
                  <!-- no extra options -->
              </when>
              <when value="MalformedRead">
                  <param checked="false" falsevalue="" help="filter out the mismatch reads instead of quitting with an error" label="filter out the reads with mismatching number of bases and base qualities" name="filter_mismatching_base_and_quals" truevalue="--filter_mismatching_base_and_quals" type="boolean"/>
              </when>
              <when value="MappingQuality">
                  <param label="Minimum read mapping quality required to consider a read for calling" name="min_mapping_quality_score" type="integer" value="10"/>
              </when>
              <when value="MappingQualityUnavailable">
                  <!-- no extra options -->
              </when>
              <when value="MappingQualityZero">
                  <!-- no extra options -->
              </when>
              <when value="MateSameStrand">
                  <!-- no extra options -->
              </when>
              <when value="MaxInsertSize">
                  <param label="Discard reads with insert size greater than the specified value" name="maxInsertSize" type="integer" value="1000000"/>
              </when>
              <when value="MaxReadLength">
                  <param label="Max Read Length" name="maxReadLength" type="integer" value="76"/>
              </when>
              <when value="MissingReadGroup">
                  <!-- no extra options -->
              </when>
              <when value="NoOriginalQualityScores">
                  <!-- no extra options -->
              </when>
              <when value="NotPrimaryAlignment">
                  <!-- no extra options -->
              </when>
              <when value="Platform454">
                  <!-- no extra options -->
              </when>
              <when value="Platform">
                  <param label="Discard reads with RG:PL attribute containing this string" name="PLFilterName" type="text" value=""/>
              </when>
              <when value="PlatformUnit">
                  <!-- no extra options -->
              </when>
              <when value="ReadGroupBlackList">
                  <!-- no extra options -->
              </when>
              <when value="ReadName">
                  <param label="Filter out all reads except those with this read name" name="readName" type="text" value=""/>
              </when>
              <when value="ReadStrand">
                  <param falsevalue="" label="Discard reads on the forward strand" name="filterPositive" truevalue="--filterPositive" type="boolean"/>
              </when>
              <when value="ReassignMappingQuality">
                  <param label="Default read mapping quality to assign to all reads" name="default_mapping_quality" type="integer" value="60"/>
              </when>
              <when value="Sample">
                  <param label="The name of the sample(s) to keep, filtering out all others" name="sample_to_keep" type="text" value=""/>
              </when>
              <when value="SingleReadGroup">
                  <param label="The name of the read group to keep, filtering out all others" name="read_group_to_keep" type="integer" value="76"/>
              </when>
              <when value="UnmappedRead">
                  <!-- no extra options -->
              </when>
            </conditional>
        </repeat>
        <repeat help="-L,--intervals &amp;lt;intervals&amp;gt;" name="input_interval_repeat" title="Operate on Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_intervals" type="data"/>
        </repeat>
        <repeat help="-XL,--excludeIntervals &amp;lt;excludeIntervals&amp;gt;" name="input_exclude_interval_repeat" title="Exclude Genomic intervals">
          <param format="bed,gatk_interval,picard_interval_list,vcf" label="Genomic intervals" name="input_exclude_intervals" type="data"/>
        </repeat>
        
        <param help="-isr,--interval_set_rule &amp;lt;interval_set_rule&amp;gt;" label="Interval set rule" name="interval_set_rule" type="select">
          <option selected="True" value="UNION">UNION</option>
          <option value="INTERSECTION">INTERSECTION</option>
        </param>
        
        <conditional name="downsampling_type">
          <param help="-dt,--downsampling_type &amp;lt;downsampling_type&amp;gt;" label="Type of reads downsampling to employ at a given locus" name="downsampling_type_selector" type="select">
            <option selected="True" value="NONE">NONE</option>
            <option value="ALL_READS">ALL_READS</option>
            <option value="BY_SAMPLE">BY_SAMPLE</option>
          </param>
          <when value="NONE">
              <!-- no more options here -->
          </when>
          <when value="ALL_READS">
              <conditional name="downsample_to_type">
                  <param label="Downsample method" name="downsample_to_type_selector" type="select">
                      <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;" label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;" label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
                  </when>
              </conditional>
          </when>
          <when value="BY_SAMPLE">
              <conditional name="downsample_to_type">
                  <param label="Downsample method" name="downsample_to_type_selector" type="select">
                      <option selected="True" value="downsample_to_fraction">Downsample by Fraction</option>
                      <option value="downsample_to_coverage">Downsample by Coverage</option>
                  </param>
                  <when value="downsample_to_fraction">
                      <param help="-dfrac,--downsample_to_fraction &amp;lt;downsample_to_fraction&amp;gt;" label="Fraction [0.0-1.0] of reads to downsample to" max="1" min="0" name="downsample_to_value" type="float" value="1"/>
                  </when>
                  <when value="downsample_to_coverage">
                      <param help="-dcov,--downsample_to_coverage &amp;lt;downsample_to_coverage&amp;gt;" label="Coverage to downsample to at any given locus" name="downsample_to_value" type="integer" value="0"/>
                  </when>
              </conditional>
          </when>
        </conditional>
        <param help="-baq,--baq &amp;lt;baq&amp;gt;" label="Type of BAQ calculation to apply in the engine" name="baq" type="select">
          <option selected="True" value="OFF">OFF</option>
          <option value="CALCULATE_AS_NECESSARY">CALCULATE_AS_NECESSARY</option>
          <option value="RECALCULATE">RECALCULATE</option>
        </param>
        <param help="Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &amp;lt;baqGapOpenPenalty&amp;gt;" label="BAQ gap open penalty (Phred Scaled)" name="baq_gap_open_penalty" type="float" value="40"/>
        <param falsevalue="" help="-OQ,--useOriginalQualities" label="Use the original base quality scores from the OQ tag" name="use_original_qualities" truevalue="--useOriginalQualities" type="boolean"/>
        <param help="-DBQ,--defaultBaseQualities &amp;lt;defaultBaseQualities&amp;gt;" label="Value to be used for all base quality scores, when some are missing" name="default_base_qualities" type="integer" value="-1"/>
        <param help="-S,--validation_strictness &amp;lt;validation_strictness&amp;gt;" label="How strict should we be with validation" name="validation_strictness" type="select">
          <option selected="True" value="STRICT">STRICT</option>
          <option value="LENIENT">LENIENT</option>
          <option value="SILENT">SILENT</option>
          <!-- <option value="DEFAULT_STRINGENCY">DEFAULT_STRINGENCY</option> listed in docs, but not valid value...-->
        </param>
        <param help="-im,--interval_merging &amp;lt;interval_merging&amp;gt;" label="Interval merging rule" name="interval_merging" type="select">
          <option selected="True" value="ALL">ALL</option>
          <option value="OVERLAPPING_ONLY">OVERLAPPING_ONLY</option>
        </param>
        
        <repeat help="-rgbl,--read_group_black_list &amp;lt;read_group_black_list&amp;gt;" name="read_group_black_list_repeat" title="Read group black list">
          <conditional name="read_group_black_list_type">
            <param label="Type of reads read group black list" name="read_group_black_list_type_selector" type="select">
              <option selected="True" value="file">Filters in file</option>
              <option value="text">Specify filters as a string</option>
            </param>
            <when value="file">
              <param format="txt" label="Read group black list file" name="read_group_black_list" type="data"/>
            </when>
            <when value="text">
              <param label="Read group black list tag:string" name="read_group_black_list" type="text" value="tag:string"/>
            </when>
          </conditional>
        </repeat>
        
        <param checked="False" falsevalue="" help="--disable_experimental_low_memory_sharding" label="Disable experimental low-memory sharding functionality." name="disable_experimental_low_memory_sharding" truevalue="--disable_experimental_low_memory_sharding" type="boolean"/>
        <param checked="False" falsevalue="" help="-ndrs,--nonDeterministicRandomSeed" label="Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run" name="non_deterministic_random_seed" truevalue="--nonDeterministicRandomSeed" type="boolean"/>
        <param checked="False" falsevalue="" help="-fixMisencodedQuals / --fix_misencoded_quality_scores" label="Fix mis-encoded base quality scores. Q0 == ASCII 33 according to the SAM specification, whereas Illumina encoding starts at Q64. The idea here is simple: we just iterate over all reads and subtract 31 from every quality score." name="fix_misencoded_quality_scores" truevalue="--fix_misencoded_quality_scores" type="boolean"/>
        
      </when>
    </conditional>
    
    <param display="checkboxes" help="-G,--group &amp;lt;group&amp;gt;" label="annotation interfaces/groups to apply to variant calls" multiple="True" name="annotation_group" type="select">
      <option value="RodRequiringAnnotation">RodRequiringAnnotation</option>
      <option value="Standard">Standard</option>
      <option value="Experimental">Experimental</option>
      <option value="WorkInProgress">WorkInProgress</option>
      <option value="RankSumTest">RankSumTest</option>
    </param>
    <param help="--family_string" label="Family String" name="family_string" type="text" value=""/>
    <param help="-mvq,--MendelViolationGenotypeQualityThreshold &amp;lt;MendelViolationGenotypeQualityThreshold&amp;gt;" label="genotype quality treshold in order to annotate mendelian violation ratio." name="mendel_violation_genotype_quality_threshold" type="float" value="0.0"/>
    <param display="checkboxes" help="-XA,--excludeAnnotation &amp;lt;excludeAnnotation&amp;gt;" label="Annotations to exclude" multiple="True" name="exclude_annotations" type="select">
      <!-- load the available annotations from an external configuration file, since additional ones can be added to local installs -->
      <options from_data_table="gatk3_annotations">
        <filter column="tools_valid_for" separator="," type="multiple_splitter"/>
        <filter column="tools_valid_for" type="static_value" value="VariantAnnotator"/>
      </options>
    </param>
    
  </inputs>
  <outputs>
    <data format="vcf" label="${tool.name} on ${on_string} (Variant File)" name="output_vcf"/>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="bam" name="input_bam" value="gatk/gatk_table_recalibration/gatk_table_recalibration_out_1.bam"/>
          <param ftype="vcf" name="input_variant" value="gatk/gatk_unified_genotyper/gatk_unified_genotyper_out_1.vcf"/>
          <param name="input_variant_bti"/>
          <param name="annotations_type_selector" value="choose"/>
          <param name="annotations" value="AlleleBalance,BaseQualityRankSumTest,DepthOfCoverage,HomopolymerRun,MappingQualityRankSumTest,MappingQualityZero,QualByDepth,RMSMappingQuality,SpanningDeletions,HaplotypeScore"/>
          <param name="additional_annotations" value="0"/>
          <param name="dbsnp_rod_bind_type_selector" value="set_dbsnp"/>
          <param ftype="vcf" name="dbsnp_input_rod" value="gatk/fake_phiX_variant_locations.vcf"/>
          <param name="snpEff_rod_bind_type_selector" value="exclude_snpEff"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <output file="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf" lines_diff="4" name="output_vcf"/> 
          <output compare="contains" file="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.log.contains" name="output_log"/>
          <param name="comp_rod_bind" value="0"/>
          <param name="resource_rod_bind" value="0"/>
          <param name="expressions" value="0"/>
          <!-- <param name="annotation_group" /> -->
      </test>
  </tests>
  <help>
**What it does**

Annotates variant calls with context information.  Users can specify which of the available annotations to use.

For more information on using the VariantAnnotator, see this `tool specific page &lt;http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_annotator_VariantAnnotator.html&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gatk/guide/topic?name=best-practices&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gatk/guide/topic?name=faqs&gt;`_.

------


**Inputs**

GenomeAnalysisTK: VariantAnnotator accepts a variant input file.


**Outputs**

The output is in VCF format.


Go `here &lt;http://www.broadinstitute.org/gatk/guide/topic?name=intro&gt;`_ for details on GATK file formats.

-------

**Settings**::


 sampleName           The sample (NA-ID) corresponding to the variant input (for non-VCF input only)
 annotation           One or more specific annotations to apply to variant calls
 group                One or more classes/groups of annotations to apply to variant calls
 expression           One or more specific expressions to apply to variant calls; see documentation for more details
 useAllAnnotations    Use all possible annotations (not for the faint of heart)

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

Please also site `McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res. 20:1297-303. Epub 2010 Jul 19. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20644199&gt;`_

If you use this tool in Galaxy, please cite `Blankenberg D, Von Kuster G, Coraor N, Ananda G, Lazarus R, Mangan M, Nekrutenko A, Taylor J. Galaxy: a web-based genome analysis tool for experimentalists. Curr Protoc Mol Biol. 2010 Jan;Chapter 19:Unit 19.10.1-21. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20069535&gt;`_

  </help>
</tool>