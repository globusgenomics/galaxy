<tool id="proteomics_search_tandem_swift_1" name="X!Tandem MSMS Search (swift)" version="1.0.0">
	<requirements>
		<requirement type="package">protkgem</requirement>
		<requirement type="package">xtandem</requirement>
                <requirement type="package">ruby</requirement>
	</requirements>
	<description>Run an X!Tandem Search on a set of MZML files</description>

	<command interpreter="python">
                tandem_swift.py 
		#if $database.source_select=="built_in":
		  -p "-d $database.dbkey"
		#else 
                  -p "-d $database.fasta_file"
		#end if

                #if str($variable_mods) != "None"
                    --var-mods $variable_mods
                #end if
		#for $custom_variable_mod in $custom_variable_mods:
		--var-mods ${custom_variable_mod.custom_mod}
		#end for

                #if str($fixed_mods) != "None"
		    --fix-mods $fixed_mods
                #end if
		#for $custom_fix_mod in $custom_fix_mods:
		    --fix-mods ${custom_fix_mod.custom_mod}
		#end for

                -o $output
                --outdir $output.extra_files_path
                -p "-r --enzyme=$enzyme --precursor-ion-tol-units=$precursor_tolu -v $missed_cleavages -f $fragment_ion_tol -p $precursor_ion_tol $allow_multi_isotope_search"
    #set $mzml_file = ""
    #if str($input_dir_source.input_dir_source_type) == "text"
      #import os, glob
      #set $mzml_files = glob.glob(str( $input_dir_source.input_directory_path) + "/*.mzML"  )
      #for $input_mzml in $mzml_files:
        #set $mzml_file += $input_mzml + " "
      #end for
    #else if str($input_dir_source.input_dir_source_type) == "file"
      #import os, glob
      #set $fh = open(str($input_dir_source.input_directory_path_file), "r")
      #set $path = $fh.readline().rstrip("\n")
      #set $mzml_files = glob.glob(str( $path ) + "/*.mzML"  )
      #for $input_mzml in $mzml_files:
        #set $mzml_file += $input_mzml + " "
      #end for
    #else
      ## this assumes that all MZML files in your history were transferred using Globus
      ##  and they are stored in the same directoy with the same mzML file extension
      #for $input_mzml in $input_dir_source.input_mzmls:
        #set $mzml_file += str($input_mzml.input_mzml_file) + " "
      #end for
    #end if
    --input-dir "$mzml_file"

	</command>
	<inputs>	
		<conditional name="database">
			<param name="source_select" type="select" label="Database source">
				<option value="built_in">Built-In</option>
				<option value="input_ref">Your Upload File</option>
			</param>
			<when value="built_in">
				<param name="dbkey" type="select" format="text" >
					<label>Database</label>
					<options from_file="pepxml_databases.loc">
						<column name="name" index="0" />
						<column name="value" index="2" />
					</options>
				</param>
			</when>
			<when value="input_ref">
				<param name="fasta_file" type="data" format="fasta" label="Uploaded FASTA file" />
			</when>
		</conditional>

    <conditional name="input_dir_source">
      <param name="input_dir_source_type" type="select" label="How will you specify the path to the MZML datasets?" 
        help="If you choose the file based method, it must contain only one line with the path for your files. You can select an MZML file from your history and it will automatically search for all MZML files located in the same history or directory.">
        <option value="text">Text Field</option>
        <option value="file">Text File containing path to BAM files</option>
        <option value="history">MZML in history</option>
      </param>
      <when value="text">
        <param name="input_directory_path" type="text" label="MZML directory path" 
          help="Full path of the directory that contains a set of MZML files. All the MZML files will be used as input datasets."/>
      </when>
      <when value="file">
        <param name="input_directory_path_file" type="data" format="txt" 
          label="File containing path of the directory containing the MZML files" 
          help="Must contain only one line with the path for your files" />
      </when>
      <when value="history">
        <repeat name="input_mzmls" title="Sample BAM file" min="1">
          <param name="input_mzml_file" type="data" format="mzml" label="MSMS file" help="An mzML file with MS/MS data. You only need to indicate on mzML file in you rhistory, the rest of the mzML will be taken from the same location" />
        </repeat>
      </when>
    </conditional>

		<param name="variable_mods" format="text" type="select" multiple="true" label="Variable Modifications" help="Hold the appropriate key while
			clicking to select multiple items">
			<options from_file="tandem_mods.loc">
				<column name="name" index="0" />
				<column name="value" index="2" />
			</options>
		</param>

		<repeat name="custom_variable_mods" title="Custom Variable Modifications" help="You can specify a modification when present in a motif. For instance, 0.998@N!{P}[ST] is a deamidation modification on N only if it is present in an N[any but P][S or T] motif (N-glycosite).">
			<param name="custom_mod" type="text">
			</param>
		</repeat>
		
		
		<param name="fixed_mods" format="text" type="select" multiple="true" label="Fixed Modifications" help="Hold the appropriate key while
			clicking to select multiple items">
			<options from_file="tandem_mods.loc">
				<column name="name" index="0" />
				<column name="value" index="2" />
			</options>
		</param>

		<repeat name="custom_fix_mods" title="Custom Fixed Modifications" help="You can specify a modification when present in a motif. For instance, 0.998@N!{P}[ST] is a deamidation modification on N only if it is present in an N[any but P][S or T] motif (N-glycosite).">
			<param name="custom_mod" type="text">
			</param>
		</repeat>
		
		

		<param name="missed_cleavages" type="select" format="text" help="Allow peptides to contain up to this many missed enzyme cleavage sites">
			<label>Missed Cleavages Allowed</label>
		    <option value="0">0</option>		
			<option value="1">1</option>
			<option value="2">2</option>
		</param>
		
		<param name="enzyme" type="select" format="text">
		    <label>Enzyme</label>
		    <option value="Trypsin">Trypsin</option>
		</param>
		
		<param name="fragment_ion_tol" help="Fragment Ion Tolerance in Daltons" type="float" value="0.65" min="0" max="10000" label="Fragment ion tolerance"/>

		<param name="precursor_ion_tol" help="Precursor Ion Tolerance (Da or ppm)" type="float" value="100" min="0" max="10000" label="Precursor ion tolerance"/>
		<param name="precursor_tolu" type="select" format="text">
		    <label>Precursor Ion Tolerance Units</label>
		    <option value="ppm">ppm</option>		
			<option value="Da">Da</option>
		</param>
		
		<param name="allow_multi_isotope_search" type="boolean" label="Allow multi-isotope search" help="This allows peptide candidates in windows around -1 Da and -2 Da from the acquired mass to be considered. Only applicable when the minus/plus window above is set to less than 0.5 Da. Good for accurate-mass instruments for which the reported precursor mass is not corrected to the monoisotopic mass." truevalue="" falsevalue="--strict-monoisotopic-mass"/>

	</inputs>


	<outputs>
		<data format="tabular" name="output" label="${tool.name} on ${on_string}"/>
	</outputs>


  <help>

**What it does**

Runs an MS/MS database search using the X!Tandem search engine. Output is in the form of a pepXML file containing identified peptides along with their raw search scores.

----

**References**

Please see http://www.thegpm.org/GPM/references.html for details of references describing the X!Tandem search engine.

  </help>

</tool>
