<tool id="proteomics_search_peptide_prophet_1" name="Peptide Prophet" version="1.0.1">
    <requirements>
        <requirement type="package">protkgem</requirement>
        <requirement type="package">tpp</requirement>
        <requirement type="package">ruby</requirement>
   </requirements>
   
	<description>Calculate Peptide Prophet statistics on search results</description>

	<command>
          #import os
          #if str($input_format.input_format_select) == "file"
            ln -s  $input_format.input_file input1.pep.xml;
            #for $count, $input_f in enumerate( $input_format.extra_input_files ):
              #set $tempname = "input_" + str( $count ) + ".pep.xml"
              ln -s ${input_f.extra_file} $tempname;
            #end for
          #else
            #import os, glob
            #set $mzml_file = ""
            #set $mzml_files = glob.glob(str( $input_format.input_file.extra_files_path) + "/*.pepXML"  )
            #for $count, $input_mzml in enumerate($mzml_files):
              #set $tempname = "input_" + str( $count ) + ".pep.xml"
              ln -s $input_mzml $tempname;
            #end for
          #end if
          peptide_prophet.rb 
          $glyco 
          $useicat 
          $phospho 
          $usepi 
          $usert 
          $accurate_mass 
          $no_ntt 
          $no_nmc 
          $use_gamma 
          $use_only_expect 
          $force_fit 
          $allow_alt_instruments 
          $maldi
          #if str($input_format.input_format_select) == "file"
            input1.pep.xml 
            #for $count, $input_f in enumerate( $input_format.extra_input_files ):
              #set $tempname = "input_" + str( $count ) + ".pep.xml"
              $tempname
            #end for
          #else
            #import os, glob
            #set $mzml_file = ""
            #set $mzml_files = glob.glob(str( $input_format.input_file.extra_files_path) + "/*.pepXML"  )
            #for $count, $input_mzml in enumerate($mzml_files):
              #set $tempname = "input_" + str( $count ) + ".pep.xml"
              #set $mzml_file += $tempname + " "
            #end for
            $mzml_file
          #end if
          #if str($input_format.input_format_select) == "file"
            ##set cwd = os.getcwd()
            ;sed -i.bak s%\$PWD/input1.pep.xml%$input_format.input_file%g *.pep.xml
            #for $count, $input_f in enumerate( $input_format.extra_input_files ):
              #set $tempname = "input_" + str( $count ) + ".pep.xml"
              ; sed -i.bak s%\$PWD/$tempname%$input_f.extra_file%g interact-peptide_prophet_results.prot.xml.pep.xml $tempname
            #end for
          #else
            ##set cwd = os.getcwd()
            #import os, glob
            #set $mzml_files = glob.glob(str( $input_format.input_file.extra_files_path) + "/*.pepXML"  )
            #for $count, $input_f in enumerate( $mzml_files ):
              #set $tempname = "input_" + str( $count ) + ".pep.xml"
              ; sed -i.bak s%\$PWD/$tempname%$input_f%g interact-peptide_prophet_results.prot.xml.pep.xml
            #end for

          #end if
	</command>

	<inputs>

        <conditional name="input_format" >
          <param name="input_format_select" type="select" label="Input format" >
            <option value="file" selected="true">Mzml in history</option>
            <option value="directory">Directory via Swift</option>
          </param>
          <when value="file">
            <param name="input_file" type="data" format="raw_pepxml,pep.xml" multiple="false" label="PepXml file" help="These files will typically be outputs from omssa or xtandem search tools"/>
            <repeat name="extra_input_files" title="Specify input Pep XML files" min="0" default="0">
              <param name="extra_file" type="data" format="raw_pepxml,pep.xml" multiple="false" label="Raw Search Results" help="These files will typically be outputs from omssa or xtandem search tools"/>
            </repeat>
          </when>
          <when value="directory">
            <param name="input_file" type="data" format="tabular" multiple="false" label="Swift Raw Search Results" help="These files will typically be outputs from omssa or xtandem search tools run through Swift"/>
          </when>
        </conditional>
	<param name="glyco" type="boolean" label="Expect true positives to have a glycocapture motif" truevalue="--glyco" falsevalue=""/>
	<param name="useicat" type="boolean" label="Use icat information" truevalue="--useicat" falsevalue="--no-useicat"/>
	<param name="phospho" type="boolean" label="Use phospho information" truevalue="--phospho" falsevalue=""/>
	<param name="usepi" type="boolean" label="Use pI information" truevalue="--usepi" falsevalue=""/>
	<param name="usert" type="boolean" label="Use hydrophobicity / RT information" truevalue="--usert" falsevalue=""/>
	<param name="accurate_mass" type="boolean" label="Use accurate mass binning" truevalue="--accurate-mass" falsevalue=""/>
	<param name="no_ntt" type="boolean" label="Don't use NTT model" truevalue="--no-ntt" falsevalue=""/>
	<param name="no_nmc" type="boolean" label="Don't use NMC model" truevalue="--no-nmc" falsevalue=""/>
	<param name="use_gamma" type="boolean" label="Use Gamma distribution to model the negatives" help="Applies only to X!Tandem results" truevalue="--usegamma" falsevalue=""/>
	<param name="use_only_expect" type="boolean" label="Only use Expect Score as the discriminant" help="Applies only to X!Tandem results. 
        Helpful for data with homologous top hits e.g. phospho or glyco" truevalue="--use-only-expect" falsevalue=""/>
	<param name="force_fit" type="boolean" label="Force fitting" help="Bypasses automatic mixture model checks and forces fitting of a mixture model" truevalue="--force-fit" falsevalue=""/>
	<param name="allow_alt_instruments" type="boolean" label="Allow multiple instrument types" help="Warning instead of exit with error if instrument types between runs is different" truevalue="--allow-alt-instruments" falsevalue=""/>
	<param name="maldi" type="boolean" label="Maldi data" truevalue="-l" falsevalue=""/>
	
	
  </inputs>
  <outputs>
    <data format="peptideprophet_pepxml" name="output" metadata_source="input_file" label="peptide_prophet.${input_format.input_file.display_name}.pep.xml" from_work_dir="interact-peptide_prophet_results.prot.xml.pep.xml"/>
  </outputs>

<help>

**What it does**

Given raw search engine scores as inputs this tool estimates the accuracy of peptide assignments.  From a practical perspective it estimates the probability that each peptide assignment is correct (providing probabilities as outputs), given raw scores (possibly on some arbitrary scale) as inputs. 

----

**Citation**

If you use this tool please read and cite the paper describing the statistical model implemented by Peptide Prophet

Keller A., et al. “Empirical Statistical Model to Estimate the Accuracy of Peptide Identifications Made by MS/MS and Database Search” *Anal. Chem.* 74, 5383-5392 (2002).


</help>


<!--PeptideProphet options [following the 'O']:
                 i [use icat information in PeptideProphet]
                 f [do not use icat information in PeptideProphet]
                 g [use N-glyc motif information in PeptideProphet]
                 H [use Phospho information in PeptideProphet]
                 m [maldi data]
                 I [use pI information in PeptideProphet]
                 R [use Hydrophobicity / RT information in PeptideProphet]
                 F [force the fitting of the mixture model, bypass automatic mixture model checks]
                 A [use accurate mass binning in PeptideProphet]
                 w [warning instead of exit with error if instrument types between runs is different]
                 x [exclude all entries with asterisked score values in PeptideProphet]
                 l [leave alone all entries with asterisked score values in PeptideProphet]
                 n [use hardcoded default initialization parameters of the distributions]
                 P [use Non-parametric model, can only be used with decoy option]
                 N [do not use the NTT model]
                 M [do not use the NMC model]
                 G [use Gamma Distribution to model the Negatives (applies only to X!Tandem data)]
                 E [only use Expect Score as the Discriminant(applies only to X!Tandem data, 
                    helpful for data with homologous top hits e.g. phospho or glyco)]
                 d [report decoy hits with a computed probability based on the model learned]
                 p [run ProteinProphet afterwards]
                 t [do not create png data plot]
                 u [do not assemble protein groups in ProteinProphet analysis]
                 s [do not use Occam's Razor in ProteinProphet analysis to 
                    derive the simplest protein list to explain observed peptides]
-->

</tool>
