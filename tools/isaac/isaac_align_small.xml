<tool id="isaac_align_small" name="Isaac Align" version="ISAAC: isaac-01.14.06.18">
  <description>Illumina based files for smaller datasets</description>
  <requirements>
      <requirement type="package">isaac</requirement>
  </requirements>
  <command interpreter="python">isaac_wrapper.py
   ##-p '
   ## --cleanup-intermediary 1
   ## --jobs 32
   ## --input-parallel-load 64
   ## --output-parallel-save 16
   ## --verbosity 4
   ## --gap-scoring bwa
   ## --variable-read-length true
   ## -m 56
   ##'
   -p '
    --cleanup-intermediary 1
    --jobs 4
    --input-parallel-load 8
    --output-parallel-save 8
    --verbosity 4
    --gap-scoring bwa
    --variable-read-length true
    -m 28
   '

   --outbam $output_bam
   --extra-output-dir $output_bam.extra_files_path
   --format $input_type_selector.base_calls_format

    #if $input_type_selector.base_calls_format == &quot;bam&quot;:
        #for $i, $input_bam in enumerate( $input_type_selector.input_bams ):
            -d &quot;-I&quot; &quot;${input_bam.input_bam}&quot; &quot;bam&quot; &quot;isaac_input_${i}&quot; &quot;&quot; &quot;&quot;
        #end for
    #end if
    #if $input_type_selector.base_calls_format == &quot;input_dir&quot;:
        -d &quot;-I&quot; &quot;$input_type_selector.input_dir.extra_files_path&quot; &quot;input_dir&quot; &quot;isaac_input_1&quot; &quot;$input_type_selector.input_sample_name&quot; &quot;&quot;
    #end if
    #if $input_type_selector.base_calls_format == &quot;fastq&quot;:
        #for $i, $input_fastq in enumerate( $input_type_selector.input_fastqs ):
            #if str( $input_fastq.fastq_single_paired_selector.fastq_single_paired ) == &quot;single&quot;:
                -d &quot;-I&quot; &quot;${input_fastq.input_fastq}&quot; &quot;fastq&quot; &quot;isaac_input_${i}&quot; &quot;${input_fastq.fastq_lane_id}&quot; &quot;forward&quot;
            #else:
                -d &quot;-I&quot; &quot;${input_fastq.input_fastq}&quot; &quot;fastq&quot; &quot;isaac_input_${i}&quot; &quot;${input_fastq.fastq_lane_id}&quot; &quot;${input_fastq.fastq_single_paired_selector.fastq_forward_reverse}&quot;
            #end if
        #end for
    #end if
    #if $input_type_selector.base_calls_format == &quot;fastq_gz&quot;:
        #for $i, $input_fastq in enumerate( $input_type_selector.input_fastqs_gz ):
            #if str( $input_fastq.fastqgz_single_paired_selector.fastqgz_single_paired ) == &quot;single&quot;:
                -d &quot;-I&quot; &quot;${input_fastq.input_fastq_gz}&quot; &quot;fastq_gz&quot; &quot;isaac_input_${i}&quot; &quot;${input_fastq.fastqgz_lane_id}&quot; &quot;forward&quot;
            #else:
                -d &quot;-I&quot; &quot;${input_fastq.input_fastq_gz}&quot; &quot;fastq_gz&quot; &quot;isaac_input_${i}&quot; &quot;${input_fastq.fastqgz_lane_id}&quot; &quot;${input_fastq.fastqgz_single_paired_selector.fastqgz_forward_reverse}&quot;
            #end if
        #end for
    #end if
    #if $input_type_selector.base_calls_format == &quot;bcl&quot;:
        -d &quot;-I&quot; &quot;${input_type_selector.input_bcl_xml}&quot; &quot;bcl&quot; &quot;isaac_input_1&quot; &quot;${input_type_selector.lane}&quot; &quot;&quot;
        -p '${input_type_selector.ignore_missing_bcls}'
    #end if

    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
        ##--dbname &quot;${reference_source.ref_file.fields.dbkey}&quot;
        --dbname default
    #end if
   
    #if $isaac_param_type.isaac_param_type_selector == &quot;advanced&quot;:
        #if $isaac_param_type.description_tag != &quot;None&quot;:
            -p '--description ${isaac_param_type.description_tag}'
        #end if
        -p '${isaac_param_type.allow_empty_flowcells}'
        -p '${isaac_param_type.avoid_smith_waterman}'
        -p '${isaac_param_type.bam_pessimistic_mapq}'
        -p '${isaac_param_type.clip_overlapping}'
        -p '${isaac_param_type.clip_semialigned}'
        -p '${isaac_param_type.ignore_repeats}'
        -p '${isaac_param_type.keep_duplicates}'
        -p '${isaac_param_type.mark_duplicates}'
        -p '${isaac_param_type.pf_only}'
        -p '${isaac_param_type.realign_vigorously}'
        -p '--barcode-mismatches ${isaac_param_type.barcode_mismatches}'
        -p '--base-quality-cutoff ${isaac_param_type.base_quality_cutoff}'
        -p '--mapq-threshold ${isaac_param_type.mapq_threshold}'
        -p '--neighborhood-size-threshold ${isaac_param_type.neighborhood_size_threshold}'
        -p '--gapped-mismatches ${isaac_param_type.gapped_mismatches}'
        -p '--repeat-threshold ${isaac_param_type.repeat_threshold}'
        -p '--keep-unaligned ${isaac_param_type.keep_unaligned}'
        -p '--lane-number-max ${isaac_param_type.lane_number_max}'
        -p '--realign-gaps ${isaac_param_type.realign_gaps}'
        #if str($isaac_param_type.use_bases_mask) != &quot;default&quot;:
            -p '--use-bases-mask ${isaac_param_type.use_bases_mask}'
        #end if
    #end if
  </command>
  <inputs>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <param help="" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="isaac_indexes">
            <!-- <filter type="data_meta" key="dbkey" ref="input_bam" column="dbkey"/> does not yet work in a repeat...--> 
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <param format="fasta" help="" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>

    <conditional name="input_type_selector">
      <param help="For Fastq files you will need to specify additional information" label="Format of the input files" name="base_calls_format" type="select">
        <option value="fastq">Illumina Fastq</option>
        <option value="fastq_gz">Compressed Illumina Fastq</option>
        <option value="bam">BAM</option>
        <option value="bcl">BCL</option>
        <option value="input_dir">Specify Input Directory from BCL2Fastq output file</option>
      </param>
      <when value="fastq">
        <repeat help="-b,--base-calls &amp;lt;input_file&amp;gt;, --base-calls-format fastq" min="1" name="input_fastqs" title="Fastq files">
          <param format="fastqillumina, fastqsanger" label="Illumina Fastq file" name="input_fastq" type="data">
          </param>
          <param label="Lane ID for Fastq file" name="fastq_lane_id" type="text"/>
          <conditional name="fastq_single_paired_selector">
            <param help="Specify if this fastq file is single ended or paired (forward or reverse)" label="Single or Paired ended" name="fastq_single_paired" type="select">
              <option value="single">Single-ended</option>
              <option value="paired">Paired-ended</option>
            </param>
            <when value="single"/>
            <when value="paired">
              <param help="Specify if this fastq file forward or reverse read" label="Forward or Reverse Read" name="fastq_forward_reverse" type="select">
                <option value="forward">Forward</option>
                <option value="reverse">Reverse</option>
              </param>
            </when>
          </conditional>
        </repeat>
      </when>
      <when value="fastq_gz">
        <repeat help="-b,--base-calls &amp;lt;input_file&amp;gt;, --base-calls-format fastq-gz" min="1" name="input_fastqs_gz" title="Compressed Fastq files">
          <param format="fastqillumina,fastqsanger,gz" label="Compressed Illumina Fastq file" name="input_fastq_gz" type="data">
          </param>
          <param label="Lane ID for Fastq file" name="fastqgz_lane_id" type="text"/>
          <conditional name="fastqgz_single_paired_selector">
            <param help="Specify if this fastq file is single ended or paired (forward or reverse)" label="Single or Paired ended" name="fastqgz_single_paired" type="select">
              <option value="single">Single-ended</option>
              <option value="paired">Paired-ended</option>
            </param>
            <when value="single"/>
            <when value="paired">
              <param help="Specify if this fastq file forward or reverse read" label="Forward or Reverse Read" name="fastqgz_forward_reverse" type="select">
                <option value="forward">Forward</option>
                <option value="reverse">Reverse</option>
              </param>
            </when>
          </conditional>
        </repeat>
      </when>
      <when value="bam">
        <repeat help="-b,--base-calls &amp;lt;input_file&amp;gt;, --base-calls-format bam" min="1" name="input_bams" title="BAM files">
          <param format="bam" label="BAM file, All data found in bam file is assumed to come from lane 1 of a single flowcell." name="input_bam" type="data">
          </param>
        </repeat>
      </when>
      <when value="bcl">
        <param format="xml" label="RunInfo.xml file where data is made of bcl files" name="input_bcl_xml" type="data"/>
        <param falsevalue="" help="When set, missing bcl files are treated as all clusters having N bases for the corresponding tile cycle. Otherwise, encountering a missing bcl file causes the analysis to fail." label="Ignore missing BCLs" name="ignore_missing_bcls" truevalue="--ignore-missing-bcls true" type="boolean"/>
        <param label="Select lane to align" name="lane" type="select">
          <option value="all">All</option>
          <option value="L001">L001</option>
          <option value="L002">L002</option>
          <option value="L003">L003</option>
          <option value="L004">L004</option>
          <option value="L005">L005</option>
          <option value="L006">L006</option>
          <option value="L007">L007</option>
          <option value="L008">L008</option>
        </param>
      </when>
      <when value="input_dir">
          <param format="tabular,text" help="The Fastq output of the BCL2Fastq tool. This job should create the multiple samples inside the directory" label="Input directory file where Fastq files from same sample are" name="input_dir" type="data"/>
          <param label="Sample Name inside the Fastq output directory" name="input_sample_name" optional="False" type="text"/>
      </when>
    </conditional>

    <conditional name="isaac_param_type">
      <param label="Basic or Advanced Isaac options" name="isaac_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <param help="" label="Freeform text to be stored in the iSAAC @PG DS bam header tag" name="description_tag" type="text" value="None"/>
        <param falsevalue="" help="" label="Avoid failure when some of the --base-calls contain no data" name="allow_empty_flowcells" truevalue="--allow-empty-flowcells true" type="boolean"/>
        <param falsevalue="" help="When set, heuristics applied to avoid executing costly smith-waterman on sequences that are unlikely to produce gaps" label="Avoid Smith-Waterman Heuristic" name="avoid_smith_waterman" truevalue="--avoid-smith-waterman true" type="boolean"/>
        <param falsevalue="" help="When set, the MAPQ is computed as MAPQ:=min(60, min(SM, AS)), otherwise MAPQ:=min(60, max(SM, AS))" label="BAM Pessimistic Mapq" name="bam_pessimistic_mapq" truevalue="--bam-pessimistic-mapq true" type="boolean"/>
        <param help="--barcode-mismatches" label="Barcode Mismatches" name="barcode_mismatches" type="select">
          <option value="1:0">Allow one mismatch for the first barcode component and no mismatches for the subsequent components</option>
          <option value="1">Allow one mismatch for every barcode component</option>
          <option selected="True" value="0">No mismatches allowed in any barcode component</option>
        </param>
        <param help="Value above 0 causes low quality bases to be soft-clipped. 0 turns the trimming off." label="3 prime end quality trimming cutoff" name="base_quality_cutoff" type="integer" value="25"/>
        <param help="the BAM file will only contain the templates with a mapping quality greater than or equal to the threshold." label="Threshold used to filter the templates based on their mapping quality" name="mapq_threshold" type="integer" value="0"/>
        <param help="Threshold used to decide if the number of reference 32-mers sharing the same prefix (16 bases) is small enough to justify the neighborhood search. Use large enough value e.g. 10000 to enable alignment to positions where seeds don't match exactly." label="Neighborhood size threshold" name="neighborhood_size_threshold" type="integer" value="0"/>
        <param falsevalue="" help="When set, the pairs that have read ends overlapping each other will have the lower-quality end soft-clipped." label="Clip overlapping" name="clip_overlapping" truevalue="--clip-overlapping true" type="boolean"/>
        <param falsevalue="" help="When set, reads have their bases soft-clipped on either sides until a stretch of 5 matches is found." label="Clip semialigned" name="clip_semialigned" truevalue="--clip-semialigned true" type="boolean"/>
        <param help="" label="Maximum number of mismatches allowed to accept a gapped alignment" name="gapped_mismatches" type="integer" value="5"/>
        <param falsevalue="" help="Normally exact repeat matches prevent inexact seed matching. If this flag is set, inexact matches will be considered even for the seeds that match to repeats." label="Ignore repeats" name="ignore_repeats" truevalue="--ignore-repeats true" type="boolean"/>
        <param checked="true" falsevalue="--keep-duplicates 0" help="with 0x400 flag set in all but the best one" label="Keep duplicate pairs in the bam file" name="keep_duplicates" truevalue="--keep-duplicates 1" type="boolean"/>
        <param checked="true" falsevalue="--mark-duplicates 0" help="If not set and --keep-duplicates is set, the duplicates are not discarded and not flagged." label="Mark duplicates" name="mark_duplicates" truevalue="--mark-duplicates 1" type="boolean"/>
        <param help="" label="Threshold used to decide if matches must be discarded as too abundant" name="repeat_threshold" type="integer" value="10"/>
        <param help="" label="Keep unaligned" name="keep_unaligned" type="select">
          <option selected="True" value="back">keep unaligned clusters in the back of the BAM file</option>
          <option value="front">keep unaligned clusters in the front of the BAM file</option>
          <option value="discard">discard clusters where both reads are not aligned</option>
        </param>
        <param help="fastq only" label="Maximum lane number to look for in base-calls-directory" name="lane_number_max" type="integer" value="8"/>
        <param falsevalue="" help="When set, only the fragments passing filter (PF) are generated in the BAM file" label="Use PF only" name="pf_only" truevalue="--pf-only true" type="boolean"/>
        <param help="or reads overlapping the gaps occurring on other reads, check if applying those gaps reduces mismatch count. Significantly reduces number of false SNPs reported around short indels." label="Realign gaps" name="realign_gaps" type="select">
          <option selected="True" value="sample">realign against gaps found in the same sample</option>
          <option value="project">realign against gaps found in all samples of the same project</option>
          <option value="all">realign against gaps found in all samples</option>
          <option value="no">No gap realignment</option>
        </param>
        <param falsevalue="" help="If set, the realignment result will be used to search for more gaps and attempt another realignment, effectively extending the realignment over multiple deletions not covered by the original alignment." label="Realign vigorously" name="realign_vigorously" truevalue="--realign-vigorously true" type="boolean"/>
        <param help="For instance, in a 2x76 indexed paired end run, the mask I-Y76,I6n,y75n means: use all 76 bases from the first end, discard the last base of the indexing read, and use only the first 75 bases of the second end." label="Use bases mask" name="use_bases_mask" type="select">
          <option selected="True" value="default">Guess from Config.xml file</option>
          <option value="y">Use</option>
          <option value="n">Discard</option>
          <option value="i">Use for indexing</option>
        </param>
      </when>
    </conditional> 
  </inputs>
  <outputs>
    <data format="bam" label="${tool.name} on ${on_string} (BAM)" name="output_bam"/>
  </outputs>
  <tests>
      <test>
      </test>
  </tests>
  <help>
**What it does**


------

**Inputs**



**Outputs**

The output is in BAM format.



-------

**Settings**::

  
------

**Citation**


  </help>
</tool>