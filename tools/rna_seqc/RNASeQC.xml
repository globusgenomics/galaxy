<tool id="RNASeQC" name="RNASeQC" version="ZLIB: default; BWA: 0.7.12; RNASEQC: 1.1.7">
  <description>RNASeQC: Quality control metrics for RNA-seq data</description>
  <requirements>
    <requirement type="package">pymodules</requirement>
    <requirement type="package">zlib</requirement>
    <requirement type="package">bwa</requirement>
    <requirement type="package">rnaseqc</requirement>
  </requirements>
  <command>
    mkdir $output.extra_files_path;
    #if $reference_gtf_source.reference_gtf_selector != "history":
      cp $reference_gtf_source.ref_gtf_file.fields.path $output.extra_files_path/ref_input.gtf;
    #else:
      cp $reference_gtf_source.input2 $output.extra_files_path/ref_input.gtf;
    #end if

   python $__tool_directory__/rnaseqc_wrapper.py
   --max_jvm_heap_fraction 1
   #for $i, $input_bam in enumerate( $reference_source.input_bams ):
       -d "-s" "${input_bam.input_bam}" "${input_bam.input_bam.ext}" "rnaseqc_input_${i}"
       #if str( $input_bam.input_bam.metadata.bam_index ) != "None":
           -d "" "${input_bam.input_bam.metadata.bam_index}" "bam_index" "rnaseqc_input_${i}"
       #end if
   #end for
   -p 'java -jar \$RNASEQCPATH/RNASeQC.jar -o $output.extra_files_path
    #if $reference_source.reference_source_selector != "history":
        -r ${reference_source.ref_file.fields.path}
    #else:
        -r ${reference_source.ref_file}
    #end if
    -t $output.extra_files_path/ref_input.gtf -o $output.extra_files_path
   '
   ; cp -r $output.extra_files_path/report.html $output; rm -rf $output.extra_files_path/ref_input.gtf
  </command>

  <inputs>
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <repeat help="-I,--input_file &amp;lt;input_file&amp;gt;" min="1" name="input_bams" title="BAM file">
            <param format="bam" label="BAM file" name="input_bam" type="data">
              <validator type="unspecified_build"/>
              <validator message="Sequences are not currently available for the specified build." metadata_column="dbkey" metadata_name="dbkey" table_name="gatk3_picard_indexes" type="dataset_metadata_in_data_table"/> <!-- fixme!!! this needs to be a select -->
            </param>
        </repeat>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
            <!-- <filter type="data_meta" key="dbkey" ref="input_bam" column="dbkey"/> does not yet work in a repeat...-->
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <repeat help="-I,--input_file &amp;lt;input_file&amp;gt;" min="1" name="input_bams" title="BAM file">
            <param format="bam" label="BAM file" name="input_bam" type="data"/>
        </repeat>
        <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    <conditional name="reference_gtf_source">
      <param label="Choose the source for the transcript definition list" name="reference_gtf_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <param help="" label="File Defining transcipts" name="ref_gtf_file" type="select">
          <options from_data_table="all_gff">
          </options>
        </param>
      </when>
      <when value="history">
        <param format="gtf" label="File Defining transcipts" name="input2" type="data"/>
      </when>
    </conditional>
	</inputs>

	<outputs>
		<data format="html" label="${tool.name} on ${on_string}" name="output"/>
    	</outputs>

  <help>
This tool computes GC content from a FASTA file.
  </help>

</tool>
