<tool id="gatk3.6_variant_eval" name="Eval Variants" version="GATK3.6: GenomeAnalysisTK-3.6">
  <description/>
  <requirements>
      <requirement type="package" version="3.6">gatk3</requirement>
  </requirements>
  <macros>
    <import>gatk_macros.xml</import>
  </macros>
  <command interpreter="python">gatk3_wrapper.py
   #from binascii import hexlify
   ##--max_jvm_heap_fraction &quot;1&quot;
   --max_jvm_heap 128G
   --stdout &quot;${output_log}&quot;
   #for $var_count, $variant in enumerate( $reference_source.variants ):
      -d &quot;--eval:input_${var_count},%(file_type)s&quot; &quot;${variant.input_variant}&quot; &quot;${variant.input_variant.ext}&quot; &quot;input_variants_${var_count}&quot;
   #end for
   -p 'java 
    -jar &quot;\$GATK3_PATH/GenomeAnalysisTK.jar&quot;
    -T &quot;VariantEval&quot;
    --out &quot;${output_report}&quot;
    \$GATK3_SITE_OPTIONS
    \$GATK3_NUM_THREADS
    --num_threads 32 ##hard coded, for now
    ##-et &quot;NO_ET&quot; -K &quot;\$GATK3_BASE/gatk3_key_file&quot; ##ET no phone home
    ##-log &quot;${output_log}&quot; ##don't use this to log to file, instead directly capture stdout
    #if $reference_source.reference_source_selector != &quot;history&quot;:
        -R &quot;${reference_source.ref_file.fields.path}&quot;
    #end if
   '
   
    #for $rod_binding in $comp_rod_bind:
        -d &quot;--comp:${rod_binding.comp_rod_name},%(file_type)s&quot; &quot;${rod_binding.comp_input_rod}&quot; &quot;${rod_binding.comp_input_rod.ext}&quot; &quot;input_comp_${rod_binding.comp_rod_name}&quot;
        #if str( $rod_binding.comp_known_names ):
            -p '--known_names &quot;${rod_binding.comp_rod_name}&quot;'
        #end if
    #end for
    
    #if str( $dbsnp_rod_bind_type.dbsnp_rod_bind_type_selector ) == 'set_dbsnp':
        -d &quot;--dbsnp:${dbsnp_rod_bind_type.dbsnp_rod_name},%(file_type)s&quot; &quot;${dbsnp_rod_bind_type.dbsnp_input_rod}&quot; &quot;${dbsnp_rod_bind_type.dbsnp_input_rod.ext}&quot; &quot;input_dbsnp_${dbsnp_rod_bind_type.dbsnp_rod_name}&quot;
        #if str( $dbsnp_rod_bind_type.dbsnp_known_names ):
            -p '--known_names &quot;${dbsnp_rod_bind_type.dbsnp_rod_name}&quot;'
        #end if
    #end if
   
    ##start standard gatk options
    #if $gatk_param_type.gatk_param_type_selector == &quot;advanced&quot;:
        #include source=$standard_gatk_options#
    #end if
    
    #if $reference_source.reference_source_selector == &quot;history&quot;:
        -d &quot;-R&quot; &quot;${reference_source.ref_file}&quot; &quot;${reference_source.ref_file.ext}&quot; &quot;gatk_input_reference_fasta&quot;
        --picard_jar &quot;/mnt/galaxyTools/tools/picard/1.121/CreateSequenceDictionary.jar&quot;
    #end if
    ##end standard gatk options
    
    
    ##start analysis specific options
    #if $analysis_param_type.analysis_param_type_selector == &quot;advanced&quot;:
        #for $stratification in $analysis_param_type.stratifications:
            #set $select_string = &quot;--select_exps '%s' --select_names '%s'&quot; % ( str( $stratification.select_exps ), str( $stratification.select_name )  )
            -o '${ hexlify( $select_string ) }'
        #end for
        -p '
        
        #for $sample in $analysis_param_type.samples:
            --sample &quot;${sample.sample}&quot;
        #end for
        
        #if str( $analysis_param_type.stratification_modules ) != &quot;None&quot;:
            #for $stratification_module in str( $analysis_param_type.stratification_modules).split( ',' ):
                --stratificationModule &quot;${stratification_module}&quot;
            #end for
        #end if
        
        ${analysis_param_type.do_not_use_all_standard_stratifications}
        
        #for $variant_type in $analysis_param_type.only_variants_of_type:
            --onlyVariantsOfType &quot;${variant_type.variant_type}&quot;
        #end for
        
        #if str( $analysis_param_type.eval_modules ) != &quot;None&quot;:
            #for $eval_module in str( $analysis_param_type.eval_modules).split( ',' ):
                --evalModule &quot;${eval_module}&quot;
            #end for
        #end if
        
        ${analysis_param_type.do_not_use_all_standard_modules}
        
        #if str( $analysis_param_type.num_samples ) != &quot;0&quot;:
            --numSamples &quot;${analysis_param_type.num_samples}&quot;
        #end if
        
        --minPhaseQuality &quot;${analysis_param_type.min_phase_quality}&quot;
        
        #if str( $analysis_param_type.family ):
            --family_structure &quot;${analysis_param_type.family}&quot;
        #end if
        
        --mendelianViolationQualThreshold &quot;${analysis_param_type.mendelian_violation_qual_threshold}&quot;
        
        #if str( $analysis_param_type.ancestral_alignments ) != &quot;None&quot;:
            --ancestralAlignments &quot;${analysis_param_type.ancestral_alignments}&quot;
        #end if
        '
        #if str( $analysis_param_type.known_cnvs ) != &quot;None&quot;:
            -d &quot;--knownCNVs&quot; &quot;${analysis_param_type.known_cnvs}&quot; &quot;${analysis_param_type.known_cnvs.ext}&quot; &quot;input_known_cnvs&quot;
        #end if
        
        #if str( $analysis_param_type.strat_intervals ) != &quot;None&quot;:
            -d &quot;--stratIntervals&quot; &quot;${analysis_param_type.strat_intervals}&quot; &quot;${analysis_param_type.strat_intervals.ext}&quot; &quot;input_strat_intervals&quot;
        #end if
    #end if
  </command>
  <inputs>
    
    <conditional name="reference_source">
      <param label="Choose the source for the reference list" name="reference_source_selector" type="select">
        <option value="cached">Locally cached</option>
        <option value="history">History</option>
      </param>
      <when value="cached">
        <repeat help="-eval,--eval &amp;lt;eval&amp;gt;" min="1" name="variants" title="Variant">
          <param format="vcf" label="Input variant file" name="input_variant" type="data"/>
        </repeat>
        <param help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference genome" name="ref_file" type="select">
          <options from_data_table="gatk3_picard_indexes">
                <filter column="3" type="sort_by"/>

            <!-- <filter type="data_meta" key="dbkey" ref="input_variant" column="dbkey"/> -->
          </options>
          <validator message="A built-in reference genome is not available for the build associated with the selected input file" type="no_options"/>
        </param>
      </when>
      <when value="history"> <!-- FIX ME!!!! -->
        <repeat help="-eval,--eval &amp;lt;eval&amp;gt;" min="1" name="variants" title="Variant">
          <param format="vcf" label="Input variant file" name="input_variant" type="data"/>
        </repeat>
        <param format="fasta" help="-R,--reference_sequence &amp;lt;reference_sequence&amp;gt;" label="Using reference file" name="ref_file" type="data"/>
      </when>
    </conditional>
    
    <repeat help="-comp,--comp &amp;lt;comp&amp;gt;" name="comp_rod_bind" title="Binding for reference-ordered comparison data">
      <param format="vcf" label="Comparison ROD file" name="comp_input_rod" type="data"/>
      <param label="Comparison ROD Name" name="comp_rod_name" type="text" value="Unnamed"/>
      <param falsevalue="" help="-knownName,--known_names &amp;lt;known_names&amp;gt;" label="Use Comparison ROD as known_names" name="comp_known_names" truevalue="--known_names" type="boolean"/>
    </repeat>
    
    <conditional name="dbsnp_rod_bind_type">
      <param help="-D,--dbsnp &amp;lt;dbsnp&amp;gt;" label="Provide a dbSNP reference-ordered data file" name="dbsnp_rod_bind_type_selector" type="select">
        <option selected="True" value="set_dbsnp">Set dbSNP</option>
        <option value="exclude_dbsnp">Don't set dbSNP</option>
      </param>
      <when value="exclude_dbsnp">
        <!-- Do nothing here -->
      </when>
      <when value="set_dbsnp">
        <param format="vcf" label="dbSNP ROD file" name="dbsnp_input_rod" type="data"/>
        <param label="dbSNP ROD Name" name="dbsnp_rod_name" type="hidden" value="dbsnp"/>
        <param falsevalue="" help="-knownName,--known_names &amp;lt;known_names&amp;gt;" label="Use dbSNP ROD as known_names" name="dbsnp_known_names" truevalue="--known_names" type="boolean"/>
      </when>
    </conditional>
    
    <conditional name="gatk_param_type">
      <param label="Basic or Advanced GATK options" name="gatk_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <expand macro="advanced_options" />
      </when>
    </conditional>
    
    
    <conditional name="analysis_param_type">
      <param label="Basic or Advanced Analysis options" name="analysis_param_type_selector" type="select">
        <option selected="True" value="basic">Basic</option>
        <option value="advanced">Advanced</option>
      </param>
      <when value="basic">
        <!-- Do nothing here -->
      </when>
      <when value="advanced">
        <repeat name="stratifications" title="Stratification">
          <param help="-select,--select_exps &amp;lt;select_exps&amp;gt;" label="Stratification Expression" name="select_exps" type="text" value="">
            <sanitizer>
              <valid initial="string.printable">
               <remove value="'"/>
             </valid>
              <mapping initial="none"/>
            </sanitizer>
          </param>
          <param help="-selectName,--select_names &amp;lt;select_names&amp;gt;" label="Name" name="select_name" type="text" value=""/>
        </repeat>
        
        <repeat help="-sn,--sample &amp;lt;sample&amp;gt;" name="samples" title="Sample">
          <param label="Derive eval and comp contexts using only these sample genotypes, when genotypes are available in the original context" name="sample" type="text" value=""/>
        </repeat>
        
        <param display="checkboxes" help="-ST,--stratificationModule &amp;lt;stratificationModule&amp;gt;" label="Stratification modules to apply to the eval track(s)" multiple="True" name="stratification_modules" type="select">
          <!-- do these need individual options also? gatk wiki has little info -->
          <option value="AlleleFrequency"/>
          <option value="AlleleCount"/>
          <option value="CompRod"/>
          <option value="Contig"/>
          <option value="CpG"/>
          <option value="Degeneracy"/>
          <option value="EvalRod"/>
          <option value="Filter"/>
          <option value="FunctionalClass"/>
          <option value="JexlExpression"/>
          <option value="Sample"/>
          <option value="IntervalStratification"/>
        </param>
        <param checked="false" falsevalue="" help="-noST,--doNotUseAllStandardStratifications" label="Do not use the standard stratification modules by default" name="do_not_use_all_standard_stratifications" truevalue="--doNotUseAllStandardStratifications" type="boolean"/>
        
        <repeat help="--onlyVariantsOfType" name="only_variants_of_type" title="only Variants Of Type">
          <param label="only variants of these types will be considered during the evaluation" name="variant_type" type="text" value=""/>
        </repeat>
        
        <param display="checkboxes" help="-EV,--evalModule &amp;lt;evalModule&amp;gt;" label="Eval modules to apply to the eval track(s)" multiple="True" name="eval_modules" type="select">
          <!-- do these need individual options also? gatk wiki has little info -->
          <option value="ACTransitionTable"/>
          <option value="AlleleFrequencyComparison"/>
          <option value="AminoAcidTransition"/>
          <option value="CompOverlap"/>
          <option value="CountVariants"/>
          <option value="GenotypeConcordance"/>
          <option value="GenotypePhasingEvaluator"/>
          <option value="IndelMetricsByAC"/>
          <option value="IndelStatistics"/>
          <option value="MendelianViolationEvaluator"/>
          <option value="PrintMissingComp"/>
          <option value="PrivatePermutations"/>
          <option value="SimpleMetricsByAC"/>
          <option value="ThetaVariantEvaluator"/>
          <option value="TiTvVariantEvaluator"/>
          <option value="VariantQualityScore"/>
        </param>
        <param checked="false" falsevalue="" help="-noEV,--doNotUseAllStandardModules" label="Do not use the standard eval modules by default" name="do_not_use_all_standard_modules" truevalue="--doNotUseAllStandardModules" type="boolean"/>
        
        <param help="-ns,--numSamples &amp;lt;numSamples&amp;gt;" label="Number of samples (used if no samples are available in the VCF file" name="num_samples" type="integer" value="0"/>
        <param help="-mpq,--minPhaseQuality &amp;lt;minPhaseQuality&amp;gt;" label="Minimum phasing quality " name="min_phase_quality" type="float" value="10.0"/>
        <param help="--family_structure" label="If provided, genotypes in will be examined for mendelian violations: this argument is a string formatted as dad+mom=child where these parameters determine which sample names are examined" name="family" type="text" value=""/>
        <param help="-mvq,--mendelianViolationQualThreshold &amp;lt;mendelianViolationQualThreshold&amp;gt;" label="Minimum genotype QUAL score for each trio member required to accept a site as a violation" name="mendelian_violation_qual_threshold" type="integer" value="50"/>
        <param format="fasta" help="-aa,--ancestralAlignments &amp;lt;ancestralAlignments&amp;gt;" label="Fasta file with ancestral alleles" name="ancestral_alignments" optional="True" type="data"/>
        <param format="bed,gatk_interval,picard_interval_list" help="-knownCNVs,--knownCNVs &amp;lt;knownCNVs&amp;gt;" label="File containing tribble-readable features describing a known list of copy number variants" name="known_cnvs" optional="True" type="data"/>
        <param format="bed,gatk_interval,picard_interval_list" help="-stratIntervals,--stratIntervals &amp;lt;stratIntervals&amp;gt;" label="File containing tribble-readable features for the IntervalStratificiation" name="strat_intervals" optional="True" type="data"/>
        
      </when>
    </conditional>
    
    
  </inputs>
  <outputs>
    <data format="gatk_report" label="${tool.name} on ${on_string} (report)" name="output_report"/>
    <data format="txt" label="${tool.name} on ${on_string} (log)" name="output_log"/>
  </outputs>
  <tests>
      <test>
          <param name="reference_source_selector" value="history"/>
          <param ftype="fasta" name="ref_file" value="phiX.fasta"/>
          <param ftype="vcf" name="input_variant" value="gatk/gatk_variant_annotator/gatk_variant_annotator_out_1.vcf"/>
          <param name="dbsnp_rod_bind_type_selector" value="set_dbsnp"/>
          <param ftype="vcf" name="dbsnp_input_rod" value="gatk/fake_phiX_variant_locations.vcf"/>
          <param name="dbsnp_known_names" value="True"/>
          <param name="comp_rod_bind" value="0"/>
          <param name="gatk_param_type_selector" value="basic"/>
          <param name="analysis_param_type_selector" value="basic"/>
          <output file="gatk/gatk_variant_eval/gatk_variant_eval_out_1.gatk_report" name="output_report"/>
          <output compare="contains" file="gatk/gatk_variant_eval/gatk_variant_eval_out_1.log.contains" name="output_log"/>
      </test>
  </tests>
  <help>
**What it does**

General-purpose tool for variant evaluation (% in dbSNP, genotype concordance, Ti/Tv ratios, and a lot more)

For more information on using the VariantEval module, see this `tool specific page &lt;http://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_sting_gatk_walkers_varianteval_VariantEval.html&gt;`_.

To learn about best practices for variant detection using GATK, see this `overview &lt;http://www.broadinstitute.org/gatk/guide/topic?name=best-practices&gt;`_.

If you encounter errors, please view the `GATK FAQ &lt;http://www.broadinstitute.org/gatk/guide/topic?name=faqs&gt;`_.

------

**Inputs**

GenomeAnalysisTK: VariantEval accepts variant files as input.


**Outputs**

The output is a table of variant evaluation.


Go `here &lt;http://www.broadinstitute.org/gatk/guide/topic?name=intro&gt;`_ for details on GATK file formats.

-------

**Settings**::

 out                                   An output file presented to the walker. Will overwrite contents if file exists.
 list                                  List the available eval modules and exit
 select_exps                           One or more stratifications to use when evaluating the data
 select_names                          Names to use for the list of stratifications (must be a 1-to-1 mapping)
 sample                                Derive eval and comp contexts using only these sample genotypes, when genotypes are available in the original context
 known_names                           Name of ROD bindings containing variant sites that should be treated as known when splitting eval rods into known and novel subsets
 stratificationModule                  One or more specific stratification modules to apply to the eval track(s) (in addition to the standard stratifications, unless -noS is specified)
 doNotUseAllStandardStratifications    Do not use the standard stratification modules by default (instead, only those that are specified with the -S option)
 onlyVariantsOfType                    If provided, only variants of these types will be considered during the evaluation, in 
 evalModule                            One or more specific eval modules to apply to the eval track(s) (in addition to the standard modules, unless -noE is specified)
 doNotUseAllStandardModules            Do not use the standard modules by default (instead, only those that are specified with the -E option)
 numSamples                            Number of samples (used if no samples are available in the VCF file
 minPhaseQuality                       Minimum phasing quality
 family_structure                      If provided, genotypes in will be examined for mendelian violations: this argument is a string formatted as dad+mom=child where these parameters determine which sample names are examined
 mendelianViolationQualThreshold       Minimum genotype QUAL score for each trio member required to accept a site as a violation
 ancestralAlignments                   Fasta file with ancestral alleles

------

**Citation**

For the underlying tool, please cite `DePristo MA, Banks E, Poplin R, Garimella KV, Maguire JR, Hartl C, Philippakis AA, del Angel G, Rivas MA, Hanna M, McKenna A, Fennell TJ, Kernytsky AM, Sivachenko AY, Cibulskis K, Gabriel SB, Altshuler D, Daly MJ. A framework for variation discovery and genotyping using next-generation DNA sequencing data. Nat Genet. 2011 May;43(5):491-8. &lt;http://www.ncbi.nlm.nih.gov/pubmed/21478889&gt;`_

Please also site `McKenna A, Hanna M, Banks E, Sivachenko A, Cibulskis K, Kernytsky A, Garimella K, Altshuler D, Gabriel S, Daly M, DePristo MA (2010). The Genome Analysis Toolkit: a MapReduce framework for analyzing next-generation DNA sequencing data. Genome Res. 20:1297-303. Epub 2010 Jul 19. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20644199&gt;`_

If you use this tool in Galaxy, please cite `Blankenberg D, Von Kuster G, Coraor N, Ananda G, Lazarus R, Mangan M, Nekrutenko A, Taylor J. Galaxy: a web-based genome analysis tool for experimentalists. Curr Protoc Mol Biol. 2010 Jan;Chapter 19:Unit 19.10.1-21. &lt;http://www.ncbi.nlm.nih.gov/pubmed/20069535&gt;`_

  </help>
</tool>
